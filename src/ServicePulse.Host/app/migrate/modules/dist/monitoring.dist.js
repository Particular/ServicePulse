!function(I){var g={};function n(C){if(g[C])return g[C].exports;var e=g[C]={i:C,l:!1,exports:{}};return I[C].call(e.exports,e,e.exports,n),e.l=!0,e.exports}n.m=I,n.c=g,n.d=function(I,g,C){n.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:C})},n.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},n.t=function(I,g){if(1&g&&(I=n(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var C=Object.create(null);if(n.r(C),Object.defineProperty(C,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var e in I)n.d(C,e,function(g){return I[g]}.bind(null,e));return C},n.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return n.d(g,"a",g),g},n.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},n.p="",n(n.s=273)}({10:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _uiParticular = __webpack_require__(11);\n\nvar _uiParticular2 = _interopRequireDefault(_uiParticular);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function (window, angular, d3) {\n    'use strict';\n\n    var averageDecimalsDefault = 2;\n    var avgLabelColorDefault = '#2700CB';\n    var avgLabelSuffixDefault = '';\n\n    var averageLabelToTheRight = (0, _uiParticular2.default)({ pointToTheLeft: false, caption: 'AVG' });\n\n    angular.module('ui.particular.graph', []).directive('graph', function (formatter) {\n        return {\n            restrict: 'E',\n            scope: {\n                plotData: '=',\n                formatter: '&',\n                minimumYaxis: '@',\n                isDurationGraph: '=isDurationGraph',\n                avgDecimals: '@'\n            },\n            template: '<svg></svg>',\n            link: function link(scope, element, attrs) {\n                attrs.avgLabelColor = attrs.avgLabelColor || avgLabelColorDefault;\n                attrs.metricSuffix = attrs.metricSuffix || avgLabelSuffixDefault;\n                scope.avgDecimals = scope.avgDecimals || averageDecimalsDefault;\n\n                scope.plotData = scope.plotData || { points: [], average: 0 };\n\n                scope.$watch('plotData', function () {\n                    var svg = element.find('svg')[0];\n\n                    var width = svg.clientWidth;\n                    var height = svg.clientHeight;\n\n                    //HINT: This is workaround for Firefox\n                    if (width === 0) {\n                        var box = svg.getBoundingClientRect();\n\n                        width = box.right - box.left;\n                        height = box.bottom - box.top;\n                    }\n\n                    var verticalMargin = 6;\n                    var horizontalMargin = 2;\n\n                    var points = scope.plotData.points;\n                    if (points.length === 0) {\n                        points = new Array(10).fill(0);\n                    }\n                    var average = scope.plotData.average || 0;\n                    var minimumYaxis = !isNaN(scope.minimumYaxis) ? Number(scope.minimumYaxis) : 10;\n                    var max = points && points.length ? Math.max(average * 1.5, d3.max(points), minimumYaxis) : 1;\n                    var numberOfPoints = points && points.length ? points.length : 2;\n\n                    var scaleY = d3.scaleLinear().domain([0, max]).range([height - verticalMargin, verticalMargin]);\n\n                    var scaleX = d3.scaleLinear().domain([0, numberOfPoints - 1]).range([horizontalMargin, width - horizontalMargin]);\n\n                    var area = d3.area().x(function (d, i) {\n                        return scaleX(i);\n                    }).y(function (d, i) {\n                        return scaleY(d);\n                    }).y1(function (d) {\n                        return scaleY(0);\n                    }).curve(d3.curveLinear);\n\n                    var line = d3.line().x(function (d, i) {\n                        return scaleX(i);\n                    }).y(function (d, i) {\n                        return scaleY(d);\n                    }).curve(d3.curveLinear);\n\n                    d3.select(svg).selectAll(\"*\").remove();\n\n                    var chart = d3.select(svg).attr('width', width).attr('height', height);\n\n                    chart.append('rect').attr('width', width - 2 * horizontalMargin).attr('height', height - 2 * verticalMargin).attr('transform', 'translate(' + horizontalMargin + ',' + verticalMargin + ')').attr('fill', '#F2F6F7');\n\n                    if (points) {\n                        chart.append('path').datum(points).attr('d', area).attr('class', 'graph-data-fill');\n\n                        chart.append('path').datum(points).attr('d', line).attr('class', 'graph-data-line');\n                    }\n\n                    var averageLine = chart.append('path').datum(Array(numberOfPoints).fill(average)).attr('d', line).attr('class', 'graph-avg-line');\n\n                    var displayAverageLabel = function displayAverageLabel(averageLine, label, value, color, unit) {\n                        var _averageLine$node$get = averageLine.node().getBoundingClientRect(),\n                            x = _averageLine$node$get.x,\n                            y = _averageLine$node$get.y,\n                            width = _averageLine$node$get.width;\n\n                        label.value(value, unit);\n\n                        if (label.pointingToTheLeft) {\n                            label.displayAt({ x: x + width + window.pageXOffset, y: y + window.pageYOffset, color: color });\n                        } else {\n                            label.displayAt({ x: x + window.pageXOffset, y: y + window.pageYOffset, color: color });\n                        }\n                    };\n\n                    chart.on(\"mouseover\", function () {\n                        var value = '' + formatter.formatLargeNumber(average, scope.avgDecimals);\n                        var suffix = attrs.metricSuffix;\n\n                        if (scope.isDurationGraph) {\n                            value = '' + formatter.formatTime(average).value;\n                            suffix = formatter.formatTime(average).unit.toUpperCase();\n                        }\n\n                        displayAverageLabel(averageLine, averageLabelToTheRight, value, attrs.avgLabelColor, suffix);\n                    }).on(\"mouseout\", function () {\n                        averageLabelToTheRight.hide();\n                    });\n                });\n            }\n        };\n    });\n})(window, window.angular, window.d3);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")},11:function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = ArrowLabel;\nfunction ArrowLabel(_ref) {\n    var _ref$pointToTheLeft = _ref.pointToTheLeft,\n        pointToTheLeft = _ref$pointToTheLeft === undefined ? false : _ref$pointToTheLeft,\n        _ref$caption = _ref.caption,\n        caption = _ref$caption === undefined ? '' : _ref$caption;\n\n\n    var div = document.createElement('div');\n    div.style.position = 'absolute';\n    div.style.zIndex = 10;\n    div.style.visibility = 'hidden';\n    div.classList = 'avg-tooltip' + (pointToTheLeft && ' left' || '');\n    div.innerHTML = '<div>\\n                        ' + caption + '\\n                    </div>\\n                    <div class=\"value\">\\n                        0 <span></span>\\n                    </div>';\n    document.body.appendChild(div);\n\n    return {\n        displayAt: function displayAt(_ref2) {\n            var x = _ref2.x,\n                y = _ref2.y,\n                color = _ref2.color;\n\n            var lableDimensions = getComputedStyle(div);\n            //align the label vertically.\n            div.style.top = Math.trunc(y - lableDimensions.height.replace('px', '') / 2) + 'px';\n\n            //align the label horizontally.\n            //get the label tip dimensions. The label tip is composed by a roated square of the ::before pseudo-element.\n            var labelTipWidth = getComputedStyle(div, ':before').width.replace('px', '');\n            var labelTipHeight = getComputedStyle(div, ':before').height.replace('px', '');\n            var lalbeTipHypotenuse = Math.trunc(Math.hypot(labelTipWidth, labelTipHeight));\n\n            if (pointToTheLeft == false) {\n                div.style.left = 'inherit';\n                div.style.right = 'calc(100% - ' + x + 'px + ' + lalbeTipHypotenuse / 2 + 'px)';\n            } else {\n                div.style.right = 'inherit';\n                div.style.left = x + lalbeTipHypotenuse / 2 + 'px';\n            }\n\n            div.style.visibility = 'visible';\n            div.style.setProperty('--avg-tooltip-background-color', color); //by using properties the color of the 'before' content pseudo element can be updated.\n        },\n\n        hide: function hide() {\n            div.style.visibility = 'hidden';\n        },\n\n        value: function value(_value, unit) {\n            div.querySelector('.value').innerHTML = _value + ' <span>' + unit + '</span>';\n        },\n\n        pointingToTheLeft: pointToTheLeft\n    };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLmFycm93TGFiZWwuanM/MDhjMiJdLCJuYW1lcyI6WyJBcnJvd0xhYmVsIiwicG9pbnRUb1RoZUxlZnQiLCJjYXB0aW9uIiwiZGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJwb3NpdGlvbiIsInpJbmRleCIsInZpc2liaWxpdHkiLCJjbGFzc0xpc3QiLCJpbm5lckhUTUwiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJkaXNwbGF5QXQiLCJ4IiwieSIsImNvbG9yIiwibGFibGVEaW1lbnNpb25zIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRvcCIsIk1hdGgiLCJ0cnVuYyIsImhlaWdodCIsInJlcGxhY2UiLCJsYWJlbFRpcFdpZHRoIiwid2lkdGgiLCJsYWJlbFRpcEhlaWdodCIsImxhbGJlVGlwSHlwb3RlbnVzZSIsImh5cG90IiwibGVmdCIsInJpZ2h0Iiwic2V0UHJvcGVydHkiLCJoaWRlIiwidmFsdWUiLCJ1bml0IiwicXVlcnlTZWxlY3RvciIsInBvaW50aW5nVG9UaGVMZWZ0Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFBd0JBLFU7QUFBVCxTQUFTQSxVQUFULE9BQThEO0FBQUEsbUNBQXhDQyxjQUF3QztBQUFBLFFBQXhDQSxjQUF3Qyx1Q0FBdkIsS0FBdUI7QUFBQSw0QkFBaEJDLE9BQWdCO0FBQUEsUUFBaEJBLE9BQWdCLGdDQUFOLEVBQU07OztBQUV6RSxRQUFJQyxNQUFNQyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQVY7QUFDQUYsUUFBSUcsS0FBSixDQUFVQyxRQUFWLEdBQXFCLFVBQXJCO0FBQ0FKLFFBQUlHLEtBQUosQ0FBVUUsTUFBVixHQUFtQixFQUFuQjtBQUNBTCxRQUFJRyxLQUFKLENBQVVHLFVBQVYsR0FBdUIsUUFBdkI7QUFDQU4sUUFBSU8sU0FBSixvQkFBOEJULGtCQUFrQixPQUFsQixJQUE2QixFQUEzRDtBQUNBRSxRQUFJUSxTQUFKLHVDQUNzQlQsT0FEdEI7QUFNQUUsYUFBU1EsSUFBVCxDQUFjQyxXQUFkLENBQTBCVixHQUExQjs7QUFFQSxXQUFPO0FBQ0hXLG1CQUFXLDBCQUEwQjtBQUFBLGdCQUFkQyxDQUFjLFNBQWRBLENBQWM7QUFBQSxnQkFBWEMsQ0FBVyxTQUFYQSxDQUFXO0FBQUEsZ0JBQVJDLEtBQVEsU0FBUkEsS0FBUTs7QUFDakMsZ0JBQUlDLGtCQUFrQkMsaUJBQWlCaEIsR0FBakIsQ0FBdEI7QUFDQTtBQUNBQSxnQkFBSUcsS0FBSixDQUFVYyxHQUFWLEdBQW1CQyxLQUFLQyxLQUFMLENBQVdOLElBQUlFLGdCQUFnQkssTUFBaEIsQ0FBdUJDLE9BQXZCLENBQStCLElBQS9CLEVBQXFDLEVBQXJDLElBQTJDLENBQTFELENBQW5COztBQUVBO0FBQ0E7QUFDQSxnQkFBSUMsZ0JBQWdCTixpQkFBaUJoQixHQUFqQixFQUFzQixTQUF0QixFQUFpQ3VCLEtBQWpDLENBQXVDRixPQUF2QyxDQUErQyxJQUEvQyxFQUFxRCxFQUFyRCxDQUFwQjtBQUNBLGdCQUFJRyxpQkFBaUJSLGlCQUFpQmhCLEdBQWpCLEVBQXNCLFNBQXRCLEVBQWlDb0IsTUFBakMsQ0FBd0NDLE9BQXhDLENBQWdELElBQWhELEVBQXNELEVBQXRELENBQXJCO0FBQ0EsZ0JBQUlJLHFCQUFxQlAsS0FBS0MsS0FBTCxDQUFXRCxLQUFLUSxLQUFMLENBQVdKLGFBQVgsRUFBMEJFLGNBQTFCLENBQVgsQ0FBekI7O0FBRUEsZ0JBQUkxQixrQkFBa0IsS0FBdEIsRUFBNkI7QUFDekJFLG9CQUFJRyxLQUFKLENBQVV3QixJQUFWLEdBQWlCLFNBQWpCO0FBQ0EzQixvQkFBSUcsS0FBSixDQUFVeUIsS0FBVixvQkFBaUNoQixDQUFqQyxhQUEwQ2EscUJBQXFCLENBQS9EO0FBQ0gsYUFIRCxNQUdPO0FBQ0h6QixvQkFBSUcsS0FBSixDQUFVeUIsS0FBVixHQUFrQixTQUFsQjtBQUNBNUIsb0JBQUlHLEtBQUosQ0FBVXdCLElBQVYsR0FBb0JmLElBQUthLHFCQUFxQixDQUE5QztBQUNIOztBQUVEekIsZ0JBQUlHLEtBQUosQ0FBVUcsVUFBVixHQUF1QixTQUF2QjtBQUNBTixnQkFBSUcsS0FBSixDQUFVMEIsV0FBVixDQUFzQixnQ0FBdEIsRUFBd0RmLEtBQXhELEVBcEJpQyxDQW9CK0I7QUFDbkUsU0F0QkU7O0FBd0JIZ0IsY0FBTSxnQkFBWTtBQUNkOUIsZ0JBQUlHLEtBQUosQ0FBVUcsVUFBVixHQUF1QixRQUF2QjtBQUNILFNBMUJFOztBQTRCSHlCLGVBQU8sZUFBVUEsTUFBVixFQUFpQkMsSUFBakIsRUFBdUI7QUFDMUJoQyxnQkFBSWlDLGFBQUosQ0FBa0IsUUFBbEIsRUFBNEJ6QixTQUE1QixHQUEyQ3VCLE1BQTNDLGVBQTBEQyxJQUExRDtBQUNILFNBOUJFOztBQWdDSEUsMkJBQW1CcEM7QUFoQ2hCLEtBQVA7QUFrQ0giLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcnJvd0xhYmVsKHsgcG9pbnRUb1RoZUxlZnQgPSBmYWxzZSwgY2FwdGlvbiA9ICcnIH0pIHtcblxuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGRpdi5zdHlsZS56SW5kZXggPSAxMDtcbiAgICBkaXYuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIGRpdi5jbGFzc0xpc3QgPSBgYXZnLXRvb2x0aXAke3BvaW50VG9UaGVMZWZ0ICYmICcgbGVmdCcgfHwgJyd9YDtcbiAgICBkaXYuaW5uZXJIVE1MID0gYDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAke2NhcHRpb259XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDAgPHNwYW4+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGRpc3BsYXlBdDogZnVuY3Rpb24gKHsgeCwgeSwgY29sb3J9KSB7XG4gICAgICAgICAgICB2YXIgbGFibGVEaW1lbnNpb25zID0gZ2V0Q29tcHV0ZWRTdHlsZShkaXYpO1xuICAgICAgICAgICAgLy9hbGlnbiB0aGUgbGFiZWwgdmVydGljYWxseS5cbiAgICAgICAgICAgIGRpdi5zdHlsZS50b3AgPSBgJHtNYXRoLnRydW5jKHkgLSBsYWJsZURpbWVuc2lvbnMuaGVpZ2h0LnJlcGxhY2UoJ3B4JywgJycpIC8gMil9cHhgO1xuXG4gICAgICAgICAgICAvL2FsaWduIHRoZSBsYWJlbCBob3Jpem9udGFsbHkuXG4gICAgICAgICAgICAvL2dldCB0aGUgbGFiZWwgdGlwIGRpbWVuc2lvbnMuIFRoZSBsYWJlbCB0aXAgaXMgY29tcG9zZWQgYnkgYSByb2F0ZWQgc3F1YXJlIG9mIHRoZSA6OmJlZm9yZSBwc2V1ZG8tZWxlbWVudC5cbiAgICAgICAgICAgIHZhciBsYWJlbFRpcFdpZHRoID0gZ2V0Q29tcHV0ZWRTdHlsZShkaXYsICc6YmVmb3JlJykud2lkdGgucmVwbGFjZSgncHgnLCAnJyk7XG4gICAgICAgICAgICB2YXIgbGFiZWxUaXBIZWlnaHQgPSBnZXRDb21wdXRlZFN0eWxlKGRpdiwgJzpiZWZvcmUnKS5oZWlnaHQucmVwbGFjZSgncHgnLCAnJyk7XG4gICAgICAgICAgICB2YXIgbGFsYmVUaXBIeXBvdGVudXNlID0gTWF0aC50cnVuYyhNYXRoLmh5cG90KGxhYmVsVGlwV2lkdGgsIGxhYmVsVGlwSGVpZ2h0KSk7XG5cbiAgICAgICAgICAgIGlmIChwb2ludFRvVGhlTGVmdCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGRpdi5zdHlsZS5sZWZ0ID0gJ2luaGVyaXQnO1xuICAgICAgICAgICAgICAgIGRpdi5zdHlsZS5yaWdodCA9IGBjYWxjKDEwMCUgLSAke3h9cHggKyAke2xhbGJlVGlwSHlwb3RlbnVzZSAvIDJ9cHgpYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGl2LnN0eWxlLnJpZ2h0ID0gJ2luaGVyaXQnO1xuICAgICAgICAgICAgICAgIGRpdi5zdHlsZS5sZWZ0ID0gYCR7eCArIChsYWxiZVRpcEh5cG90ZW51c2UgLyAyKX1weGA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRpdi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgICAgZGl2LnN0eWxlLnNldFByb3BlcnR5KCctLWF2Zy10b29sdGlwLWJhY2tncm91bmQtY29sb3InLCBjb2xvcik7IC8vYnkgdXNpbmcgcHJvcGVydGllcyB0aGUgY29sb3Igb2YgdGhlICdiZWZvcmUnIGNvbnRlbnQgcHNldWRvIGVsZW1lbnQgY2FuIGJlIHVwZGF0ZWQuXG4gICAgICAgIH0sXG5cbiAgICAgICAgaGlkZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGl2LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgfSxcblxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHZhbHVlLCB1bml0KSB7XG4gICAgICAgICAgICBkaXYucXVlcnlTZWxlY3RvcignLnZhbHVlJykuaW5uZXJIVE1MID0gYCR7dmFsdWV9IDxzcGFuPiR7dW5pdH08L3NwYW4+YDtcbiAgICAgICAgfSxcblxuICAgICAgICBwb2ludGluZ1RvVGhlTGVmdDogcG9pbnRUb1RoZUxlZnRcbiAgICB9O1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n")},12:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular) {\n    'use strict';\n\n    angular.module('ui.particular.graphdecimal', []).filter('graphdecimal', ['$filter', function ($filter) {\n        return function (input, decimals) {\n            if (input) {\n                var lastValue = input.points.length > 0 ? input.points[input.points.length - 1] : 0;\n                input.displayValue = $filter(\"metricslargenumber\")(lastValue, decimals);\n            } else {\n                input = {\n                    points: [],\n                    average: 0,\n                    displayValue: 0\n                };\n            }\n\n            return input;\n        };\n    }]);\n})(window, window.angular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLmdyYXBoZGVjaW1hbC5qcz84YjMzIl0sIm5hbWVzIjpbIndpbmRvdyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJmaWx0ZXIiLCIkZmlsdGVyIiwiaW5wdXQiLCJkZWNpbWFscyIsImxhc3RWYWx1ZSIsInBvaW50cyIsImxlbmd0aCIsImRpc3BsYXlWYWx1ZSIsImF2ZXJhZ2UiXSwibWFwcGluZ3MiOiI7O0FBQUMsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBMkI7QUFDeEI7O0FBRUFBLFlBQVFDLE1BQVIsQ0FBZSw0QkFBZixFQUE2QyxFQUE3QyxFQUNLQyxNQURMLENBQ1ksY0FEWixFQUM0QixDQUFDLFNBQUQsRUFBWSxVQUFVQyxPQUFWLEVBQW1CO0FBQ25ELGVBQU8sVUFBVUMsS0FBVixFQUFpQkMsUUFBakIsRUFBMkI7QUFDOUIsZ0JBQUlELEtBQUosRUFBVztBQUNQLG9CQUFJRSxZQUFZRixNQUFNRyxNQUFOLENBQWFDLE1BQWIsR0FBc0IsQ0FBdEIsR0FBMEJKLE1BQU1HLE1BQU4sQ0FBYUgsTUFBTUcsTUFBTixDQUFhQyxNQUFiLEdBQXNCLENBQW5DLENBQTFCLEdBQWtFLENBQWxGO0FBQ0FKLHNCQUFNSyxZQUFOLEdBQXFCTixRQUFRLG9CQUFSLEVBQThCRyxTQUE5QixFQUF5Q0QsUUFBekMsQ0FBckI7QUFDSCxhQUhELE1BR087QUFDSEQsd0JBQVE7QUFDSkcsNEJBQVEsRUFESjtBQUVKRyw2QkFBUyxDQUZMO0FBR0pELGtDQUFjO0FBSFYsaUJBQVI7QUFLSDs7QUFFRCxtQkFBT0wsS0FBUDtBQUNILFNBYkQ7QUFjSCxLQWZ1QixDQUQ1QjtBQWlCSCxDQXBCQSxFQW9CQ0wsTUFwQkQsRUFvQlNBLE9BQU9DLE9BcEJoQixDQUFEIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICh3aW5kb3csIGFuZ3VsYXIpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgndWkucGFydGljdWxhci5ncmFwaGRlY2ltYWwnLCBbXSlcbiAgICAgICAgLmZpbHRlcignZ3JhcGhkZWNpbWFsJywgWyckZmlsdGVyJywgZnVuY3Rpb24gKCRmaWx0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQsIGRlY2ltYWxzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0VmFsdWUgPSBpbnB1dC5wb2ludHMubGVuZ3RoID4gMCA/IGlucHV0LnBvaW50c1tpbnB1dC5wb2ludHMubGVuZ3RoIC0gMV0gOiAwO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5kaXNwbGF5VmFsdWUgPSAkZmlsdGVyKFwibWV0cmljc2xhcmdlbnVtYmVyXCIpKGxhc3RWYWx1ZSwgZGVjaW1hbHMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2U6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5VmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG59KHdpbmRvdywgd2luZG93LmFuZ3VsYXIpKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n")},13:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular) {\n    'use strict';\n\n    angular.module('ui.particular.graphduration', []).filter('graphduration', ['formatter', function (formatter) {\n        return function (input) {\n            if (input) {\n                var lastValue = input.points.length > 0 ? input.points[input.points.length - 1] : 0;\n                input.displayValue = formatter.formatTime(lastValue);\n            }\n\n            return input;\n        };\n    }]);\n})(window, window.angular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLmdyYXBoZHVyYXRpb24uanM/YjIxZSJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJhbmd1bGFyIiwibW9kdWxlIiwiZmlsdGVyIiwiZm9ybWF0dGVyIiwiaW5wdXQiLCJsYXN0VmFsdWUiLCJwb2ludHMiLCJsZW5ndGgiLCJkaXNwbGF5VmFsdWUiLCJmb3JtYXRUaW1lIl0sIm1hcHBpbmdzIjoiOztBQUFDLFdBQVVBLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQ3hCOztBQUVBQSxZQUFRQyxNQUFSLENBQWUsNkJBQWYsRUFBOEMsRUFBOUMsRUFDS0MsTUFETCxDQUNZLGVBRFosRUFDNkIsQ0FBQyxXQUFELEVBQWMsVUFBVUMsU0FBVixFQUFxQjtBQUN4RCxlQUFPLFVBQVVDLEtBQVYsRUFBaUI7QUFDcEIsZ0JBQUlBLEtBQUosRUFBVztBQUNQLG9CQUFJQyxZQUFZRCxNQUFNRSxNQUFOLENBQWFDLE1BQWIsR0FBc0IsQ0FBdEIsR0FBMEJILE1BQU1FLE1BQU4sQ0FBYUYsTUFBTUUsTUFBTixDQUFhQyxNQUFiLEdBQXNCLENBQW5DLENBQTFCLEdBQWtFLENBQWxGO0FBQ0FILHNCQUFNSSxZQUFOLEdBQXFCTCxVQUFVTSxVQUFWLENBQXFCSixTQUFyQixDQUFyQjtBQUNIOztBQUVELG1CQUFPRCxLQUFQO0FBQ0gsU0FQRDtBQVFILEtBVHdCLENBRDdCO0FBV0gsQ0FkQSxFQWNDTCxNQWRELEVBY1NBLE9BQU9DLE9BZGhCLENBQUQiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKHdpbmRvdywgYW5ndWxhcikge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCd1aS5wYXJ0aWN1bGFyLmdyYXBoZHVyYXRpb24nLCBbXSlcbiAgICAgICAgLmZpbHRlcignZ3JhcGhkdXJhdGlvbicsIFsnZm9ybWF0dGVyJywgZnVuY3Rpb24gKGZvcm1hdHRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdFZhbHVlID0gaW5wdXQucG9pbnRzLmxlbmd0aCA+IDAgPyBpbnB1dC5wb2ludHNbaW5wdXQucG9pbnRzLmxlbmd0aCAtIDFdIDogMDtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuZGlzcGxheVZhbHVlID0gZm9ybWF0dGVyLmZvcm1hdFRpbWUobGFzdFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG59KHdpbmRvdywgd2luZG93LmFuZ3VsYXIpKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n")},14:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular) {\n    'use strict';\n\n    angular.module('ui.particular.metricslargenumber', []).filter('metricslargenumber', ['formatter', function (formatter) {\n        return function (input, dec) {\n            var decimals = 0;\n            if (input < 10 || input > 1000000) {\n                decimals = 2;\n            }\n            return formatter.formatLargeNumber(input, dec || decimals);\n        };\n    }]);\n})(window, window.angular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLm1ldHJpY3NMYXJnZW51bWJlci5qcz9lZmY3Il0sIm5hbWVzIjpbIndpbmRvdyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJmaWx0ZXIiLCJmb3JtYXR0ZXIiLCJpbnB1dCIsImRlYyIsImRlY2ltYWxzIiwiZm9ybWF0TGFyZ2VOdW1iZXIiXSwibWFwcGluZ3MiOiI7O0FBQUMsV0FBU0EsTUFBVCxFQUFpQkMsT0FBakIsRUFBMEI7QUFDMUI7O0FBRUdBLFlBQVFDLE1BQVIsQ0FBZSxrQ0FBZixFQUFtRCxFQUFuRCxFQUNLQyxNQURMLENBQ1ksb0JBRFosRUFDa0MsQ0FBQyxXQUFELEVBQWMsVUFBVUMsU0FBVixFQUFxQjtBQUM3RCxlQUFPLFVBQVVDLEtBQVYsRUFBaUJDLEdBQWpCLEVBQXNCO0FBQ3pCLGdCQUFJQyxXQUFXLENBQWY7QUFDQSxnQkFBSUYsUUFBUSxFQUFSLElBQWNBLFFBQVEsT0FBMUIsRUFBbUM7QUFDL0JFLDJCQUFXLENBQVg7QUFDSDtBQUNELG1CQUFPSCxVQUFVSSxpQkFBVixDQUE0QkgsS0FBNUIsRUFBbUNDLE9BQU9DLFFBQTFDLENBQVA7QUFDSCxTQU5EO0FBT0gsS0FSNkIsQ0FEbEM7QUFVSCxDQWJBLEVBYUNQLE1BYkQsRUFhU0EsT0FBT0MsT0FiaEIsQ0FBRCIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih3aW5kb3csIGFuZ3VsYXIpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3VpLnBhcnRpY3VsYXIubWV0cmljc2xhcmdlbnVtYmVyJywgW10pXG4gICAgICAgIC5maWx0ZXIoJ21ldHJpY3NsYXJnZW51bWJlcicsIFsnZm9ybWF0dGVyJywgZnVuY3Rpb24gKGZvcm1hdHRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCwgZGVjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlY2ltYWxzID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPCAxMCB8fCBpbnB1dCA+IDEwMDAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGVjaW1hbHMgPSAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVyLmZvcm1hdExhcmdlTnVtYmVyKGlucHV0LCBkZWMgfHwgZGVjaW1hbHMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xufSh3aW5kb3csIHdpbmRvdy5hbmd1bGFyKSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n")},273:function(module,exports,__webpack_require__){"use strict";eval("\n\n__webpack_require__(274);\n__webpack_require__(281);\n__webpack_require__(289);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvbW9uaXRvcmluZy5qcz8wNGVlIl0sIm5hbWVzIjpbInJlcXVpcmUiXSwibWFwcGluZ3MiOiI7O0FBQUFBLG1CQUFPQSxDQUFDLEdBQVI7QUFDQUEsbUJBQU9BLENBQUMsR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxHQUFSIiwiZmlsZSI6IjI3My5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vanMvbW9uaXRvcmVkX2VuZHBvaW50cy5tb2R1bGUnKTtcbnJlcXVpcmUoJy4vanMvZW5kcG9pbnRfZGV0YWlscy5tb2R1bGUnKTtcbnJlcXVpcmUoJy4vanMvc2VydmljZXMvc2VydmljZXMuZGlzY29ubmVjdGVkRW5kcG9pbnRNb25pdG9yJyk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///273\n")},274:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular) {\n    'use strict';\n\n    angular.module('monitored_endpoints', []);\n\n    __webpack_require__(275);\n    __webpack_require__(7);\n    __webpack_require__(276);\n    __webpack_require__(277);\n    __webpack_require__(278);\n    __webpack_require__(8);\n\n    __webpack_require__(9);\n    __webpack_require__(10);\n    __webpack_require__(12);\n    __webpack_require__(13);\n    __webpack_require__(14);\n    __webpack_require__(280);\n})(window, window.angular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvbW9uaXRvcmVkX2VuZHBvaW50cy5tb2R1bGUuanM/YmI1NyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJhbmd1bGFyIiwibW9kdWxlIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQyxXQUFVQSxNQUFWLEVBQWtCQyxPQUFsQixFQUEyQjtBQUN4Qjs7QUFDQUEsWUFBUUMsTUFBUixDQUFlLHFCQUFmLEVBQXNDLEVBQXRDOztBQUVBQyx1QkFBT0EsQ0FBQyxHQUFSO0FBQ0FBLHVCQUFPQSxDQUFDLENBQVI7QUFDQUEsdUJBQU9BLENBQUMsR0FBUjtBQUNBQSx1QkFBT0EsQ0FBQyxHQUFSO0FBQ0FBLHVCQUFPQSxDQUFDLEdBQVI7QUFDQUEsdUJBQU9BLENBQUMsQ0FBUjs7QUFFQUEsdUJBQU9BLENBQUMsQ0FBUjtBQUNBQSx1QkFBT0EsQ0FBQyxFQUFSO0FBQ0FBLHVCQUFPQSxDQUFDLEVBQVI7QUFDQUEsdUJBQU9BLENBQUMsRUFBUjtBQUNBQSx1QkFBT0EsQ0FBQyxFQUFSO0FBQ0FBLHVCQUFPQSxDQUFDLEdBQVI7QUFFSCxDQWxCQSxFQWtCQ0gsTUFsQkQsRUFrQlNBLE9BQU9DLE9BbEJoQixDQUFEIiwiZmlsZSI6IjI3NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAod2luZG93LCBhbmd1bGFyKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGFuZ3VsYXIubW9kdWxlKCdtb25pdG9yZWRfZW5kcG9pbnRzJywgW10pO1xuXG4gICAgcmVxdWlyZSgnLi9zZXJ2aWNlcy9zZXJ2aWNlcy5tb25pdG9yaW5nJyk7XG4gICAgcmVxdWlyZSgnLi9zZXJ2aWNlcy9zZXJ2aWNlcy5jb25uZWN0aXZpdHlOb3RpZmllcicpO1xuICAgIHJlcXVpcmUoJy4vc2VydmljZXMvc2VydmljZXMuZW5kcG9pbnRHcm91cGluZycpO1xuICAgIHJlcXVpcmUoJy4vbW9uaXRvcmVkX2VuZHBvaW50cy5jb250cm9sbGVyJyk7XG4gICAgcmVxdWlyZSgnLi9tb25pdG9yZWRfZW5kcG9pbnRzLnJvdXRlLmpzJyk7XG4gICAgcmVxdWlyZSgnLi9jb25zdGFudC5kaWFncmFtcy5qcycpO1xuXG4gICAgcmVxdWlyZSgnLi9kaXJlY3RpdmVzL3VpLnBhcnRpY3VsYXIubW9uaXRvcmluZ0Nvbm5lY3Rpdml0eVN0YXR1cy5qcycpO1xuICAgIHJlcXVpcmUoJy4vZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLmdyYXBoLmpzJyk7XG4gICAgcmVxdWlyZSgnLi9kaXJlY3RpdmVzL3VpLnBhcnRpY3VsYXIuZ3JhcGhkZWNpbWFsLmpzJyk7XG4gICAgcmVxdWlyZSgnLi9kaXJlY3RpdmVzL3VpLnBhcnRpY3VsYXIuZ3JhcGhkdXJhdGlvbi5qcycpO1xuICAgIHJlcXVpcmUoJy4vZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLm1ldHJpY3NMYXJnZW51bWJlci5qcycpO1xuICAgIHJlcXVpcmUoJy4vZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLnNvcnRhYmxlQ29sdW1uLmpzJyk7XG4gICAgXG59KHdpbmRvdywgd2luZG93LmFuZ3VsYXIpKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///274\n")},275:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular, $, Rx) {\n    'use strict';\n\n    function Service($http, rx, connectionsManager, uri, $q) {\n\n        var mu = connectionsManager.getMonitoringUrl();\n\n        function createEndpointsSource(historyPeriod, refreshInterval) {\n            return Rx.Observable.interval(refreshInterval).startWith(0).flatMap(function (i) {\n                return Rx.Observable.fromPromise(loadEndpointDataFromMonitoringService(historyPeriod));\n            }).selectMany(function (endpoints) {\n                return endpoints;\n            });\n        }\n\n        function loadEndpointDataFromMonitoringService(historyPeriod) {\n            return $http.get(uri.join(mu, 'monitored-endpoints') + '?history=' + historyPeriod).then(function (result) {\n                return result.data.length !== 0 ? result.data : [{ empty: true }];\n            }, function (error) {\n                return [{ error: error }];\n            });\n        }\n\n        function loadEndpointDetailsFromMonitoringService(endpointName, historyPeriod) {\n            return $http.get(uri.join(mu, 'monitored-endpoints', endpointName) + \"?history=\" + historyPeriod).then(function (result) {\n                filterOutSystemMessage(result.data);\n                return result.data;\n            }, function (error) {\n                return { error: error };\n            });\n        }\n\n        function filterOutSystemMessage(data) {\n            data.messageTypes = data.messageTypes.filter(function (mt) {\n                return mt.id;\n            });\n        }\n\n        function createEndpointDetailsSource(endpointName, historyPeriod, refreshInterval) {\n            return Rx.Observable.interval(refreshInterval).startWith(0).flatMap(function (i) {\n                return Rx.Observable.fromPromise(loadEndpointDetailsFromMonitoringService(endpointName, historyPeriod));\n            });\n        }\n\n        function getMonitoredEndpoints() {\n            return $http.get(uri.join(mu, 'monitored-endpoints') + '?history=1');\n        }\n\n        function removeEndpointInstance(endpointName, instanceId) {\n            return $http.delete(uri.join(mu, 'monitored-instance', endpointName, instanceId));\n        }\n\n        function getServiceControlMonitoringVersion() {\n            return $http.get(mu).then(function (response) {\n                return response.headers('X-Particular-Version');\n            });\n        }\n\n        function isRemovingEndpointEnabled() {\n            return $http({\n                method: 'OPTIONS',\n                url: mu\n            }).then(function (response) {\n                var headers = response.headers();\n\n                var allow = headers.allow;\n                var deleteAllowed = allow.indexOf('DELETE') >= 0;\n\n                return deleteAllowed;\n            }, function () {\n                return false;\n            });\n        }\n\n        function getDisconnectedCount() {\n            return $http.get(uri.join(mu, 'monitored-endpoints', 'disconnected'));\n        }\n\n        var service = {\n            createEndpointsSource: createEndpointsSource,\n            createEndpointDetailsSource: createEndpointDetailsSource,\n            getMonitoredEndpoints: getMonitoredEndpoints,\n            getServiceControlMonitoringVersion: getServiceControlMonitoringVersion,\n            removeEndpointInstance: removeEndpointInstance,\n            isRemovingEndpointEnabled: isRemovingEndpointEnabled,\n            getDisconnectedCount: getDisconnectedCount\n        };\n\n        return service;\n    }\n\n    Service.$inject = ['$http', 'rx', 'connectionsManager', 'uri', '$q', 'toastService'];\n\n    angular.module('services.monitoringService', ['sc']).service('monitoringService', Service);\n})(window, window.angular, window.jQuery, window.Rx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///275\n")},276:function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n(function (angular) {\n    "use strict";\n\n    function parseEndpoint(endpoint, maxGroupSegments) {\n\n        if (maxGroupSegments === 0) {\n            return {\n                groupName: "Ungrouped",\n                shortName: endpoint.name,\n                endpoint: endpoint\n            };\n        }\n\n        var segments = endpoint.name.split(".");\n        var groupSegments = segments.slice(0, maxGroupSegments);\n        var endpointSegments = segments.slice(maxGroupSegments);\n        if (endpointSegments.length === 0) {\n            // the endpoint\'s name is shorter than the group size\n            return parseEndpoint(endpoint, maxGroupSegments - 1);\n        }\n\n        return {\n            groupName: groupSegments.join("."),\n            shortName: endpointSegments.join("."),\n            endpoint: endpoint\n        };\n    }\n\n    angular.module("monitored_endpoints", []).factory("endpointGrouping", function () {\n        return {\n            findSegments: function findSegments(endpoints) {\n                return endpoints.reduce(function (acc, cur) {\n                    return Math.max(acc, cur.name.split(".").length - 1);\n                }, 0);\n            },\n            group: function group(endpoints, numberOfSegments) {\n                var groups = new Map();\n                endpoints.forEach(function (element) {\n                    var grouping = parseEndpoint(element, numberOfSegments);\n\n                    var resultGroup = groups.get(grouping.groupName);\n                    if (!resultGroup) {\n                        resultGroup = {\n                            group: grouping.groupName,\n                            endpoints: []\n                        };\n                        groups.set(grouping.groupName, resultGroup);\n                    }\n                    resultGroup.endpoints.push(grouping);\n                });\n                return [].concat(_toConsumableArray(groups.values()));\n            }\n        };\n    });\n})(window.angular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvc2VydmljZXMvc2VydmljZXMuZW5kcG9pbnRHcm91cGluZy5qcz81OTE2Il0sIm5hbWVzIjpbImFuZ3VsYXIiLCJwYXJzZUVuZHBvaW50IiwiZW5kcG9pbnQiLCJtYXhHcm91cFNlZ21lbnRzIiwiZ3JvdXBOYW1lIiwic2hvcnROYW1lIiwibmFtZSIsInNlZ21lbnRzIiwic3BsaXQiLCJncm91cFNlZ21lbnRzIiwic2xpY2UiLCJlbmRwb2ludFNlZ21lbnRzIiwibGVuZ3RoIiwiam9pbiIsIm1vZHVsZSIsImZhY3RvcnkiLCJmaW5kU2VnbWVudHMiLCJlbmRwb2ludHMiLCJyZWR1Y2UiLCJhY2MiLCJjdXIiLCJNYXRoIiwibWF4IiwiZ3JvdXAiLCJudW1iZXJPZlNlZ21lbnRzIiwiZ3JvdXBzIiwiTWFwIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJncm91cGluZyIsInJlc3VsdEdyb3VwIiwiZ2V0Iiwic2V0IiwicHVzaCIsInZhbHVlcyIsIndpbmRvdyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLENBQUMsVUFBVUEsT0FBVixFQUFtQjtBQUNoQjs7QUFFQSxhQUFTQyxhQUFULENBQXVCQyxRQUF2QixFQUFpQ0MsZ0JBQWpDLEVBQW1EOztBQUUvQyxZQUFJQSxxQkFBcUIsQ0FBekIsRUFBNEI7QUFDeEIsbUJBQU87QUFDSEMsMkJBQVcsV0FEUjtBQUVIQywyQkFBV0gsU0FBU0ksSUFGakI7QUFHSEosMEJBQVVBO0FBSFAsYUFBUDtBQUtIOztBQUVELFlBQUlLLFdBQVdMLFNBQVNJLElBQVQsQ0FBY0UsS0FBZCxDQUFvQixHQUFwQixDQUFmO0FBQ0EsWUFBSUMsZ0JBQWdCRixTQUFTRyxLQUFULENBQWUsQ0FBZixFQUFrQlAsZ0JBQWxCLENBQXBCO0FBQ0EsWUFBSVEsbUJBQW1CSixTQUFTRyxLQUFULENBQWVQLGdCQUFmLENBQXZCO0FBQ0EsWUFBSVEsaUJBQWlCQyxNQUFqQixLQUE0QixDQUFoQyxFQUFtQztBQUMvQjtBQUNBLG1CQUFPWCxjQUFjQyxRQUFkLEVBQXdCQyxtQkFBbUIsQ0FBM0MsQ0FBUDtBQUNIOztBQUVELGVBQU87QUFDSEMsdUJBQVdLLGNBQWNJLElBQWQsQ0FBbUIsR0FBbkIsQ0FEUjtBQUVIUix1QkFBV00saUJBQWlCRSxJQUFqQixDQUFzQixHQUF0QixDQUZSO0FBR0hYLHNCQUFVQTtBQUhQLFNBQVA7QUFLSDs7QUFFREYsWUFBUWMsTUFBUixDQUFlLHFCQUFmLEVBQXNDLEVBQXRDLEVBQ0tDLE9BREwsQ0FDYSxrQkFEYixFQUNpQyxZQUFXO0FBQ3BDLGVBQU87QUFDSEMsMEJBQWMsc0JBQVNDLFNBQVQsRUFBb0I7QUFDOUIsdUJBQU9BLFVBQVVDLE1BQVYsQ0FBaUIsVUFBU0MsR0FBVCxFQUFjQyxHQUFkLEVBQW1CO0FBQ3ZDLDJCQUFPQyxLQUFLQyxHQUFMLENBQVNILEdBQVQsRUFBY0MsSUFBSWQsSUFBSixDQUFTRSxLQUFULENBQWUsR0FBZixFQUFvQkksTUFBcEIsR0FBNkIsQ0FBM0MsQ0FBUDtBQUNILGlCQUZNLEVBRUosQ0FGSSxDQUFQO0FBR0gsYUFMRTtBQU1IVyxtQkFBTyxlQUFVTixTQUFWLEVBQXFCTyxnQkFBckIsRUFBdUM7QUFDMUMsb0JBQUlDLFNBQVMsSUFBSUMsR0FBSixFQUFiO0FBQ0FULDBCQUFVVSxPQUFWLENBQWtCLFVBQVNDLE9BQVQsRUFBa0I7QUFDaEMsd0JBQUlDLFdBQVc1QixjQUFjMkIsT0FBZCxFQUF1QkosZ0JBQXZCLENBQWY7O0FBRUEsd0JBQUlNLGNBQWNMLE9BQU9NLEdBQVAsQ0FBV0YsU0FBU3pCLFNBQXBCLENBQWxCO0FBQ0Esd0JBQUksQ0FBQzBCLFdBQUwsRUFBa0I7QUFDZEEsc0NBQWM7QUFDVlAsbUNBQU9NLFNBQVN6QixTQUROO0FBRVZhLHVDQUFXO0FBRkQseUJBQWQ7QUFJQVEsK0JBQU9PLEdBQVAsQ0FBV0gsU0FBU3pCLFNBQXBCLEVBQStCMEIsV0FBL0I7QUFDSDtBQUNEQSxnQ0FBWWIsU0FBWixDQUFzQmdCLElBQXRCLENBQTJCSixRQUEzQjtBQUNILGlCQVpEO0FBYUEsb0RBQVdKLE9BQU9TLE1BQVAsRUFBWDtBQUNIO0FBdEJFLFNBQVA7QUF3QkgsS0ExQkw7QUE2QkgsQ0F6REQsRUF5REdDLE9BQU9uQyxPQXpEViIsImZpbGUiOiIyNzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGZ1bmN0aW9uIHBhcnNlRW5kcG9pbnQoZW5kcG9pbnQsIG1heEdyb3VwU2VnbWVudHMpIHtcblxuICAgICAgICBpZiAobWF4R3JvdXBTZWdtZW50cyA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBncm91cE5hbWU6IFwiVW5ncm91cGVkXCIsXG4gICAgICAgICAgICAgICAgc2hvcnROYW1lOiBlbmRwb2ludC5uYW1lLFxuICAgICAgICAgICAgICAgIGVuZHBvaW50OiBlbmRwb2ludFxuICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VnbWVudHMgPSBlbmRwb2ludC5uYW1lLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgdmFyIGdyb3VwU2VnbWVudHMgPSBzZWdtZW50cy5zbGljZSgwLCBtYXhHcm91cFNlZ21lbnRzKTtcbiAgICAgICAgdmFyIGVuZHBvaW50U2VnbWVudHMgPSBzZWdtZW50cy5zbGljZShtYXhHcm91cFNlZ21lbnRzKTtcbiAgICAgICAgaWYgKGVuZHBvaW50U2VnbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyB0aGUgZW5kcG9pbnQncyBuYW1lIGlzIHNob3J0ZXIgdGhhbiB0aGUgZ3JvdXAgc2l6ZVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRW5kcG9pbnQoZW5kcG9pbnQsIG1heEdyb3VwU2VnbWVudHMgLSAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBncm91cE5hbWU6IGdyb3VwU2VnbWVudHMuam9pbihcIi5cIiksXG4gICAgICAgICAgICBzaG9ydE5hbWU6IGVuZHBvaW50U2VnbWVudHMuam9pbihcIi5cIiksXG4gICAgICAgICAgICBlbmRwb2ludDogZW5kcG9pbnRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcIm1vbml0b3JlZF9lbmRwb2ludHNcIiwgW10pXG4gICAgICAgIC5mYWN0b3J5KFwiZW5kcG9pbnRHcm91cGluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmluZFNlZ21lbnRzOiBmdW5jdGlvbihlbmRwb2ludHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuZHBvaW50cy5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBjdXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChhY2MsIGN1ci5uYW1lLnNwbGl0KFwiLlwiKS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBncm91cDogZnVuY3Rpb24gKGVuZHBvaW50cywgbnVtYmVyT2ZTZWdtZW50cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgICAgICBlbmRwb2ludHMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBpbmcgPSBwYXJzZUVuZHBvaW50KGVsZW1lbnQsIG51bWJlck9mU2VnbWVudHMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0R3JvdXAgPSBncm91cHMuZ2V0KGdyb3VwaW5nLmdyb3VwTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdEdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0R3JvdXAgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwOiBncm91cGluZy5ncm91cE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50czogW11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBzLnNldChncm91cGluZy5ncm91cE5hbWUsIHJlc3VsdEdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdEdyb3VwLmVuZHBvaW50cy5wdXNoKGdyb3VwaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbLi4uZ3JvdXBzLnZhbHVlcygpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG5cbn0pKHdpbmRvdy5hbmd1bGFyKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///276\n')},277:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular, Rx) {\n    'use strict';\n\n    function controller($scope, $location, monitoringService, serviceControlService, historyPeriodsService, $filter, smallGraphsMinimumYAxis, connectivityNotifier, connectionsManager, endpointGrouping) {\n\n        var subscription, endpointsFromScSubscription;\n\n        $scope.periods = historyPeriodsService.getAllPeriods();\n        $scope.selectedPeriod = historyPeriodsService.getDefaultPeriod();\n        $scope.smallGraphsMinimumYAxis = smallGraphsMinimumYAxis;\n        $scope.endpoints = [];\n        $scope.filter = { name: $location.search().filter };\n        $scope.order = { prop: \"name\", expression: \"-name\" };\n        $scope.loading = true;\n        $scope.location = $location;\n        $scope.monitoringUrl = connectionsManager.getMonitoringUrl();\n        $scope.hasData = false; // TODO: UI toggles between 'no connectivity' and 'no data' but unknown how to set this via the monitoringService rx observable.\n        $scope.grouping = {\n            groupedEndpoints: [],\n            groupSegments: 0,\n            selectedGrouping: 0,\n            selectGroup: selectGroup\n        };\n\n        function selectGroup(groupSize) {\n            $scope.grouping.selectedGrouping = groupSize;\n            $scope.grouping.groupedEndpoints = endpointGrouping.group($scope.endpoints, groupSize);\n        }\n\n        $scope.$watchCollection(\"endpoints\", function () {\n            $scope.grouping.groupSegments = endpointGrouping.findSegments($scope.endpoints);\n            $scope.grouping.groupedEndpoints = endpointGrouping.group($scope.endpoints, $scope.grouping.selectedGrouping);\n        });\n\n        $scope.$watch(\"filter.name\", function (newVal) {\n            $location.search('filter', newVal);\n        });\n\n        $scope.selectPeriod = function (period) {\n            $scope.selectedPeriod = period;\n            historyPeriodsService.saveSelectedPeriod(period);\n            updateUI();\n        };\n\n        $scope.getDetailsUrl = function (endpoint) {\n            return '#/monitoring/endpoint/' + endpoint.name + '?historyPeriod=' + $scope.selectedPeriod.value;\n        };\n\n        $scope.totalThroughput = function () {\n            return Math.round($scope.endpoints.reduce(function (total, currentEndpoint) {\n                return total + currentEndpoint.metrics.throughput.average;\n            }, 0));\n        };\n\n        function fillDisplayValuesForEndpoint(endpoint) {\n\n            $filter('graphduration')(endpoint.metrics.processingTime);\n            $filter('graphduration')(endpoint.metrics.criticalTime);\n            $filter('graphdecimal')(endpoint.metrics.queueLength, 0);\n            $filter('graphdecimal')(endpoint.metrics.throughput, 2);\n            $filter('graphdecimal')(endpoint.metrics.retries, 2);\n        }\n\n        function mergeIn(destination, source) {\n            for (var propName in source) {\n                if (Object.prototype.hasOwnProperty.call(source, propName)) {\n                    destination[propName] = source[propName];\n                }\n            }\n        }\n\n        function updateUI() {\n            if (subscription) {\n                subscription.dispose();\n            }\n\n            if (endpointsFromScSubscription) {\n                endpointsFromScSubscription.dispose();\n            }\n\n            var selectedPeriod = $scope.selectedPeriod;\n\n            subscription = monitoringService.createEndpointsSource(selectedPeriod.value, selectedPeriod.refreshInterval).subscribe(function (endpoint) {\n\n                $scope.loading = false;\n                $scope.hasData = !endpoint.empty;\n                $scope.supportsEndpointCount = Object.prototype.hasOwnProperty.call(endpoint, 'connectedCount');\n\n                if (endpoint.empty) {\n                    return;\n                }\n\n                if (endpoint.error) {\n                    connectivityNotifier.reportFailedConnection();\n                    if ($scope.endpoints) {\n                        $scope.endpoints.forEach(function (item) {\n                            return item.isScMonitoringDisconnected = true;\n                        });\n                    }\n                } else {\n                    connectivityNotifier.reportSuccessfulConnection();\n                    var index = $scope.endpoints.findIndex(function (item) {\n                        return item.name === endpoint.name;\n                    });\n\n                    endpoint.isScMonitoringDisconnected = false;\n                    fillDisplayValuesForEndpoint(endpoint);\n                    if (index >= 0) {\n                        mergeIn($scope.endpoints[index], endpoint);\n                    } else {\n                        $scope.endpoints.push(endpoint);\n\n                        $scope.endpoints.sort(function (first, second) {\n                            if (first.name < second.name) {\n                                return -1;\n                            }\n\n                            if (first.name > second.name) {\n                                return 1;\n                            }\n\n                            return 0;\n                        });\n                    }\n                }\n\n                $scope.$apply();\n            });\n\n            endpointsFromScSubscription = Rx.Observable.interval(5000).startWith(0).flatMap(function (i) {\n                return Rx.Observable.fromPromise(serviceControlService.getExceptionGroups('Endpoint Name', ''));\n            }).selectMany(function (endpoints) {\n                return endpoints.data;\n            }).subscribe(function (endpoint) {\n                if (endpoint.operation_status === 'ArchiveCompleted') {\n                    return;\n                }\n                var index = $scope.endpoints.findIndex(function (item) {\n                    return item.name === endpoint.title;\n                });\n                if (index >= 0) {\n                    $scope.endpoints[index].serviceControlId = endpoint.id;\n                    $scope.endpoints[index].errorCount = endpoint.count;\n                } else {\n                    $scope.endpoints.push({ name: endpoint.title, errorCount: endpoint.count, serviceControlId: endpoint.id, isScMonitoringDisconnected: true });\n                }\n            });\n        }\n\n        updateUI();\n\n        $scope.$on(\"$destroy\", function handler() {\n            subscription.dispose();\n            endpointsFromScSubscription.dispose();\n        });\n    }\n\n    controller.$inject = ['$scope', '$location', 'monitoringService', 'serviceControlService', 'historyPeriodsService', '$filter', 'smallGraphsMinimumYAxis', 'connectivityNotifier', 'connectionsManager', 'endpointGrouping'];\n\n    angular.module('monitored_endpoints').controller('monitoredEndpointsCtrl', controller);\n})(window, window.angular, window.Rx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///277\n")},278:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular) {\n    'use strict';\n\n    function routeProvider($routeProvider) {\n        var template = __webpack_require__(279);\n\n        $routeProvider.when('/monitoring', {\n            data: {\n                pageTitle: 'Monitored Endpoints'\n            },\n            template: template,\n            controller: 'monitoredEndpointsCtrl',\n            controllerAs: 'vm',\n            reloadOnSearch: false\n        });\n    }\n\n    routeProvider.$inject = ['$routeProvider'];\n\n    angular.module('monitored_endpoints').config(routeProvider);\n})(window, window.angular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvbW9uaXRvcmVkX2VuZHBvaW50cy5yb3V0ZS5qcz8wZjJhIl0sIm5hbWVzIjpbIndpbmRvdyIsImFuZ3VsYXIiLCJyb3V0ZVByb3ZpZGVyIiwiJHJvdXRlUHJvdmlkZXIiLCJ0ZW1wbGF0ZSIsInJlcXVpcmUiLCJ3aGVuIiwiZGF0YSIsInBhZ2VUaXRsZSIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJyZWxvYWRPblNlYXJjaCIsIiRpbmplY3QiLCJtb2R1bGUiLCJjb25maWciXSwibWFwcGluZ3MiOiI7O0FBQUMsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBMkI7QUFDeEI7O0FBRUEsYUFBU0MsYUFBVCxDQUF1QkMsY0FBdkIsRUFBdUM7QUFDbkMsWUFBSUMsV0FBV0MsbUJBQU9BLENBQUMsR0FBUixDQUFmOztBQUVBRix1QkFBZUcsSUFBZixDQUFvQixhQUFwQixFQUFtQztBQUMvQkMsa0JBQU07QUFDRkMsMkJBQVc7QUFEVCxhQUR5QjtBQUkvQkosc0JBQVVBLFFBSnFCO0FBSy9CSyx3QkFBWSx3QkFMbUI7QUFNL0JDLDBCQUFjLElBTmlCO0FBTy9CQyw0QkFBZ0I7QUFQZSxTQUFuQztBQVNIOztBQUVEVCxrQkFBY1UsT0FBZCxHQUF3QixDQUNwQixnQkFEb0IsQ0FBeEI7O0FBSUFYLFlBQVFZLE1BQVIsQ0FBZSxxQkFBZixFQUNLQyxNQURMLENBQ1laLGFBRFo7QUFFSCxDQXZCQSxFQXVCRUYsTUF2QkYsRUF1QlVBLE9BQU9DLE9BdkJqQixDQUFEIiwiZmlsZSI6IjI3OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAod2luZG93LCBhbmd1bGFyKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gcm91dGVQcm92aWRlcigkcm91dGVQcm92aWRlcikge1xuICAgICAgICBsZXQgdGVtcGxhdGUgPSByZXF1aXJlKCcuLy4uL3ZpZXdzL21vbml0b3JlZF9lbmRwb2ludHMuaHRtbCcpO1xuXG4gICAgICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9tb25pdG9yaW5nJywge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHBhZ2VUaXRsZTogJ01vbml0b3JlZCBFbmRwb2ludHMnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ21vbml0b3JlZEVuZHBvaW50c0N0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgcmVsb2FkT25TZWFyY2g6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJvdXRlUHJvdmlkZXIuJGluamVjdCA9IFtcbiAgICAgICAgJyRyb3V0ZVByb3ZpZGVyJ1xuICAgIF07XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnbW9uaXRvcmVkX2VuZHBvaW50cycpXG4gICAgICAgIC5jb25maWcocm91dGVQcm92aWRlcik7XG59ICh3aW5kb3csIHdpbmRvdy5hbmd1bGFyKSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///278\n")},279:function(module,exports){eval('module.exports = "<platform-trial-expired ng-if=isPlatformTrialExpired></platform-trial-expired> <platform-expired ng-if=isPlatformExpired></platform-expired> <upgrade-protection-expired ng-if=isInvalidDueToUpgradeProtectionExpired></upgrade-protection-expired> <div class=\\"container monitoring-view\\" ng-show=endpoints.length ng-if=\\"!isPlatformTrialExpired && !isPlatformExpired && !isInvalidDueToUpgradeProtectionExpired\\"> <div class=\\"row monitoring-head\\"> <div class=\\"col-xs-4 no-side-padding list-section\\"> <h1>Endpoints overview</h1> </div> <div class=\\"col-xs-8 no-side-padding toolbar-menus\\"> <div class=\\"filter-group filter-monitoring\\"> <ul class=\\"nav nav-pills period-selector\\"> <li role=presentation ng-repeat=\\"period in periods\\" ng-class=\\"(period.value == selectedPeriod.value ? \'active\' : \'notselected\')\\"> <a ng-click=selectPeriod(period) href=\\"#/monitoring?historyPeriod={{period.value}}\\" uib-tooltip={{period.refreshIntervalText}}.>{{period.text}}</a> </li> </ul> <div class=dropdown> <label class=control-label>Group by:</label> <button type=button class=\\"btn btn-default dropdown-toggle sp-btn-menu\\" id=dropdownMenu1 data-toggle=dropdown aria-haspopup=true aria-expanded=false uib-tooltip=\\"Endpoint grouping will take \'.\' in endpoint names to delimit segments. Grouping endpoints will disable list sorting.\\"> {{ grouping.selectedGrouping == 0 ? \'no grouping\' : (\'max. \' + grouping.selectedGrouping + \' segments\')}} <span class=caret></span> </button> <ul class=dropdown-menu aria-labelledby=dropdownMenu1> <li><a href=# ng-click=\\"grouping.selectGroup(0); $event.preventDefault();\\">no grouping</a></li> <li role=separator class=divider></li> <li ng-repeat=\\"x in [].constructor(grouping.groupSegments) track by $index\\"><a href=# ng-click=\\"grouping.selectGroup($index+1); $event.preventDefault();\\">max. {{$index+1}} segments</a></li> </ul> </div> <input type=text placeholder=\\"Filter by name...\\" class=\\"form-control-static filter-input\\" ng-model=filter.name /> </div> </div> </div> </div> <div class=container ng-if=\\"!isPlatformTrialExpired && !isPlatformExpired && !isInvalidDueToUpgradeProtectionExpired\\"> <ng-include src=\\"\'modules/monitoring/views/monitored_endpoints_list.html\'\\"></ng-include> <ng-include src=\\"\'modules/monitoring/views/monitored_endpoints_list_grouped.html\'\\"></ng-include> </div> ";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3Jpbmcvdmlld3MvbW9uaXRvcmVkX2VuZHBvaW50cy5odG1sPzEwZjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdTRCQUF1NEIsY0FBYyxpQkFBaUIsNEJBQTRCLElBQUksYUFBYSxrWEFBa1gsdUdBQXVHLDZJQUE2SSx5QkFBeUIsaU1BQWlNLHlCQUF5QixVQUFVLFVBQVUiLCJmaWxlIjoiMjc5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxwbGF0Zm9ybS10cmlhbC1leHBpcmVkIG5nLWlmPWlzUGxhdGZvcm1UcmlhbEV4cGlyZWQ+PC9wbGF0Zm9ybS10cmlhbC1leHBpcmVkPiA8cGxhdGZvcm0tZXhwaXJlZCBuZy1pZj1pc1BsYXRmb3JtRXhwaXJlZD48L3BsYXRmb3JtLWV4cGlyZWQ+IDx1cGdyYWRlLXByb3RlY3Rpb24tZXhwaXJlZCBuZy1pZj1pc0ludmFsaWREdWVUb1VwZ3JhZGVQcm90ZWN0aW9uRXhwaXJlZD48L3VwZ3JhZGUtcHJvdGVjdGlvbi1leHBpcmVkPiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXIgbW9uaXRvcmluZy12aWV3XFxcIiBuZy1zaG93PWVuZHBvaW50cy5sZW5ndGggbmctaWY9XFxcIiFpc1BsYXRmb3JtVHJpYWxFeHBpcmVkICYmICFpc1BsYXRmb3JtRXhwaXJlZCAmJiAhaXNJbnZhbGlkRHVlVG9VcGdyYWRlUHJvdGVjdGlvbkV4cGlyZWRcXFwiPiA8ZGl2IGNsYXNzPVxcXCJyb3cgbW9uaXRvcmluZy1oZWFkXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29sLXhzLTQgbm8tc2lkZS1wYWRkaW5nIGxpc3Qtc2VjdGlvblxcXCI+IDxoMT5FbmRwb2ludHMgb3ZlcnZpZXc8L2gxPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY29sLXhzLTggbm8tc2lkZS1wYWRkaW5nIHRvb2xiYXItbWVudXNcXFwiPiA8ZGl2IGNsYXNzPVxcXCJmaWx0ZXItZ3JvdXAgZmlsdGVyLW1vbml0b3JpbmdcXFwiPiA8dWwgY2xhc3M9XFxcIm5hdiBuYXYtcGlsbHMgcGVyaW9kLXNlbGVjdG9yXFxcIj4gPGxpIHJvbGU9cHJlc2VudGF0aW9uIG5nLXJlcGVhdD1cXFwicGVyaW9kIGluIHBlcmlvZHNcXFwiIG5nLWNsYXNzPVxcXCIocGVyaW9kLnZhbHVlID09IHNlbGVjdGVkUGVyaW9kLnZhbHVlID8gJ2FjdGl2ZScgOiAnbm90c2VsZWN0ZWQnKVxcXCI+IDxhIG5nLWNsaWNrPXNlbGVjdFBlcmlvZChwZXJpb2QpIGhyZWY9XFxcIiMvbW9uaXRvcmluZz9oaXN0b3J5UGVyaW9kPXt7cGVyaW9kLnZhbHVlfX1cXFwiIHVpYi10b29sdGlwPXt7cGVyaW9kLnJlZnJlc2hJbnRlcnZhbFRleHR9fS4+e3twZXJpb2QudGV4dH19PC9hPiA8L2xpPiA8L3VsPiA8ZGl2IGNsYXNzPWRyb3Bkb3duPiA8bGFiZWwgY2xhc3M9Y29udHJvbC1sYWJlbD5Hcm91cCBieTo8L2xhYmVsPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIHNwLWJ0bi1tZW51XFxcIiBpZD1kcm9wZG93bk1lbnUxIGRhdGEtdG9nZ2xlPWRyb3Bkb3duIGFyaWEtaGFzcG9wdXA9dHJ1ZSBhcmlhLWV4cGFuZGVkPWZhbHNlIHVpYi10b29sdGlwPVxcXCJFbmRwb2ludCBncm91cGluZyB3aWxsIHRha2UgJy4nIGluIGVuZHBvaW50IG5hbWVzIHRvIGRlbGltaXQgc2VnbWVudHMuIEdyb3VwaW5nIGVuZHBvaW50cyB3aWxsIGRpc2FibGUgbGlzdCBzb3J0aW5nLlxcXCI+IHt7IGdyb3VwaW5nLnNlbGVjdGVkR3JvdXBpbmcgPT0gMCA/ICdubyBncm91cGluZycgOiAoJ21heC4gJyArIGdyb3VwaW5nLnNlbGVjdGVkR3JvdXBpbmcgKyAnIHNlZ21lbnRzJyl9fSA8c3BhbiBjbGFzcz1jYXJldD48L3NwYW4+IDwvYnV0dG9uPiA8dWwgY2xhc3M9ZHJvcGRvd24tbWVudSBhcmlhLWxhYmVsbGVkYnk9ZHJvcGRvd25NZW51MT4gPGxpPjxhIGhyZWY9IyBuZy1jbGljaz1cXFwiZ3JvdXBpbmcuc2VsZWN0R3JvdXAoMCk7ICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xcXCI+bm8gZ3JvdXBpbmc8L2E+PC9saT4gPGxpIHJvbGU9c2VwYXJhdG9yIGNsYXNzPWRpdmlkZXI+PC9saT4gPGxpIG5nLXJlcGVhdD1cXFwieCBpbiBbXS5jb25zdHJ1Y3Rvcihncm91cGluZy5ncm91cFNlZ21lbnRzKSB0cmFjayBieSAkaW5kZXhcXFwiPjxhIGhyZWY9IyBuZy1jbGljaz1cXFwiZ3JvdXBpbmcuc2VsZWN0R3JvdXAoJGluZGV4KzEpOyAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcXFwiPm1heC4ge3skaW5kZXgrMX19IHNlZ21lbnRzPC9hPjwvbGk+IDwvdWw+IDwvZGl2PiA8aW5wdXQgdHlwZT10ZXh0IHBsYWNlaG9sZGVyPVxcXCJGaWx0ZXIgYnkgbmFtZS4uLlxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbC1zdGF0aWMgZmlsdGVyLWlucHV0XFxcIiBuZy1tb2RlbD1maWx0ZXIubmFtZSAvPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1jb250YWluZXIgbmctaWY9XFxcIiFpc1BsYXRmb3JtVHJpYWxFeHBpcmVkICYmICFpc1BsYXRmb3JtRXhwaXJlZCAmJiAhaXNJbnZhbGlkRHVlVG9VcGdyYWRlUHJvdGVjdGlvbkV4cGlyZWRcXFwiPiA8bmctaW5jbHVkZSBzcmM9XFxcIidtb2R1bGVzL21vbml0b3Jpbmcvdmlld3MvbW9uaXRvcmVkX2VuZHBvaW50c19saXN0Lmh0bWwnXFxcIj48L25nLWluY2x1ZGU+IDxuZy1pbmNsdWRlIHNyYz1cXFwiJ21vZHVsZXMvbW9uaXRvcmluZy92aWV3cy9tb25pdG9yZWRfZW5kcG9pbnRzX2xpc3RfZ3JvdXBlZC5odG1sJ1xcXCI+PC9uZy1pbmNsdWRlPiA8L2Rpdj4gXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///279\n')},280:function(module,exports,__webpack_require__){"use strict";eval('\n\n(function (angular) {\n    "use strict";\n\n    function controller($scope) {\n        var vm = this;\n        vm.toggleSort = toggleSort;\n        vm.$onInit = onInit; // attributes set by bindToController are only available during&after onInit\n\n        function updateStatus() {\n            var isActive = vm.ref.prop === vm.propertyName;\n            if (isActive) {\n\n                vm.sortIcon = vm.ref.expression.charAt(0) === "-" ? "sort-down" : "sort-up";\n            }\n            vm.isColumnActive = isActive;\n        }\n\n        function onInit() {\n            vm.isColumnActive = updateStatus();\n            $scope.$watch("vm.ref.expression", updateStatus);\n        }\n\n        function toggleSort() {\n            vm.ref.prop = vm.propertyName;\n            var defaultSortOrder = "-" + vm.propertyName;\n            if (vm.ref.expression === defaultSortOrder) {\n                //invert sort order\n                vm.ref.expression = "+" + vm.propertyName;\n            } else {\n                vm.ref.expression = defaultSortOrder;\n            }\n        }\n    }\n\n    controller.$inject = ["$scope"];\n\n    function directive() {\n        return {\n            scope: {\n                propertyName: "=property",\n                ref: "="\n            },\n            restrict: "E",\n            controller: controller,\n            controllerAs: "vm",\n            bindToController: true,\n            transclude: true,\n            templateUrl: "modules/monitoring/js/directives/ui.particular.sortableColumn.tpl.html"\n        };\n    }\n\n    angular.module("ui.particular.sortableColumn", []).directive("sortableColumn", directive).config(function ($logProvider) {\n        $logProvider.debugEnabled(true);\n    });\n})(window.angular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLnNvcnRhYmxlQ29sdW1uLmpzPzZjOGEiXSwibmFtZXMiOlsiYW5ndWxhciIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCJ2bSIsInRvZ2dsZVNvcnQiLCIkb25Jbml0Iiwib25Jbml0IiwidXBkYXRlU3RhdHVzIiwiaXNBY3RpdmUiLCJyZWYiLCJwcm9wIiwicHJvcGVydHlOYW1lIiwic29ydEljb24iLCJleHByZXNzaW9uIiwiY2hhckF0IiwiaXNDb2x1bW5BY3RpdmUiLCIkd2F0Y2giLCJkZWZhdWx0U29ydE9yZGVyIiwiJGluamVjdCIsImRpcmVjdGl2ZSIsInNjb3BlIiwicmVzdHJpY3QiLCJjb250cm9sbGVyQXMiLCJiaW5kVG9Db250cm9sbGVyIiwidHJhbnNjbHVkZSIsInRlbXBsYXRlVXJsIiwibW9kdWxlIiwiY29uZmlnIiwiJGxvZ1Byb3ZpZGVyIiwiZGVidWdFbmFibGVkIiwid2luZG93Il0sIm1hcHBpbmdzIjoiOztBQUFBLENBQUMsVUFBVUEsT0FBVixFQUFtQjtBQUNoQjs7QUFFQSxhQUFTQyxVQUFULENBQW9CQyxNQUFwQixFQUE0QjtBQUN4QixZQUFJQyxLQUFLLElBQVQ7QUFDQUEsV0FBR0MsVUFBSCxHQUFnQkEsVUFBaEI7QUFDQUQsV0FBR0UsT0FBSCxHQUFhQyxNQUFiLENBSHdCLENBR0g7O0FBRXJCLGlCQUFTQyxZQUFULEdBQXdCO0FBQ3BCLGdCQUFJQyxXQUFXTCxHQUFHTSxHQUFILENBQU9DLElBQVAsS0FBZ0JQLEdBQUdRLFlBQWxDO0FBQ0EsZ0JBQUlILFFBQUosRUFBYzs7QUFFVkwsbUJBQUdTLFFBQUgsR0FBY1QsR0FBR00sR0FBSCxDQUFPSSxVQUFQLENBQWtCQyxNQUFsQixDQUF5QixDQUF6QixNQUFnQyxHQUFoQyxHQUNSLFdBRFEsR0FFUixTQUZOO0FBR0g7QUFDRFgsZUFBR1ksY0FBSCxHQUFvQlAsUUFBcEI7QUFDSDs7QUFFRCxpQkFBU0YsTUFBVCxHQUFrQjtBQUNkSCxlQUFHWSxjQUFILEdBQW9CUixjQUFwQjtBQUNBTCxtQkFBT2MsTUFBUCxDQUFjLG1CQUFkLEVBQW1DVCxZQUFuQztBQUNIOztBQUVELGlCQUFTSCxVQUFULEdBQXNCO0FBQ2xCRCxlQUFHTSxHQUFILENBQU9DLElBQVAsR0FBY1AsR0FBR1EsWUFBakI7QUFDQSxnQkFBSU0seUJBQXVCZCxHQUFHUSxZQUE5QjtBQUNBLGdCQUFJUixHQUFHTSxHQUFILENBQU9JLFVBQVAsS0FBc0JJLGdCQUExQixFQUE0QztBQUN4QztBQUNBZCxtQkFBR00sR0FBSCxDQUFPSSxVQUFQLFNBQXdCVixHQUFHUSxZQUEzQjtBQUNILGFBSEQsTUFHTztBQUNIUixtQkFBR00sR0FBSCxDQUFPSSxVQUFQLEdBQW9CSSxnQkFBcEI7QUFDSDtBQUNKO0FBQ0o7O0FBRURoQixlQUFXaUIsT0FBWCxHQUFxQixDQUFDLFFBQUQsQ0FBckI7O0FBRUEsYUFBU0MsU0FBVCxHQUFxQjtBQUNqQixlQUFPO0FBQ0hDLG1CQUFPO0FBQ0hULDhCQUFjLFdBRFg7QUFFSEYscUJBQUs7QUFGRixhQURKO0FBS0hZLHNCQUFVLEdBTFA7QUFNSHBCLHdCQUFZQSxVQU5UO0FBT0hxQiwwQkFBYyxJQVBYO0FBUUhDLDhCQUFrQixJQVJmO0FBU0hDLHdCQUFZLElBVFQ7QUFVSEMseUJBQWE7QUFWVixTQUFQO0FBWUg7O0FBRUR6QixZQUNLMEIsTUFETCxDQUNZLDhCQURaLEVBQzRDLEVBRDVDLEVBRUtQLFNBRkwsQ0FFZSxnQkFGZixFQUVpQ0EsU0FGakMsRUFHS1EsTUFITCxDQUdZLFVBQVVDLFlBQVYsRUFBd0I7QUFDNUJBLHFCQUFhQyxZQUFiLENBQTBCLElBQTFCO0FBQ0gsS0FMTDtBQVFILENBN0RELEVBNkRHQyxPQUFPOUIsT0E3RFYiLCJmaWxlIjoiMjgwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCRzY29wZSkge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICB2bS50b2dnbGVTb3J0ID0gdG9nZ2xlU29ydDtcbiAgICAgICAgdm0uJG9uSW5pdCA9IG9uSW5pdDsgLy8gYXR0cmlidXRlcyBzZXQgYnkgYmluZFRvQ29udHJvbGxlciBhcmUgb25seSBhdmFpbGFibGUgZHVyaW5nJmFmdGVyIG9uSW5pdFxuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlU3RhdHVzKCkge1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gdm0ucmVmLnByb3AgPT09IHZtLnByb3BlcnR5TmFtZTtcbiAgICAgICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZtLnNvcnRJY29uID0gdm0ucmVmLmV4cHJlc3Npb24uY2hhckF0KDApID09PSBcIi1cIlxuICAgICAgICAgICAgICAgICAgICA/IFwic29ydC1kb3duXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcInNvcnQtdXBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZtLmlzQ29sdW1uQWN0aXZlID0gaXNBY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvbkluaXQoKSB7XG4gICAgICAgICAgICB2bS5pc0NvbHVtbkFjdGl2ZSA9IHVwZGF0ZVN0YXR1cygpO1xuICAgICAgICAgICAgJHNjb3BlLiR3YXRjaChcInZtLnJlZi5leHByZXNzaW9uXCIsIHVwZGF0ZVN0YXR1cyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0b2dnbGVTb3J0KCkge1xuICAgICAgICAgICAgdm0ucmVmLnByb3AgPSB2bS5wcm9wZXJ0eU5hbWU7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdFNvcnRPcmRlciA9IGAtJHt2bS5wcm9wZXJ0eU5hbWV9YDtcbiAgICAgICAgICAgIGlmICh2bS5yZWYuZXhwcmVzc2lvbiA9PT0gZGVmYXVsdFNvcnRPcmRlcikge1xuICAgICAgICAgICAgICAgIC8vaW52ZXJ0IHNvcnQgb3JkZXJcbiAgICAgICAgICAgICAgICB2bS5yZWYuZXhwcmVzc2lvbiA9IGArJHt2bS5wcm9wZXJ0eU5hbWV9YDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdm0ucmVmLmV4cHJlc3Npb24gPSBkZWZhdWx0U29ydE9yZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29udHJvbGxlci4kaW5qZWN0ID0gW1wiJHNjb3BlXCJdO1xuXG4gICAgZnVuY3Rpb24gZGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6IFwiPXByb3BlcnR5XCIsXG4gICAgICAgICAgICAgICAgcmVmOiBcIj1cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc3RyaWN0OiBcIkVcIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGNvbnRyb2xsZXIsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6IFwidm1cIixcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwibW9kdWxlcy9tb25pdG9yaW5nL2pzL2RpcmVjdGl2ZXMvdWkucGFydGljdWxhci5zb3J0YWJsZUNvbHVtbi50cGwuaHRtbFwiXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJ1aS5wYXJ0aWN1bGFyLnNvcnRhYmxlQ29sdW1uXCIsIFtdKVxuICAgICAgICAuZGlyZWN0aXZlKFwic29ydGFibGVDb2x1bW5cIiwgZGlyZWN0aXZlKVxuICAgICAgICAuY29uZmlnKGZ1bmN0aW9uICgkbG9nUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICRsb2dQcm92aWRlci5kZWJ1Z0VuYWJsZWQodHJ1ZSk7XG4gICAgICAgIH0pO1xuXG5cbn0pKHdpbmRvdy5hbmd1bGFyKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///280\n')},281:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular) {\n    'use strict';\n\n    angular.module('endpoint_details', []);\n\n    __webpack_require__(282);\n    __webpack_require__(7);\n    __webpack_require__(283);\n    __webpack_require__(284);\n    __webpack_require__(8);\n\n    __webpack_require__(9);\n    __webpack_require__(10);\n    __webpack_require__(12);\n    __webpack_require__(286);\n    __webpack_require__(13);\n    __webpack_require__(287);\n    __webpack_require__(14);\n    __webpack_require__(288);\n})(window, window.angular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvZW5kcG9pbnRfZGV0YWlscy5tb2R1bGUuanM/MjkyYyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJhbmd1bGFyIiwibW9kdWxlIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQyxXQUFTQSxNQUFULEVBQWlCQyxPQUFqQixFQUEwQjtBQUN2Qjs7QUFFQUEsWUFBUUMsTUFBUixDQUFlLGtCQUFmLEVBQW1DLEVBQW5DOztBQUVBQyx1QkFBT0EsQ0FBQyxHQUFSO0FBQ0FBLHVCQUFPQSxDQUFDLENBQVI7QUFDQUEsdUJBQU9BLENBQUMsR0FBUjtBQUNBQSx1QkFBT0EsQ0FBQyxHQUFSO0FBQ0FBLHVCQUFPQSxDQUFDLENBQVI7O0FBRUFBLHVCQUFPQSxDQUFDLENBQVI7QUFDQUEsdUJBQU9BLENBQUMsRUFBUjtBQUNBQSx1QkFBT0EsQ0FBQyxFQUFSO0FBQ0FBLHVCQUFPQSxDQUFDLEdBQVI7QUFDQUEsdUJBQU9BLENBQUMsRUFBUjtBQUNBQSx1QkFBT0EsQ0FBQyxHQUFSO0FBQ0FBLHVCQUFPQSxDQUFDLEVBQVI7QUFDQUEsdUJBQU9BLENBQUMsR0FBUjtBQUNILENBbkJBLEVBbUJDSCxNQW5CRCxFQW1CU0EsT0FBT0MsT0FuQmhCLENBQUQiLCJmaWxlIjoiMjgxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKHdpbmRvdywgYW5ndWxhcikge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdlbmRwb2ludF9kZXRhaWxzJywgW10pO1xuXG4gICAgcmVxdWlyZSgnLi9zZXJ2aWNlcy9zZXJ2aWNlcy5tZXNzYWdlVHlwZVBhcnNlcicpO1xuICAgIHJlcXVpcmUoJy4vc2VydmljZXMvc2VydmljZXMuY29ubmVjdGl2aXR5Tm90aWZpZXInKTtcbiAgICByZXF1aXJlKCcuL2VuZHBvaW50X2RldGFpbHMuY29udHJvbGxlcicpO1xuICAgIHJlcXVpcmUoJy4vZW5kcG9pbnRfZGV0YWlscy5yb3V0ZS5qcycpO1xuICAgIHJlcXVpcmUoJy4vY29uc3RhbnQuZGlhZ3JhbXMuanMnKTtcblxuICAgIHJlcXVpcmUoJy4vZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLm1vbml0b3JpbmdDb25uZWN0aXZpdHlTdGF0dXMuanMnKTtcbiAgICByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvdWkucGFydGljdWxhci5ncmFwaC5qcycpO1xuICAgIHJlcXVpcmUoJy4vZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLmdyYXBoZGVjaW1hbC5qcycpO1xuICAgIHJlcXVpcmUoJy4vZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLmR1cmF0aW9uLmpzJyk7XG4gICAgcmVxdWlyZSgnLi9kaXJlY3RpdmVzL3VpLnBhcnRpY3VsYXIuZ3JhcGhkdXJhdGlvbi5qcycpO1xuICAgIHJlcXVpcmUoJy4vZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLmxhcmdlR3JhcGguanMnKTtcbiAgICByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvdWkucGFydGljdWxhci5tZXRyaWNzTGFyZ2VudW1iZXIuanMnKTtcbiAgICByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvdWkucGFydGljdWxhci5tZXNzYWdlVHlwZXNDaGFuZ2VJbmRpY2F0b3IuanMnKTtcbn0od2luZG93LCB3aW5kb3cuYW5ndWxhcikpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///281\n")},282:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular, $) {\n    'use strict';\n\n    function Service() {\n\n        function parseTheMessageTypeData(messageType) {\n            if (!messageType.typeName) return;\n\n            if (messageType.typeName.indexOf(';') > 0) {\n                var messageTypeHierarchy = messageType.typeName.split(';');\n                messageTypeHierarchy = messageTypeHierarchy.map(function (item) {\n                    var obj = {};\n                    var segments = item.split(',');\n                    obj.typeName = segments[0];\n                    obj.assemblyName = segments[1];\n                    obj.assemblyVersion = segments[2].substring(segments[2].indexOf('=') + 1);\n\n                    if (!segments[4].endsWith('=null')) {\n                        //SC monitoring fills culture only if PublicKeyToken is filled\n                        obj.culture = segments[3];\n                        obj.publicKeyToken = segments[4];\n                    }\n                    return obj;\n                });\n                messageType.messageTypeHierarchy = messageTypeHierarchy;\n                messageType.typeName = messageTypeHierarchy.map(function (item) {\n                    return item.typeName;\n                }).join(\", \");\n                messageType.shortName = messageTypeHierarchy.map(function (item) {\n                    return shortenTypeName(item.typeName);\n                }).join(\", \");\n                messageType.containsTypeHierarchy = true;\n                messageType.tooltipText = messageTypeHierarchy.reduce(function (sum, item) {\n                    return (sum ? sum + '<br> ' : '') + (item.typeName + ' |' + item.assemblyName + '-' + item.assemblyVersion) + (item.culture ? ' |' + item.culture : '') + (item.publicKeyToken ? ' |' + item.publicKeyToken : '');\n                }, '');\n            } else {\n                //Get the name without the namespace\n                messageType.shortName = shortenTypeName(messageType.typeName);\n\n                var tooltip = messageType.typeName + ' | ' + messageType.assemblyName + '-' + messageType.assemblyVersion;\n                if (messageType.culture && messageType.culture != 'null') {\n                    tooltip += ' | Culture=' + messageType.culture;\n                }\n\n                if (messageType.publicKeyToken && messageType.publicKeyToken != 'null') {\n                    tooltip += ' | PublicKeyToken=' + messageType.publicKeyToken;\n                }\n\n                messageType.tooltipText = tooltip;\n            }\n        }\n\n        function shortenTypeName(typeName) {\n            return typeName.split('.').pop();\n        }\n\n        var service = {\n            parseTheMessageTypeData: parseTheMessageTypeData\n        };\n\n        return service;\n    }\n\n    Service.$inject = [];\n\n    angular.module('services.messageTypeParser', ['sc']).service('messageTypeParser', Service);\n})(window, window.angular, window.jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvc2VydmljZXMvc2VydmljZXMubWVzc2FnZVR5cGVQYXJzZXIuanM/YWVkZCJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJhbmd1bGFyIiwiJCIsIlNlcnZpY2UiLCJwYXJzZVRoZU1lc3NhZ2VUeXBlRGF0YSIsIm1lc3NhZ2VUeXBlIiwidHlwZU5hbWUiLCJpbmRleE9mIiwibWVzc2FnZVR5cGVIaWVyYXJjaHkiLCJzcGxpdCIsIm1hcCIsIml0ZW0iLCJvYmoiLCJzZWdtZW50cyIsImFzc2VtYmx5TmFtZSIsImFzc2VtYmx5VmVyc2lvbiIsInN1YnN0cmluZyIsImVuZHNXaXRoIiwiY3VsdHVyZSIsInB1YmxpY0tleVRva2VuIiwiam9pbiIsInNob3J0TmFtZSIsInNob3J0ZW5UeXBlTmFtZSIsImNvbnRhaW5zVHlwZUhpZXJhcmNoeSIsInRvb2x0aXBUZXh0IiwicmVkdWNlIiwic3VtIiwidG9vbHRpcCIsInBvcCIsInNlcnZpY2UiLCIkaW5qZWN0IiwibW9kdWxlIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiOztBQUFDLFdBQVVBLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTJCQyxDQUEzQixFQUE4QjtBQUMzQjs7QUFFQSxhQUFTQyxPQUFULEdBQW1COztBQUVmLGlCQUFTQyx1QkFBVCxDQUFpQ0MsV0FBakMsRUFBOEM7QUFDMUMsZ0JBQUksQ0FBQ0EsWUFBWUMsUUFBakIsRUFDSTs7QUFFSixnQkFBSUQsWUFBWUMsUUFBWixDQUFxQkMsT0FBckIsQ0FBNkIsR0FBN0IsSUFBb0MsQ0FBeEMsRUFBMkM7QUFDdkMsb0JBQUlDLHVCQUF1QkgsWUFBWUMsUUFBWixDQUFxQkcsS0FBckIsQ0FBMkIsR0FBM0IsQ0FBM0I7QUFDQUQsdUNBQXVCQSxxQkFBcUJFLEdBQXJCLENBQXlCLFVBQUNDLElBQUQsRUFBVTtBQUN0RCx3QkFBSUMsTUFBTSxFQUFWO0FBQ0Esd0JBQUlDLFdBQVdGLEtBQUtGLEtBQUwsQ0FBVyxHQUFYLENBQWY7QUFDQUcsd0JBQUlOLFFBQUosR0FBZU8sU0FBUyxDQUFULENBQWY7QUFDQUQsd0JBQUlFLFlBQUosR0FBbUJELFNBQVMsQ0FBVCxDQUFuQjtBQUNBRCx3QkFBSUcsZUFBSixHQUFzQkYsU0FBUyxDQUFULEVBQVlHLFNBQVosQ0FBc0JILFNBQVMsQ0FBVCxFQUFZTixPQUFaLENBQW9CLEdBQXBCLElBQTJCLENBQWpELENBQXRCOztBQUVBLHdCQUFJLENBQUNNLFNBQVMsQ0FBVCxFQUFZSSxRQUFaLENBQXFCLE9BQXJCLENBQUwsRUFBb0M7QUFBRTtBQUNsQ0wsNEJBQUlNLE9BQUosR0FBY0wsU0FBUyxDQUFULENBQWQ7QUFDQUQsNEJBQUlPLGNBQUosR0FBcUJOLFNBQVMsQ0FBVCxDQUFyQjtBQUNIO0FBQ0QsMkJBQU9ELEdBQVA7QUFDSCxpQkFac0IsQ0FBdkI7QUFhQVAsNEJBQVlHLG9CQUFaLEdBQW1DQSxvQkFBbkM7QUFDQUgsNEJBQVlDLFFBQVosR0FDSUUscUJBQXFCRSxHQUFyQixDQUF5QjtBQUFBLDJCQUFRQyxLQUFLTCxRQUFiO0FBQUEsaUJBQXpCLEVBQWdEYyxJQUFoRCxDQUFxRCxJQUFyRCxDQURKO0FBRUFmLDRCQUFZZ0IsU0FBWixHQUF3QmIscUJBQXFCRSxHQUFyQixDQUF5QjtBQUFBLDJCQUFRWSxnQkFBZ0JYLEtBQUtMLFFBQXJCLENBQVI7QUFBQSxpQkFBekIsRUFBaUVjLElBQWpFLENBQXNFLElBQXRFLENBQXhCO0FBQ0FmLDRCQUFZa0IscUJBQVosR0FBb0MsSUFBcEM7QUFDQWxCLDRCQUFZbUIsV0FBWixHQUEwQmhCLHFCQUFxQmlCLE1BQXJCLENBQTRCLFVBQUNDLEdBQUQsRUFBTWYsSUFBTjtBQUFBLDJCQUFlLENBQUNlLE1BQVNBLEdBQVQsYUFBc0IsRUFBdkIsS0FDOURmLEtBQUtMLFFBRHlELFVBQzVDSyxLQUFLRyxZQUR1QyxTQUN2QkgsS0FBS0ksZUFEa0IsS0FDR0osS0FBS08sT0FBTCxVQUFvQlAsS0FBS08sT0FBekIsR0FBcUMsRUFEeEMsS0FDK0NQLEtBQUtRLGNBQUwsVUFBMkJSLEtBQUtRLGNBQWhDLEdBQW1ELEVBRGxHLENBQWY7QUFBQSxpQkFBNUIsRUFFdEIsRUFGc0IsQ0FBMUI7QUFHSCxhQXZCRCxNQXVCTztBQUNIO0FBQ0FkLDRCQUFZZ0IsU0FBWixHQUF3QkMsZ0JBQWdCakIsWUFBWUMsUUFBNUIsQ0FBeEI7O0FBRUEsb0JBQUlxQixVQUFhdEIsWUFBWUMsUUFBekIsV0FBdUNELFlBQVlTLFlBQW5ELFNBQW1FVCxZQUFZVSxlQUFuRjtBQUNBLG9CQUFJVixZQUFZYSxPQUFaLElBQXVCYixZQUFZYSxPQUFaLElBQXVCLE1BQWxELEVBQTBEO0FBQ3REUywrQ0FBeUJ0QixZQUFZYSxPQUFyQztBQUNIOztBQUVELG9CQUFJYixZQUFZYyxjQUFaLElBQThCZCxZQUFZYyxjQUFaLElBQThCLE1BQWhFLEVBQXdFO0FBQ3BFUSxzREFBZ0N0QixZQUFZYyxjQUE1QztBQUNIOztBQUVEZCw0QkFBWW1CLFdBQVosR0FBMEJHLE9BQTFCO0FBQ0g7QUFDSjs7QUFFRCxpQkFBU0wsZUFBVCxDQUF5QmhCLFFBQXpCLEVBQW1DO0FBQy9CLG1CQUFPQSxTQUFTRyxLQUFULENBQWUsR0FBZixFQUFvQm1CLEdBQXBCLEVBQVA7QUFDSDs7QUFFRCxZQUFJQyxVQUFVO0FBQ1Z6QixxQ0FBeUJBO0FBRGYsU0FBZDs7QUFJQSxlQUFPeUIsT0FBUDtBQUNIOztBQUVEMUIsWUFBUTJCLE9BQVIsR0FBa0IsRUFBbEI7O0FBRUE3QixZQUFROEIsTUFBUixDQUFlLDRCQUFmLEVBQTZDLENBQUMsSUFBRCxDQUE3QyxFQUNLRixPQURMLENBQ2EsbUJBRGIsRUFDa0MxQixPQURsQztBQUVILENBaEVBLEVBZ0VDSCxNQWhFRCxFQWdFU0EsT0FBT0MsT0FoRWhCLEVBZ0V5QkQsT0FBT2dDLE1BaEVoQyxDQUFEIiwiZmlsZSI6IjI4Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAod2luZG93LCBhbmd1bGFyLCAkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gU2VydmljZSgpIHtcblxuICAgICAgICBmdW5jdGlvbiBwYXJzZVRoZU1lc3NhZ2VUeXBlRGF0YShtZXNzYWdlVHlwZSkge1xuICAgICAgICAgICAgaWYgKCFtZXNzYWdlVHlwZS50eXBlTmFtZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChtZXNzYWdlVHlwZS50eXBlTmFtZS5pbmRleE9mKCc7JykgPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VUeXBlSGllcmFyY2h5ID0gbWVzc2FnZVR5cGUudHlwZU5hbWUuc3BsaXQoJzsnKTtcbiAgICAgICAgICAgICAgICBtZXNzYWdlVHlwZUhpZXJhcmNoeSA9IG1lc3NhZ2VUeXBlSGllcmFyY2h5Lm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0ge307XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWdtZW50cyA9IGl0ZW0uc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnR5cGVOYW1lID0gc2VnbWVudHNbMF07XG4gICAgICAgICAgICAgICAgICAgIG9iai5hc3NlbWJseU5hbWUgPSBzZWdtZW50c1sxXTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLmFzc2VtYmx5VmVyc2lvbiA9IHNlZ21lbnRzWzJdLnN1YnN0cmluZyhzZWdtZW50c1syXS5pbmRleE9mKCc9JykgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VnbWVudHNbNF0uZW5kc1dpdGgoJz1udWxsJykpIHsgLy9TQyBtb25pdG9yaW5nIGZpbGxzIGN1bHR1cmUgb25seSBpZiBQdWJsaWNLZXlUb2tlbiBpcyBmaWxsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5jdWx0dXJlID0gc2VnbWVudHNbM107XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucHVibGljS2V5VG9rZW4gPSBzZWdtZW50c1s0XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VUeXBlLm1lc3NhZ2VUeXBlSGllcmFyY2h5ID0gbWVzc2FnZVR5cGVIaWVyYXJjaHk7XG4gICAgICAgICAgICAgICAgbWVzc2FnZVR5cGUudHlwZU5hbWUgPVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVHlwZUhpZXJhcmNoeS5tYXAoaXRlbSA9PiBpdGVtLnR5cGVOYW1lKS5qb2luKFwiLCBcIik7XG4gICAgICAgICAgICAgICAgbWVzc2FnZVR5cGUuc2hvcnROYW1lID0gbWVzc2FnZVR5cGVIaWVyYXJjaHkubWFwKGl0ZW0gPT4gc2hvcnRlblR5cGVOYW1lKGl0ZW0udHlwZU5hbWUpKS5qb2luKFwiLCBcIik7XG4gICAgICAgICAgICAgICAgbWVzc2FnZVR5cGUuY29udGFpbnNUeXBlSGllcmFyY2h5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBtZXNzYWdlVHlwZS50b29sdGlwVGV4dCA9IG1lc3NhZ2VUeXBlSGllcmFyY2h5LnJlZHVjZSgoc3VtLCBpdGVtKSA9PiAoc3VtID8gYCR7c3VtfTxicj4gYCA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgIGAke2l0ZW0udHlwZU5hbWV9IHwke2l0ZW0uYXNzZW1ibHlOYW1lfS0ke2l0ZW0uYXNzZW1ibHlWZXJzaW9ufWAgKyAoaXRlbS5jdWx0dXJlID8gYCB8JHtpdGVtLmN1bHR1cmV9YCA6ICcnKSArIChpdGVtLnB1YmxpY0tleVRva2VuID8gYCB8JHtpdGVtLnB1YmxpY0tleVRva2VufWAgOiAnJyksXG4gICAgICAgICAgICAgICAgICAgICcnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9HZXQgdGhlIG5hbWUgd2l0aG91dCB0aGUgbmFtZXNwYWNlXG4gICAgICAgICAgICAgICAgbWVzc2FnZVR5cGUuc2hvcnROYW1lID0gc2hvcnRlblR5cGVOYW1lKG1lc3NhZ2VUeXBlLnR5cGVOYW1lKTtcblxuICAgICAgICAgICAgICAgIHZhciB0b29sdGlwID0gYCR7bWVzc2FnZVR5cGUudHlwZU5hbWV9IHwgJHttZXNzYWdlVHlwZS5hc3NlbWJseU5hbWV9LSR7bWVzc2FnZVR5cGUuYXNzZW1ibHlWZXJzaW9ufWA7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VUeXBlLmN1bHR1cmUgJiYgbWVzc2FnZVR5cGUuY3VsdHVyZSAhPSAnbnVsbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcCArPSBgIHwgQ3VsdHVyZT0ke21lc3NhZ2VUeXBlLmN1bHR1cmV9YDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZVR5cGUucHVibGljS2V5VG9rZW4gJiYgbWVzc2FnZVR5cGUucHVibGljS2V5VG9rZW4gIT0gJ251bGwnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAgKz0gYCB8IFB1YmxpY0tleVRva2VuPSR7bWVzc2FnZVR5cGUucHVibGljS2V5VG9rZW59YDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBtZXNzYWdlVHlwZS50b29sdGlwVGV4dCA9IHRvb2x0aXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzaG9ydGVuVHlwZU5hbWUodHlwZU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlTmFtZS5zcGxpdCgnLicpLnBvcCgpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgICAgICAgcGFyc2VUaGVNZXNzYWdlVHlwZURhdGE6IHBhcnNlVGhlTWVzc2FnZVR5cGVEYXRhXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgfVxuXG4gICAgU2VydmljZS4kaW5qZWN0ID0gW107XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2VydmljZXMubWVzc2FnZVR5cGVQYXJzZXInLCBbJ3NjJ10pXG4gICAgICAgIC5zZXJ2aWNlKCdtZXNzYWdlVHlwZVBhcnNlcicsIFNlcnZpY2UpO1xufSh3aW5kb3csIHdpbmRvdy5hbmd1bGFyLCB3aW5kb3cualF1ZXJ5KSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///282\n")},283:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular) {\n    'use strict';\n\n    function controller($scope, $routeParams, $location, $window, toastService, serviceControlService, monitoringService, historyPeriodsService, $filter, smallGraphsMinimumYAxis, largeGraphsMinimumYAxis, connectivityNotifier, messageTypeParser) {\n\n        $scope.endpointName = $routeParams.endpointName;\n        $scope.showInstancesBreakdown = $routeParams.tab === 'instancesBreakdown';\n        $scope.loading = true;\n        $scope.loadedSuccessfully = false;\n        $scope.largeGraphsMinimumYAxis = largeGraphsMinimumYAxis;\n        $scope.smallGraphsMinimumYAxis = smallGraphsMinimumYAxis;\n\n        var subscription;\n\n        $scope.periods = historyPeriodsService.getAllPeriods();\n        $scope.selectedPeriod = historyPeriodsService.getDefaultPeriod();\n\n        $scope.selectPeriod = function (period) {\n            $scope.selectedPeriod = period;\n            historyPeriodsService.saveSelectedPeriod(period);\n            updateUI();\n        };\n\n        monitoringService.isRemovingEndpointEnabled().then(function (enabled) {\n            $scope.isRemovingEndpointEnabled = enabled;\n        });\n\n        function mergeIn(destination, source, propertiesToSkip) {\n            for (var propName in source) {\n                if (Object.prototype.hasOwnProperty.call(source, propName)) {\n                    if (!propertiesToSkip || !propertiesToSkip.includes(propName)) {\n                        destination[propName] = source[propName];\n                    }\n                }\n            }\n        }\n\n        $scope.buildUrl = function (selectedPeriodValue, showInstacesBreakdown, breakdownPageNo) {\n\n            var breakdownTabName = showInstacesBreakdown ? 'instancesBreakdown' : 'messageTypeBreakdown';\n\n            return '#/monitoring/endpoint/' + $scope.endpointName + '?historyPeriod=' + selectedPeriodValue + '&tab=' + breakdownTabName + '&pageNo=' + breakdownPageNo;\n        };\n\n        $scope.updateUrl = function () {\n\n            var updatedUrl = $scope.buildUrl($scope.selectedPeriod.value, $scope.showInstancesBreakdown, $scope.endpoint.messageTypesPage);\n\n            $window.location.hash = updatedUrl;\n        };\n\n        $scope.showInstancesBreakdownTab = function (isVisible) {\n            $scope.showInstancesBreakdown = isVisible;\n\n            $scope.endpoint.refreshMessageTypes();\n        };\n\n        $scope.removeEndpoint = function (endpointName, instance) {\n            instance.busy = true;\n            monitoringService.removeEndpointInstance(endpointName, instance.id).then(function () {\n                $scope.endpoint.instances.splice($scope.endpoint.instances.indexOf(instance), 1);\n\n                if ($scope.endpoint.instances.length === 0) {\n                    $window.location.hash = '#/monitoring';\n                }\n            }, function () {\n                instance.busy = false;\n            });\n        };\n\n        $scope.endpoint = {\n            messageTypesPage: !$scope.showInstancesBreakdown ? $routeParams.pageNo : 1,\n            messageTypesTotalItems: 0,\n            messageTypesItemsPerPage: 10,\n            messageTypesAvailable: false,\n            messageTypesUpdatedSet: [],\n            refreshMessageTypes: function refreshMessageTypes() {\n                if ($scope.endpoint.messageTypesAvailable) {\n                    $scope.endpoint.messageTypesAvailable = false;\n\n                    $scope.endpoint.messageTypes = $scope.endpoint.messageTypesUpdatedSet;\n                    $scope.endpoint.messageTypesUpdatedSet = null;\n\n                    processMessageTypes();\n                }\n            }\n        };\n\n        function processMessageTypes() {\n\n            $scope.endpoint.messageTypesTotalItems = $scope.endpoint.messageTypes.length;\n\n            $scope.endpoint.messageTypes.forEach(function (messageType) {\n                fillDisplayValues(messageType);\n                messageTypeParser.parseTheMessageTypeData(messageType);\n            });\n        }\n\n        function updateUI() {\n            if (subscription) {\n                subscription.dispose();\n            }\n\n            var selectedPeriod = $scope.selectedPeriod;\n\n            subscription = monitoringService.createEndpointDetailsSource($routeParams.endpointName, selectedPeriod.value, selectedPeriod.refreshInterval).subscribe(function (endpoint) {\n\n                $scope.loading = false;\n\n                if (endpoint.error) {\n                    connectivityNotifier.reportFailedConnection();\n                    if ($scope.endpoint && $scope.endpoint.instances) {\n                        $scope.endpoint.instances.forEach(function (item) {\n                            return item.isScMonitoringDisconnected = true;\n                        });\n                    }\n\n                    $scope.endpoint.isScMonitoringDisconnected = true;\n                } else {\n\n                    if ($scope.endpoint.messageTypesTotalItems > 0 && $scope.endpoint.messageTypesTotalItems !== endpoint.messageTypes.length) {\n\n                        mergeIn($scope.endpoint, endpoint, ['messageTypes']);\n\n                        $scope.endpoint.messageTypesAvailable = true;\n                        $scope.endpoint.messageTypesUpdatedSet = endpoint.messageTypes;\n                    } else {\n                        mergeIn($scope.endpoint, endpoint);\n                    }\n\n                    connectivityNotifier.reportSuccessfulConnection();\n\n                    $scope.endpoint.instances.sort(function (first, second) {\n                        if (first.id < second.id) {\n                            return -1;\n                        }\n\n                        if (first.id > second.id) {\n                            return 1;\n                        }\n\n                        return 0;\n                    });\n\n                    processMessageTypes();\n\n                    $scope.endpoint.isStale = true;\n                    $scope.endpoint.isScMonitoringDisconnected = false;\n                    $scope.negativeCriticalTimeIsPresent = false;\n\n                    $scope.endpoint.instances.forEach(function (instance) {\n                        fillDisplayValues(instance);\n                        serviceControlService.getExceptionGroupsForEndpointInstance(instance.id).then(function (result) {\n                            if (result.data.length > 0) {\n                                instance.serviceControlId = result.data[0].id;\n                                instance.errorCount = result.data[0].count;\n                                instance.isScMonitoringDisconnected = false;\n                            }\n                        }, function (err) {\n                            // Warn user?\n                        });\n                        $scope.endpoint.isStale = $scope.endpoint.isStale && instance.isStale;\n                        $scope.negativeCriticalTimeIsPresent |= instance.metrics.criticalTime.displayValue.value < 0;\n                    });\n\n                    $scope.loadedSuccessfully = true;\n                }\n\n                serviceControlService.getExceptionGroupsForLogicalEndpoint($scope.endpointName).then(function (result) {\n                    if (result.data.length > 0) {\n                        $scope.endpoint.serviceControlId = result.data[0].id;\n                        $scope.endpoint.errorCount = result.data[0].count;\n                    }\n                });\n            });\n        }\n\n        function fillDisplayValues(instance) {\n            $filter('graphduration')(instance.metrics.processingTime);\n            $filter('graphduration')(instance.metrics.criticalTime);\n            $filter('graphdecimal')(instance.metrics.throughput, 2);\n            $filter('graphdecimal')(instance.metrics.retries, 2);\n        }\n\n        $scope.$on(\"$destroy\", function handler() {\n            subscription.dispose();\n        });\n\n        updateUI();\n    }\n\n    controller.$inject = ['$scope', '$routeParams', '$location', '$window', 'toastService', 'serviceControlService', 'monitoringService', 'historyPeriodsService', '$filter', 'smallGraphsMinimumYAxis', 'largeGraphsMinimumYAxis', 'connectivityNotifier', 'messageTypeParser'];\n\n    angular.module('endpoint_details').controller('endpointDetailsCtrl', controller);\n})(window, window.angular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///283\n")},284:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular) {\n    'use strict';\n\n    function routeProvider($routeProvider) {\n        var template = __webpack_require__(285);\n\n        $routeProvider.when('/monitoring/endpoint/:endpointName', {\n            data: {\n                pageTitle: 'Endpoint Details'\n            },\n            template: template,\n            controller: 'endpointDetailsCtrl',\n            controllerAs: 'vm',\n            reloadOnSearch: false\n        });\n    }\n\n    routeProvider.$inject = ['$routeProvider'];\n\n    angular.module('endpoint_details').config(routeProvider);\n})(window, window.angular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvZW5kcG9pbnRfZGV0YWlscy5yb3V0ZS5qcz9mMTE3Il0sIm5hbWVzIjpbIndpbmRvdyIsImFuZ3VsYXIiLCJyb3V0ZVByb3ZpZGVyIiwiJHJvdXRlUHJvdmlkZXIiLCJ0ZW1wbGF0ZSIsInJlcXVpcmUiLCJ3aGVuIiwiZGF0YSIsInBhZ2VUaXRsZSIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJyZWxvYWRPblNlYXJjaCIsIiRpbmplY3QiLCJtb2R1bGUiLCJjb25maWciXSwibWFwcGluZ3MiOiI7O0FBQUMsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBMkI7QUFDeEI7O0FBRUEsYUFBU0MsYUFBVCxDQUF1QkMsY0FBdkIsRUFBdUM7QUFDbkMsWUFBSUMsV0FBV0MsbUJBQU9BLENBQUMsR0FBUixDQUFmOztBQUVBRix1QkFBZUcsSUFBZixDQUFvQixvQ0FBcEIsRUFBMEQ7QUFDdERDLGtCQUFNO0FBQ0ZDLDJCQUFXO0FBRFQsYUFEZ0Q7QUFJdERKLHNCQUFVQSxRQUo0QztBQUt0REssd0JBQVkscUJBTDBDO0FBTXREQywwQkFBYyxJQU53QztBQU90REMsNEJBQWdCO0FBUHNDLFNBQTFEO0FBU0g7O0FBRURULGtCQUFjVSxPQUFkLEdBQXdCLENBQ3BCLGdCQURvQixDQUF4Qjs7QUFJQVgsWUFBUVksTUFBUixDQUFlLGtCQUFmLEVBQ0tDLE1BREwsQ0FDWVosYUFEWjtBQUVILENBdkJBLEVBdUJFRixNQXZCRixFQXVCVUEsT0FBT0MsT0F2QmpCLENBQUQiLCJmaWxlIjoiMjg0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICh3aW5kb3csIGFuZ3VsYXIpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiByb3V0ZVByb3ZpZGVyKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgIGxldCB0ZW1wbGF0ZSA9IHJlcXVpcmUoJy4vLi4vdmlld3MvZW5kcG9pbnRfZGV0YWlscy5odG1sJyk7XG5cbiAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignL21vbml0b3JpbmcvZW5kcG9pbnQvOmVuZHBvaW50TmFtZScsIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBwYWdlVGl0bGU6ICdFbmRwb2ludCBEZXRhaWxzJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdlbmRwb2ludERldGFpbHNDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHJlbG9hZE9uU2VhcmNoOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByb3V0ZVByb3ZpZGVyLiRpbmplY3QgPSBbXG4gICAgICAgICckcm91dGVQcm92aWRlcidcbiAgICBdO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2VuZHBvaW50X2RldGFpbHMnKVxuICAgICAgICAuY29uZmlnKHJvdXRlUHJvdmlkZXIpO1xufSAod2luZG93LCB3aW5kb3cuYW5ndWxhcikpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///284\n")},285:function(module,exports){eval('module.exports = "<platform-trial-expired ng-if=isPlatformTrialExpired></platform-trial-expired> <platform-expired ng-if=isPlatformExpired></platform-expired> <upgrade-protection-expired ng-if=isInvalidDueToUpgradeProtectionExpired></upgrade-protection-expired> <div class=container ng-if=\\"!isPlatformTrialExpired && !isPlatformExpired && !isInvalidDueToUpgradeProtectionExpired\\"> <div class=sp-loader ng-if=loading></div> <div ng-include=\\"\'modules/monitoring/views/monitoring_not_available.html\'\\" ng-if=\\"!loading && !loadedSuccessfully\\"></div> <div class=\\"row monitoring-head\\" ng-if=loadedSuccessfully> <div class=\\"col-xs-9 no-side-padding list-section\\"> <h1 class=\\"righ-side-ellipsis col-lg-max-10\\" uib-tooltip={{endpointName}}> {{endpointName}} </h1> <div class=\\"endpoint-status col-xs-2\\"> <span class=warning ng-show=negativeCriticalTimeIsPresent> <i class=\\"fa pa-warning\\" uib-tooltip=\\"Warning: endpoint currently has negative critical time, possibly because of a clock drift.\\"></i> </span> <span ng-if=endpoint.isStale class=warning> <i class=\\"fa pa-endpoint-lost endpoint-details\\" uib-tooltip=\\"Unable to connect to endpoint\\"></i> </span> <span class=warning ng-if=endpoint.isScMonitoringDisconnected> <i class=\\"fa pa-monitoring-lost endpoint-details\\" uib-tooltip=\\"Unable to connect to monitoring server\\"></i> </span> <a ng-if=endpoint.errorCount class=warning href=#/failed-messages/groups/{{endpoint.serviceControlId}}> <i class=\\"fa fa-envelope\\" uib-tooltip=\\"{{endpoint.errorCount | metricslargenumber}} failed messages associated with this endpoint. Click to see list.\\"></i> <span class=\\"badge badge-important ng-binding\\">{{endpoint.errorCount | metricslargenumber}}</span> </a> </div> </div> <div class=\\"col-xs-3 no-side-padding toolbar-menus endpoint-details\\"> <ul class=\\"nav nav-pills period-selector endpoint-details\\"> <li role=presentation ng-repeat=\\"period in periods\\" ng-class=\\"(period.value == selectedPeriod.value ? \'active\' : \'notselected\')\\"> <a ng-click=selectPeriod(period) ng-href=\\"{{buildUrl(period.value, showInstancesBreakdown, showInstacesBreakdown ? 1 : endpoint.messageTypesPage)}}\\" uib-tooltip={{period.refreshIntervalText}}.>{{period.text}}</a> </li> </ul> </div> </div> </div> <div class=\\"container large-graphs\\" ng-if=\\"loadedSuccessfully && !isPlatformTrialExpired && !isPlatformExpired && !isInvalidDueToUpgradeProtectionExpired\\"> <div class=container> <div class=row> <div class=\\"col-xs-4 no-side-padding list-section graph-area graph-queue-length\\"> <large-graph ng-if=endpoint.metricDetails.metrics.queueLength first-data-series=endpoint.metricDetails.metrics.queueLength minimum-yaxis={{largeGraphsMinimumYAxis.queueLength}} plot-width=750 plot-height=200 first-series-color=#EA7E00 first-series-fill-color=#EADDCE avg-decimals=0 metric-suffix=MSGS class=\\"large-graph pull-left\\"> </large-graph> <div class=\\"col-xs-12 no-side-padding graph-values\\"> <div class=queue-length-values> <div class=row> <span class=metric-digest-header uib-tooltip=\\"Queue length: The number of messages waiting to be processed in the input queue(s) of the endpoint.\\"> Queue Length </span> </div> </div> <div class=\\"row metric-digest-value current\\"> <div ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\"> {{endpoint.digest.metrics.queueLength.latest | metricslargenumber:0}} <span ng-if=\\"endpoint.isStale == false || endpoint.isScMonitoringDisconnected == false\\" class=metric-digest-value-suffix>MSGS</span> </div> <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> </div> <div class=\\"row metric-digest-value average\\"> <div ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\"> {{endpoint.digest.metrics.queueLength.average | metricslargenumber:0}} <span class=metric-digest-value-suffix>MSGS</span> </div> <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> <span ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\" class=metric-digest-value-suffix> AVG</span> </div> </div> </div> <div class=\\"col-xs-4 no-side-padding list-section graph-area graph-message-retries-throughputs\\"> <large-graph ng-if=endpoint.metricDetails.metrics.throughput first-data-series=endpoint.metricDetails.metrics.throughput second-data-series=endpoint.metricDetails.metrics.retries minimum-yaxis={{largeGraphsMinimumYAxis.throughputRetries}} plot-width=750 plot-height=200 first-series-color=#176397 first-series-fill-color=#CADCE8 second-series-color=#CC1252 second-series-fill-color=#E9C4D1 metric-suffix=MSGS/S class=\\"large-graph pull-left\\"> </large-graph> <div class=\\"col-xs-12 no-side-padding graph-values\\"> <div class=\\"col-xs-6 no-side-padding throughput-values\\"> <div class=row> <span class=metric-digest-header uib-tooltip=\\"Throughput: The number of messages per second successfully processed by a receiving endpoint.\\"> Throughput </span> </div> <div class=\\"row metric-digest-value current\\"> <div ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\"> {{endpoint.digest.metrics.throughput.latest | metricslargenumber:2}} <span class=metric-digest-value-suffix>MSGS/S</span> </div> <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> </div> <div class=\\"row metric-digest-value average\\"> <div ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\"> {{endpoint.digest.metrics.throughput.average | metricslargenumber:2}} <span class=metric-digest-value-suffix>MSGS/S</span> </div> <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> <span ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\" class=metric-digest-value-suffix> AVG</span> </div> </div> <div class=\\"col-xs-6 no-side-padding scheduled-retries-rate-values\\"> <div class=row> <span class=metric-digest-header uib-tooltip=\\"Scheduled retries: The number of messages per second scheduled for retries (immediate or delayed).\\"> Scheduled retries </span> </div> <div class=\\"row metric-digest-value current\\"> <div ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\"> {{endpoint.digest.metrics.retries.latest | metricslargenumber:2}} <span class=metric-digest-value-suffix>MSGS/S</span> </div> <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> </div> <div class=\\"row metric-digest-value average\\"> <div ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\"> {{endpoint.digest.metrics.retries.average | metricslargenumber:2}} <span class=metric-digest-value-suffix>MSGS/S</span> </div> <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> <span ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\" class=metric-digest-value-suffix> AVG</span> </div> </div> </div> </div> <div class=\\"col-xs-4 no-side-padding list-section graph-area graph-critical-processing-times\\"> <large-graph ng-if=endpoint.metricDetails.metrics.processingTime first-data-series=endpoint.metricDetails.metrics.criticalTime second-data-series=endpoint.metricDetails.metrics.processingTime minimum-yaxis={{largeGraphsMinimumYAxis.processingCritical}} plot-width=750 plot-height=200 first-series-color=#2700CB first-series-fill-color=#C4BCE5 second-series-color=#258135 second-series-fill-color=#BEE6C5 is-duration-graph=true class=\\"large-graph pull-left\\"> </large-graph> <div class=\\"col-xs-12 no-side-padding graph-values\\"> <div class=\\"col-xs-6 no-side-padding processing-time-values\\"> <div class=row> <span class=metric-digest-header uib-tooltip=\\"Processing time: The time taken for a receiving endpoint to successfully process a message.\\"> Processing Time </span> </div> <div class=\\"row metric-digest-value current\\"> <div ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\"> {{endpoint.digest.metrics.processingTime.latest | durationValue}} <span class=metric-digest-value-suffix>{{endpoint.digest.metrics.processingTime.latest | durationUnit}}</span> </div> <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> </div> <div class=\\"row metric-digest-value average\\"> <div ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\"> {{endpoint.digest.metrics.processingTime.average | durationValue}} <span class=metric-digest-value-suffix>{{endpoint.digest.metrics.processingTime.average | durationUnit}}</span> </div> <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> <span ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\" class=metric-digest-value-suffix> AVG</span> </div> </div> <div class=\\"col-xs-6 no-side-padding critical-time-values\\"> <div class=row> <span class=metric-digest-header uib-tooltip=\\"Critical time: The elapsed time from when a message was sent, until it was successfully processed by a receiving endpoint.\\"> Critical Time </span> </div> <div class=\\"row metric-digest-value current\\"> <div ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\"> <span ng-class=\\"{\'negative\': (endpoint.digest.metrics.criticalTime.latest | durationValue) < 0}\\">{{endpoint.digest.metrics.criticalTime.latest | durationValue}} </span><span class=metric-digest-value-suffix>{{endpoint.digest.metrics.criticalTime.latest | durationUnit}}</span> </div> <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> </div> <div class=\\"row metric-digest-value average\\"> <div ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\"> <span ng-class=\\"{\'negative\': (endpoint.digest.metrics.criticalTime.average | durationValue) < 0}\\">{{endpoint.digest.metrics.criticalTime.average | durationValue}}</span> <span class=metric-digest-value-suffix>{{endpoint.digest.metrics.criticalTime.average | durationUnit}} </span> </div> <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> <span ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\" class=metric-digest-value-suffix> AVG</span> </div> </div> </div> </div> </div> </div> </div> <div class=container ng-if=\\"loadedSuccessfully && !isPlatformTrialExpired && !isPlatformExpired && !isInvalidDueToUpgradeProtectionExpired\\"> <div class=tabs> <h5 ng-class=\\"{active: !showInstancesBreakdown}\\"> <a ng-click=showInstancesBreakdownTab(false) ng-href=\\"{{buildUrl(selectedPeriod.value, showInstancesBreakdown, endpoint.messageTypesPage)}}\\" class=ng-binding>Message Types ({{endpoint.messageTypes.length}})</a> </h5> <h5 ng-class=\\"{active: showInstancesBreakdown}\\"> <a ng-click=showInstancesBreakdownTab(true) ng-href=\\"{{buildUrl(selectedPeriod.value, showInstancesBreakdown, 1)}}\\" class=ng-binding>Instances ({{endpoint.instances.length}})</a> </h5> </div> <section ng-if=showInstancesBreakdown class=endpoint-instances> <div class=row> <div class=\\"col-xs-12 no-side-padding\\"> <div ng-show=loadedSuccessfully class=\\"row box box-no-click table-head-row\\"> <div class=\\"col-xs-4 col-xl-8\\"> <div class=\\"row box-header\\"> <div class=col-xs-12> Instance Name </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=\\"col-xs-12 no-side-padding\\" uib-tooltip=\\"Throughput: The number of messages per second successfully processed by a receiving endpoint.\\"> Throughput <span class=table-header-unit>(msgs/s)</span> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=\\"col-xs-12 no-side-padding\\" uib-tooltip=\\"Scheduled retries: The number of messages per second scheduled for retries (immediate or delayed).\\"> Scheduled retries <span class=table-header-unit>(msgs/s)</span> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=\\"col-xs-12 no-side-padding\\" uib-tooltip=\\"Processing time: The time taken for a receiving endpoint to successfully process a message.\\"> Processing Time <span class=table-header-unit>(t)</span> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=\\"col-xs-12 no-side-padding\\" uib-tooltip=\\"Critical time: The elapsed time from when a message was sent, until it was successfully processed by a receiving endpoint.\\"> Critical Time <span class=table-header-unit>(t)</span> </div> </div> </div> </div> <no-data ng-show=\\"endpoint.instances.length == 0\\" message=\\"No messages processed in this period of time.\\"></no-data> <div class=\\"row endpoint-instances\\"> <div class=\\"col-xs-12 no-side-padding\\"> <div class=\\"row box endpoint-row\\" ng-repeat=\\"instance in endpoint.instances\\"> <div class=\\"col-xs-12 no-side-padding\\"> <div class=row> <div class=\\"col-xs-4 col-xl-8 endpoint-name\\"> <div class=\\"row box-header\\"> <div class=\\"col-lg-max-9 no-side-padding lead righ-side-ellipsis\\" uib-tooltip={{instance.name}}> {{instance.name}} </div> <div class=\\"col-lg-4 no-side-padding endpoint-status\\"> <span class=warning ng-show=\\"instance.metrics.criticalTime.displayValue.value < 0\\"> <i class=\\"fa pa-warning\\" uib-tooltip=\\"Warning: instance currently has negative critical time, possibly because of a clock drift.\\"></i> </span> <span class=warning ng-if=instance.isScMonitoringDisconnected> <i class=\\"fa pa-monitoring-lost endpoint-details\\" uib-tooltip=\\"Unable to connect to monitoring server\\"></i> </span> <span class=warning ng-if=instance.isStale> <i class=\\"fa pa-endpoint-lost endpoint-details\\" uib-tooltip=\\"Unable to connect to instance\\"></i> </span> <span class=warning ng-if=instance.errorCount> <a ng-if=instance.errorCount class=\\"warning btn\\" href=#/failed-messages/groups/{{instance.serviceControlId}}> <i class=\\"fa fa-envelope\\" uib-tooltip=\\"{{instance.errorCount | metricslargenumber}} failed messages associated with this endpoint. Click to see list.\\"></i> <span class=\\"badge badge-important ng-binding\\">{{instance.errorCount | metricslargenumber}}</span> </a> </span> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=no-side-padding> <graph plot-data=instance.metrics.throughput minimum-yaxis={{smallGraphsMinimumYAxis.throughput}} avg-label-color=#176397 metric-suffix=MSGS/S class=\\"graph throughput pull-left\\"></graph> </div> <div class=\\"no-side-padding sparkline-value\\"> {{(instance.isStale == true || instance.isScMonitoringDisconnected == true) ? \\"\\" : instance.metrics.throughput.displayValue}} <strong ng-if=\\"instance.isStale || instance.isScMonitoringDisconnected\\">?</strong> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=no-side-padding> <graph plot-data=instance.metrics.retries minimum-yaxis={{smallGraphsMinimumYAxis.retries}} avg-label-color=#CC1252 metric-suffix=MSGS/S class=\\"graph retries pull-left\\"></graph> </div> <div class=\\"no-side-padding sparkline-value\\"> {{(instance.isStale == true || instance.isScMonitoringDisconnected == true) ? \\"\\" : instance.metrics.retries.displayValue}} <strong ng-if=\\"instance.isStale || instance.isScMonitoringDisconnected\\">?</strong> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=no-side-padding> <graph plot-data=instance.metrics.processingTime minimum-yaxis={{smallGraphsMinimumYAxis.processingTime}} avg-label-color=#258135 is-duration-graph=true class=\\"graph processing-time pull-left\\"></graph> </div> <div class=\\"no-side-padding sparkline-value\\" ng-class=instance.metrics.processingTime.displayValue.unit> {{(instance.isStale == true || instance.isScMonitoringDisconnected == true) ? \\"\\" : instance.metrics.processingTime.displayValue.value}} <strong ng-if=\\"instance.isStale || instance.isScMonitoringDisconnected\\">?</strong> <span ng-if=\\"instance.isStale == false && !!instance.isScMonitoringDisconnected == false\\" class=unit> {{instance.metrics.processingTime.displayValue.unit}} </span> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=no-side-padding> <graph plot-data=instance.metrics.criticalTime minimum-yaxis={{smallGraphsMinimumYAxis.criticalTime}} avg-label-color=#2700CB is-duration-graph=true class=\\"graph critical-time pull-left\\"></graph> </div> <div class=\\"no-side-padding sparkline-value\\" ng-class=\\"[instance.metrics.criticalTime.displayValue.unit, {\'negative\':instance.metrics.criticalTime.displayValue.value < 0}]\\"> {{(instance.isStale == true || instance.isScMonitoringDisconnected == true) ? \\"\\" : instance.metrics.criticalTime.displayValue.value}} <strong ng-if=\\"instance.isStale || instance.isScMonitoringDisconnected\\">?</strong> <span ng-if=\\"instance.isStale == false && !!instance.isScMonitoringDisconnected == false\\" class=unit> {{instance.metrics.criticalTime.displayValue.unit}} </span> </div> </div> </div> <a ng-if=isRemovingEndpointEnabled ng-show=instance.isStale class=remove-endpoint ng-click=\\"removeEndpoint(endpointName, instance)\\"><i class=\\"fa fa-trash\\" uib-tooltip=\\"Remove endpoint\\"></i></a> </div> </div> </div> </div> </div> </div> </div> </section> <section ng-if=!showInstancesBreakdown class=endpoint-message-types> <div class=row> <div class=\\"col-xs-12 no-side-padding\\"> <message-types-change-indicator refresh=endpoint.refreshMessageTypes message-types-available=endpoint.messageTypesAvailable></message-types-change-indicator> <div ng-show=loadedSuccessfully class=\\"row box box-no-click table-head-row\\"> <div class=\\"col-xs-4 col-xl-8\\"> <div class=\\"row box-header\\"> <div class=col-xs-12> Message type name </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=\\"col-xs-12 no-side-padding\\" uib-tooltip=\\"Throughput: The number of messages per second successfully processed by a receiving endpoint.\\"> Throughput <span class=table-header-unit>(msgs/s)</span> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=\\"col-xs-12 no-side-padding\\" uib-tooltip=\\"Scheduled retries: The number of messages per second scheduled for retries (immediate or delayed).\\"> Scheduled retries <span class=table-header-unit>(msgs/s)</span> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=\\"col-xs-12 no-side-padding\\" uib-tooltip=\\"Processing time: The time taken for a receiving endpoint to successfully process a message.\\"> Processing Time <span class=table-header-unit>(t)</span> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=\\"col-xs-12 no-side-padding\\" uib-tooltip=\\"Critical time: The elapsed time from when a message was sent, until it was successfully processed by a receiving endpoint.\\"> Critical Time <span class=table-header-unit>(t)</span> </div> </div> </div> </div> <no-data ng-show=\\"endpoint.messageTypes.length == 0\\" message=\\"No messages processed in this period of time.\\"></no-data> <div class=row> <div class=\\"col-xs-12 no-side-padding\\"> <div class=\\"row box endpoint-row\\" ng-repeat=\\"messageType in endpoint.messageTypes | orderBy: \'typeName\' | limitTo: endpoint.messageTypesItemsPerPage : (endpoint.messageTypesPage-1) * endpoint.messageTypesItemsPerPage\\"> <div class=\\"col-xs-12 no-side-padding\\"> <div class=row> <div class=\\"col-xs-4 col-xl-8 endpoint-name\\" uib-tooltip-html=messageType.tooltipText> <div class=\\"row box-header\\"> <div class=\\"col-lg-max-9 no-side-padding lead message-type-label righ-side-ellipsis\\"> <div class=lead> {{messageType.shortName ? messageType.shortName : \'Unknown\'}} </div> </div> <div class=\\"col-lg-4 no-side-padding endpoint-status message-type-status\\"> <span class=warning ng-if=\\"messageType.metrics.criticalTime.displayValue.value < 0\\"> <i class=\\"fa pa-warning\\" uib-tooltip=\\"Warning: message type currently has negative critical time, possibly because of a clock drift.\\"></i> </span> <span class=warning ng-if=endpoint.isScMonitoringDisconnected> <i class=\\"fa pa-monitoring-lost endpoint-details\\" uib-tooltip=\\"Unable to connect to monitoring server\\"></i> </span> </div> </div> <div class=\\"row message-type-properties\\"> <div ng-show=\\"{{messageType.typeName && messageType.typeName != \'null\' && !messageType.containsTypeHierarchy}}\\" class=message-type-part> {{messageType.assemblyName + \'-\' + messageType.assemblyVersion}} </div> <div ng-show=\\"{{messageType.typeName && messageType.typeName != \'null\' && messageType.containsTypeHierarchy}}\\" class=message-type-part ng-repeat=\\"type in messageType.messageTypeHierarchy\\"> {{type.assemblyName + \'-\' + type.assemblyVersion}} </div> <div ng-show=\\"{{messageType.culture && messageType.culture != \'null\'}}\\" class=message-type-part>{{\'Culture=\' + messageType.culture}}</div> <div ng-show=\\"{{messageType.publicKeyToken && messageType.publicKeyToken != \'null\'}}\\" class=message-type-part>{{\'PublicKeyToken=\' + messageType.publicKeyToken}}</div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=no-side-padding> <graph plot-data=messageType.metrics.throughput minimum-yaxis={{smallGraphsMinimumYAxis.throughput}} avg-label-color=#176397 metric-suffix=MSGS/S metric-suffix=MSGS/S class=\\"graph throughput pull-left\\"></graph> </div> <div class=\\"no-side-padding sparkline-value\\"> {{(endpoint.isStale == true || endpoint.isScMonitoringDisconnected == true) ? \\"\\" : messageType.metrics.throughput.displayValue}} <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=no-side-padding> <graph plot-data=messageType.metrics.retries minimum-yaxis={{smallGraphsMinimumYAxis.retries}} avg-label-color=#CC1252 metric-suffix=MSGS/S class=\\"graph retries pull-left\\"></graph> </div> <div class=\\"no-side-padding sparkline-value\\"> {{(endpoint.isStale == true || endpoint.isScMonitoringDisconnected == true) ? \\"\\" : messageType.metrics.retries.displayValue}} <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=no-side-padding> <graph plot-data=messageType.metrics.processingTime minimum-yaxis={{smallGraphsMinimumYAxis.processingTime}} avg-label-color=#258135 is-duration-graph=true class=\\"graph processing-time pull-left\\"></graph> </div> <div class=\\"no-side-padding sparkline-value\\" ng-class=messageType.metrics.processingTime.displayValue.unit> {{(endpoint.isStale == true || endpoint.isScMonitoringDisconnected == true) ? \\"\\" : messageType.metrics.processingTime.displayValue.value}} <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> <span ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\" class=unit> {{messageType.metrics.processingTime.displayValue.unit}} </span> </div> </div> </div> <div class=\\"col-xs-2 col-xl-1 no-side-padding\\"> <div class=\\"row box-header\\"> <div class=no-side-padding> <graph plot-data=messageType.metrics.criticalTime minimum-yaxis={{smallGraphsMinimumYAxis.criticalTime}} avg-label-color=#2700CB is-duration-graph=true class=\\"graph critical-time pull-left\\"></graph> </div> <div class=\\"no-side-padding sparkline-value\\" ng-class=\\"[messageType.metrics.criticalTime.displayValue.unit, {\'negative\':messageType.metrics.criticalTime.displayValue.value < 0}]\\"> {{(endpoint.isStale == true || endpoint.isScMonitoringDisconnected == true) ? \\"\\" : messageType.metrics.criticalTime.displayValue.value}} <strong ng-if=\\"endpoint.isStale || endpoint.isScMonitoringDisconnected\\">?</strong> <span ng-if=\\"endpoint.isStale == false && endpoint.isScMonitoringDisconnected == false\\" class=unit> {{messageType.metrics.criticalTime.displayValue.unit}} </span> </div> </div> </div> </div> </div> </div> </div> </div> <div class=\\"row list-pagination\\"> <ul uib-pagination ng-show=\\"endpoint.messageTypesTotalItems >  endpoint.messageTypesItemsPerPage\\" total-items=endpoint.messageTypesTotalItems ng-model=endpoint.messageTypesPage items-per-page=endpoint.messageTypesItemsPerPage max-size=10 boundary-link-numbers=true ng-change=updateUrl()></ul> </div> </div> </div> </section> </div>";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///285\n')},286:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular) {\n    'use strict';\n\n    angular.module('ui.particular.duration', []).filter('duration', ['formatter', function (formatter) {\n        return function (input) {\n            var time = formatter.formatTime(input);\n            return time.value + ' ' + time.unit;\n        };\n    }]).filter('durationValue', ['formatter', function (formatter) {\n        return function (input) {\n            return formatter.formatTime(input).value;\n        };\n    }]).filter('durationUnit', ['formatter', function (formatter) {\n        return function (input) {\n            return formatter.formatTime(input).unit;\n        };\n    }]);\n})(window, window.angular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLmR1cmF0aW9uLmpzPzM2ODkiXSwibmFtZXMiOlsid2luZG93IiwiYW5ndWxhciIsIm1vZHVsZSIsImZpbHRlciIsImZvcm1hdHRlciIsImlucHV0IiwidGltZSIsImZvcm1hdFRpbWUiLCJ2YWx1ZSIsInVuaXQiXSwibWFwcGluZ3MiOiI7O0FBQUMsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBMkI7QUFDeEI7O0FBRUFBLFlBQVFDLE1BQVIsQ0FBZSx3QkFBZixFQUF5QyxFQUF6QyxFQUNLQyxNQURMLENBQ1ksVUFEWixFQUN3QixDQUFDLFdBQUQsRUFBYyxVQUFVQyxTQUFWLEVBQXFCO0FBQ25ELGVBQU8sVUFBVUMsS0FBVixFQUFpQjtBQUNwQixnQkFBSUMsT0FBT0YsVUFBVUcsVUFBVixDQUFxQkYsS0FBckIsQ0FBWDtBQUNBLG1CQUFVQyxLQUFLRSxLQUFmLFNBQXdCRixLQUFLRyxJQUE3QjtBQUNILFNBSEQ7QUFJSCxLQUxtQixDQUR4QixFQU9LTixNQVBMLENBT1ksZUFQWixFQU82QixDQUFDLFdBQUQsRUFBYyxVQUFVQyxTQUFWLEVBQXFCO0FBQ3hELGVBQU8sVUFBVUMsS0FBVixFQUFpQjtBQUNwQixtQkFBT0QsVUFBVUcsVUFBVixDQUFxQkYsS0FBckIsRUFBNEJHLEtBQW5DO0FBQ0gsU0FGRDtBQUdILEtBSndCLENBUDdCLEVBWUtMLE1BWkwsQ0FZWSxjQVpaLEVBWTRCLENBQUMsV0FBRCxFQUFjLFVBQVVDLFNBQVYsRUFBcUI7QUFDdkQsZUFBTyxVQUFVQyxLQUFWLEVBQWlCO0FBQ3BCLG1CQUFPRCxVQUFVRyxVQUFWLENBQXFCRixLQUFyQixFQUE0QkksSUFBbkM7QUFDSCxTQUZEO0FBR0gsS0FKdUIsQ0FaNUI7QUFpQkgsQ0FwQkEsRUFvQkNULE1BcEJELEVBb0JTQSxPQUFPQyxPQXBCaEIsQ0FBRCIsImZpbGUiOiIyODYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKHdpbmRvdywgYW5ndWxhcikge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCd1aS5wYXJ0aWN1bGFyLmR1cmF0aW9uJywgW10pXG4gICAgICAgIC5maWx0ZXIoJ2R1cmF0aW9uJywgWydmb3JtYXR0ZXInLCBmdW5jdGlvbiAoZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBmb3JtYXR0ZXIuZm9ybWF0VGltZShpbnB1dCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3RpbWUudmFsdWV9ICR7dGltZS51bml0fWA7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSlcbiAgICAgICAgLmZpbHRlcignZHVyYXRpb25WYWx1ZScsIFsnZm9ybWF0dGVyJywgZnVuY3Rpb24gKGZvcm1hdHRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0VGltZShpbnB1dCkudmFsdWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSlcbiAgICAgICAgLmZpbHRlcignZHVyYXRpb25Vbml0JywgWydmb3JtYXR0ZXInLCBmdW5jdGlvbiAoZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXRUaW1lKGlucHV0KS51bml0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xufSh3aW5kb3csIHdpbmRvdy5hbmd1bGFyKSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///286\n")},287:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _uiParticular = __webpack_require__(11);\n\nvar _uiParticular2 = _interopRequireDefault(_uiParticular);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function (window, angular, d3) {\n    'use strict';\n\n    var averageDecimalsDefault = 2;\n    var avgLabelSuffixDefault = '';\n\n    var averageLabelToTheRight = (0, _uiParticular2.default)({ pointToTheLeft: false, caption: 'AVG' });\n    var averageLabelToTheLeft = (0, _uiParticular2.default)({ pointToTheLeft: true, caption: 'AVG' });\n\n    function drawDataSeries(chart, data, color, fillColor, scaleX, scaleY) {\n\n        var area = d3.area().x(function (d, i) {\n            return scaleX(i);\n        }).y(function (d) {\n            return scaleY(d);\n        }).y1(function () {\n            return scaleY(0);\n        }).curve(d3.curveLinear);\n\n        var line = d3.line().x(function (d, i) {\n            return scaleX(i);\n        }).y(function (d, i) {\n            return scaleY(d);\n        }).curve(d3.curveLinear);\n\n        var group = chart.append('g').attr('class', 'dataSeries');\n\n        group.append('path').datum(data.points).attr('d', area).attr('fill', fillColor).attr('opacity', 0.8).attr('stroke', fillColor);\n\n        group.append('path').datum(data.points).attr('d', line).attr('stroke', color).attr('stroke-width', 2.75).attr('fill', 'none');\n    }\n\n    function drawAverageLine(chart, data, color, fillColor, scaleX, scaleY) {\n\n        var line = d3.line().x(function (d, i) {\n            return scaleX(i);\n        }).y(function (d, i) {\n            return scaleY(d);\n        }).curve(d3.curveLinear);\n\n        var group = chart.append('g').attr('class', 'dataAverage');\n\n        var avgLine = group.append('path').datum(Array(data.points.length).fill(data.average)).attr('d', line).attr('stroke', color).attr('stroke-width', 1.5).attr('opacity', 0.5).attr('stroke-dasharray', '10,10');\n\n        return avgLine;\n    }\n\n    function padToWholeValue(value) {\n        var emptyDataSetyAxisMax = 10;\n\n        if (!value) {\n            return emptyDataSetyAxisMax;\n        }\n\n        var upperBound = 10;\n\n        while (value > upperBound) {\n            upperBound *= 10;\n        }\n\n        upperBound /= 10;\n\n        return Math.floor(value / upperBound) * upperBound + upperBound;\n    }\n\n    angular.module('ui.particular.largeGraph', []).directive('largeGraph', function (formatter) {\n        return {\n            restrict: 'E',\n            scope: {\n                firstDataSeries: '=firstDataSeries',\n                secondDataSeries: '=secondDataSeries',\n                isDurationGraph: '=isDurationGraph',\n                minimumYaxis: '@',\n                width: '=plotWidth',\n                height: '=plotHeight',\n                avgDecimals: '@'\n            },\n            template: '<svg></svg>',\n            link: function link(scope, element, attrs) {\n                scope.avgDecimals = scope.avgDecimals || averageDecimalsDefault;\n                attrs.metricSuffix = attrs.metricSuffix || avgLabelSuffixDefault;\n\n                scope.$watch('firstDataSeries', function () {\n\n                    var svg = element.find('svg')[0];\n\n                    d3.select(svg).selectAll('*').remove();\n\n                    var topMargin = 10;\n                    var bottomMargin = 5;\n                    var leftMargin = 60;\n\n                    var chart = d3.select(svg).attr('width', scope.width).attr('height', scope.height);\n\n                    var width = svg.clientWidth;\n                    var height = svg.clientHeight;\n\n                    //HINT: This is workaround for Firefox\n                    if (width === 0) {\n                        var box = svg.getBoundingClientRect();\n\n                        width = box.right - box.left;\n                        height = box.bottom - box.top;\n                    }\n\n                    var firstSeries = scope.firstDataSeries;\n                    var secondSeries = scope.secondDataSeries;\n\n                    var amountOfValues = Math.max(firstSeries.points.length, secondSeries ? secondSeries.points.length : 0) || 10;\n                    if (firstSeries.points.length === 0) {\n                        firstSeries.points = new Array(amountOfValues).fill(0);\n                    }\n                    var scaleX = d3.scaleLinear().domain([0, amountOfValues - 1]).range([leftMargin, width]);\n\n                    chart.append('rect').attr('width', width - leftMargin).attr('height', height - topMargin - bottomMargin).attr('transform', 'translate(' + leftMargin + ',' + topMargin + ')').attr('fill', '#F2F6F7');\n\n                    var minimumYaxis = !isNaN(scope.minimumYaxis) ? Number(scope.minimumYaxis) : 10;\n                    var max = Math.max(firstSeries.average, firstSeries.points.length > 0 ? d3.max(firstSeries.points) : 0, minimumYaxis);\n\n                    if (secondSeries && secondSeries.points.length > 0) {\n                        max = Math.max(max, secondSeries.average, d3.max(secondSeries.points));\n                    }\n\n                    max = padToWholeValue(max);\n\n                    var scaleY = d3.scaleLinear().domain([0, max]).range([height - bottomMargin, topMargin]);\n\n                    var yAxis = d3.axisLeft(scaleY).tickValues([0, max * 1 / 4, max * 1 / 2, max * 3 / 4, max]);\n\n                    if (scope.isDurationGraph) {\n                        yAxis = yAxis.tickFormat(function (v) {\n                            var formattedTime = formatter.formatTime(v);\n\n                            return formattedTime.value + '  ' + formattedTime.unit;\n                        });\n                    }\n\n                    chart.append('g').attr('class', 'y axis').attr('transform', 'translate(' + leftMargin + ', 0)').call(function (g) {\n                        g.call(yAxis);\n                        g.select('.domain').remove();\n                        g.selectAll('.tick line').attr('stroke', 'black').attr('stroke-width', '1.75').attr('opacity', 0.1).attr('x', 0).attr('x2', width - leftMargin);\n                        g.selectAll('.tick text').attr('x', -4).attr('fill', '#828282');\n                    });\n\n                    var drawSeries = function drawSeries(data, lineColor, fillColor) {\n                        drawDataSeries(chart, data, lineColor, fillColor, scaleX, scaleY);\n                    };\n\n                    var drawAverage = function drawAverage(data, lineColor, fillColor) {\n                        return drawAverageLine(chart, data, lineColor, fillColor, scaleX, scaleY);\n                    };\n\n                    var displayAverageLabel = function displayAverageLabel(averageLine, label, value, color, unit) {\n                        var _averageLine$node$get = averageLine.node().getBoundingClientRect(),\n                            x = _averageLine$node$get.x,\n                            y = _averageLine$node$get.y,\n                            width = _averageLine$node$get.width;\n\n                        label.value(value, unit);\n\n                        if (label.pointingToTheLeft) {\n                            label.displayAt({ x: x + width + window.pageXOffset, y: y + window.pageYOffset, color: color });\n                        } else {\n                            label.displayAt({ x: x + window.pageXOffset, y: y + window.pageYOffset, color: color });\n                        }\n                    };\n\n                    drawSeries(firstSeries, attrs.firstSeriesColor, attrs.firstSeriesFillColor);\n\n                    if (secondSeries) {\n                        drawSeries(secondSeries, attrs.secondSeriesColor, attrs.secondSeriesFillColor);\n                    }\n\n                    var firstAverageLine = drawAverage(firstSeries, attrs.firstSeriesColor, attrs.firstSeriesFillColor);\n\n                    var secondAverageLine = null;\n\n                    if (secondSeries) {\n                        secondAverageLine = drawAverage(secondSeries, attrs.secondSeriesColor, attrs.secondSeriesFillColor);\n                    }\n\n                    chart.on(\"mouseover\", function () {\n                        var value = '' + formatter.formatLargeNumber(firstSeries.average, scope.avgDecimals);\n                        var suffix = attrs.metricSuffix;\n\n                        if (scope.isDurationGraph) {\n                            value = '' + formatter.formatTime(firstSeries.average).value;\n                            suffix = formatter.formatTime(firstSeries.average).unit.toUpperCase();\n                        }\n\n                        displayAverageLabel(firstAverageLine, averageLabelToTheRight, value, attrs.firstSeriesColor, suffix);\n\n                        if (secondAverageLine && secondSeries.points.length > 0) {\n                            value = '' + formatter.formatLargeNumber(secondSeries.average, scope.avgDecimals);\n\n                            if (scope.isDurationGraph) {\n                                value = '' + formatter.formatTime(secondSeries.average).value;\n                                suffix = formatter.formatTime(secondSeries.average).unit.toUpperCase();\n                            }\n\n                            displayAverageLabel(secondAverageLine, averageLabelToTheLeft, value, attrs.secondSeriesColor, suffix);\n                        }\n                    }).on(\"mouseout\", function () {\n                        averageLabelToTheRight.hide();\n                        averageLabelToTheLeft.hide();\n                    });\n                });\n            }\n        };\n    });\n})(window, window.angular, window.d3);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///287\n")},288:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular, $) {\n    'use strict';\n\n    angular.module('ui.particular.messageTypesChangeIndicator', []).directive('messageTypesChangeIndicator', function () {\n        return {\n            restrict: 'E',\n            scope: {\n                refresh: '=',\n                messageTypesAvailable: '='\n            },\n            templateUrl: 'modules/monitoring/js/directives/ui.particular.messageTypesChangeIndicator.tpl.html',\n            link: function link(scope, element, attrs) {\n                $(window).on('load scroll', function () {\n                    if ($(this).scrollTop() > 510) {\n                        $('.endpoint-data-changed').addClass('sticky');\n                        $('.table-head-row').addClass('add-top-margin');\n                    } else {\n                        $('.endpoint-data-changed').removeClass('sticky');\n                        $('.table-head-row').removeClass('add-top-margin');\n                    }\n                });\n            }\n        };\n    });\n})(window, window.angular, window.jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLm1lc3NhZ2VUeXBlc0NoYW5nZUluZGljYXRvci5qcz9kNTI2Il0sIm5hbWVzIjpbIndpbmRvdyIsImFuZ3VsYXIiLCIkIiwibW9kdWxlIiwiZGlyZWN0aXZlIiwicmVzdHJpY3QiLCJzY29wZSIsInJlZnJlc2giLCJtZXNzYWdlVHlwZXNBdmFpbGFibGUiLCJ0ZW1wbGF0ZVVybCIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJvbiIsInNjcm9sbFRvcCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiI7O0FBQUMsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBMkJDLENBQTNCLEVBQThCO0FBQzNCOztBQUVBRCxZQUFRRSxNQUFSLENBQWUsMkNBQWYsRUFBNEQsRUFBNUQsRUFDS0MsU0FETCxDQUNlLDZCQURmLEVBRVEsWUFBVztBQUNQLGVBQU87QUFDSEMsc0JBQVUsR0FEUDtBQUVIQyxtQkFBTztBQUNIQyx5QkFBUyxHQUROO0FBRUhDLHVDQUF1QjtBQUZwQixhQUZKO0FBTUhDLHlCQUFhLHFGQU5WO0FBT0hDLGtCQUFNLFNBQVNBLElBQVQsQ0FBY0osS0FBZCxFQUFxQkssT0FBckIsRUFBOEJDLEtBQTlCLEVBQXFDO0FBQ3ZDVixrQkFBRUYsTUFBRixFQUFVYSxFQUFWLENBQWEsYUFBYixFQUE0QixZQUFZO0FBQ3BDLHdCQUFJWCxFQUFFLElBQUYsRUFBUVksU0FBUixLQUFzQixHQUExQixFQUErQjtBQUMzQlosMEJBQUUsd0JBQUYsRUFBNEJhLFFBQTVCLENBQXFDLFFBQXJDO0FBQ0FiLDBCQUFFLGlCQUFGLEVBQXFCYSxRQUFyQixDQUE4QixnQkFBOUI7QUFDSCxxQkFIRCxNQUdPO0FBQ0hiLDBCQUFFLHdCQUFGLEVBQTRCYyxXQUE1QixDQUF3QyxRQUF4QztBQUNBZCwwQkFBRSxpQkFBRixFQUFxQmMsV0FBckIsQ0FBaUMsZ0JBQWpDO0FBQ0g7QUFDSixpQkFSRDtBQVNIO0FBakJFLFNBQVA7QUFtQkgsS0F0QlQ7QUF1QkgsQ0ExQkEsRUEwQkNoQixNQTFCRCxFQTBCU0EsT0FBT0MsT0ExQmhCLEVBMEJ5QkQsT0FBT2lCLE1BMUJoQyxDQUFEIiwiZmlsZSI6IjI4OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAod2luZG93LCBhbmd1bGFyLCAkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3VpLnBhcnRpY3VsYXIubWVzc2FnZVR5cGVzQ2hhbmdlSW5kaWNhdG9yJywgW10pXG4gICAgICAgIC5kaXJlY3RpdmUoJ21lc3NhZ2VUeXBlc0NoYW5nZUluZGljYXRvcicsXG4gICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaDogJz0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVR5cGVzQXZhaWxhYmxlOiAnPSdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL21vbml0b3JpbmcvanMvZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLm1lc3NhZ2VUeXBlc0NoYW5nZUluZGljYXRvci50cGwuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHdpbmRvdykub24oJ2xvYWQgc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnNjcm9sbFRvcCgpID4gNTEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5lbmRwb2ludC1kYXRhLWNoYW5nZWQnKS5hZGRDbGFzcygnc3RpY2t5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy50YWJsZS1oZWFkLXJvdycpLmFkZENsYXNzKCdhZGQtdG9wLW1hcmdpbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5lbmRwb2ludC1kYXRhLWNoYW5nZWQnKS5yZW1vdmVDbGFzcygnc3RpY2t5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy50YWJsZS1oZWFkLXJvdycpLnJlbW92ZUNsYXNzKCdhZGQtdG9wLW1hcmdpbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xufSh3aW5kb3csIHdpbmRvdy5hbmd1bGFyLCB3aW5kb3cualF1ZXJ5KSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///288\n")},289:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular, $, Rx) {\n    'use strict';\n\n    function Service(notifyService, monitoringService, $log, $rootScope) {\n        var disconnectedEndpointsUpdatedEvent = \"DisconnectedEndpointsUpdated\";\n\n        var notifier = notifyService();\n\n        var checkInterval;\n\n        var checkDisconnectedCount = function checkDisconnectedCount() {\n            monitoringService.getDisconnectedCount().then(function (result) {\n                notifier.notify(disconnectedEndpointsUpdatedEvent, result.data);\n            }, function (e) {\n                $log.debug('Error while getting disconnected endpoints count from monitoring:' + e);\n                clearInterval(checkInterval); //Stop checking, probably an old version of Monitoring\n            });\n        };\n\n        var isConnected = false;\n\n        var startService = function startService() {\n            notifier.subscribe($rootScope, function (event, data) {\n                if (data.isMonitoringConnected && isConnected == false) {\n                    checkDisconnectedCount();\n                    checkInterval = setInterval(checkDisconnectedCount, 20000);\n                    isConnected = true;\n                } else if (!data.isMonitoringConnected && isConnected) {\n                    isConnected = false;\n                    clearInterval(checkInterval);\n                }\n            }, \"MonitoringConnectionStatusChanged\");\n        };\n\n        var service = {\n            updatedEvent: disconnectedEndpointsUpdatedEvent,\n            startService: startService\n        };\n\n        return service;\n    }\n\n    Service.$inject = ['notifyService', 'monitoringService', '$log', '$rootScope'];\n\n    angular.module('services.disconnectedEndpointMonitor', ['sc']).service('disconnectedEndpointMonitor', Service);\n})(window, window.angular, window.jQuery, window.Rx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvc2VydmljZXMvc2VydmljZXMuZGlzY29ubmVjdGVkRW5kcG9pbnRNb25pdG9yLmpzPzUwOGYiXSwibmFtZXMiOlsid2luZG93IiwiYW5ndWxhciIsIiQiLCJSeCIsIlNlcnZpY2UiLCJub3RpZnlTZXJ2aWNlIiwibW9uaXRvcmluZ1NlcnZpY2UiLCIkbG9nIiwiJHJvb3RTY29wZSIsImRpc2Nvbm5lY3RlZEVuZHBvaW50c1VwZGF0ZWRFdmVudCIsIm5vdGlmaWVyIiwiY2hlY2tJbnRlcnZhbCIsImNoZWNrRGlzY29ubmVjdGVkQ291bnQiLCJnZXREaXNjb25uZWN0ZWRDb3VudCIsInRoZW4iLCJub3RpZnkiLCJyZXN1bHQiLCJkYXRhIiwiZGVidWciLCJlIiwiY2xlYXJJbnRlcnZhbCIsImlzQ29ubmVjdGVkIiwic3RhcnRTZXJ2aWNlIiwic3Vic2NyaWJlIiwiZXZlbnQiLCJpc01vbml0b3JpbmdDb25uZWN0ZWQiLCJzZXRJbnRlcnZhbCIsInNlcnZpY2UiLCJ1cGRhdGVkRXZlbnQiLCIkaW5qZWN0IiwibW9kdWxlIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiOztBQUFDLFdBQVVBLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTJCQyxDQUEzQixFQUE4QkMsRUFBOUIsRUFBa0M7QUFDL0I7O0FBRUEsYUFBU0MsT0FBVCxDQUFpQkMsYUFBakIsRUFBZ0NDLGlCQUFoQyxFQUFtREMsSUFBbkQsRUFBeURDLFVBQXpELEVBQXFFO0FBQ2pFLFlBQUlDLG9DQUFvQyw4QkFBeEM7O0FBRUEsWUFBSUMsV0FBV0wsZUFBZjs7QUFFQSxZQUFJTSxhQUFKOztBQUVBLFlBQUlDLHlCQUF5QixTQUF6QkEsc0JBQXlCLEdBQVk7QUFDckNOLDhCQUFrQk8sb0JBQWxCLEdBQXlDQyxJQUF6QyxDQUE4QyxrQkFBVTtBQUNwREoseUJBQVNLLE1BQVQsQ0FBZ0JOLGlDQUFoQixFQUFtRE8sT0FBT0MsSUFBMUQ7QUFDSCxhQUZELEVBRUcsYUFBSztBQUNKVixxQkFBS1csS0FBTCxDQUFXLHNFQUFzRUMsQ0FBakY7QUFDQUMsOEJBQWNULGFBQWQsRUFGSSxDQUUwQjtBQUNqQyxhQUxEO0FBTUgsU0FQRDs7QUFTQSxZQUFJVSxjQUFjLEtBQWxCOztBQUVBLFlBQUlDLGVBQWUsU0FBZkEsWUFBZSxHQUFZO0FBQzNCWixxQkFBU2EsU0FBVCxDQUFtQmYsVUFBbkIsRUFBK0IsVUFBQ2dCLEtBQUQsRUFBUVAsSUFBUixFQUFpQjtBQUM1QyxvQkFBSUEsS0FBS1EscUJBQUwsSUFBOEJKLGVBQWUsS0FBakQsRUFBd0Q7QUFDcERUO0FBQ0FELG9DQUFnQmUsWUFBWWQsc0JBQVosRUFBb0MsS0FBcEMsQ0FBaEI7QUFDQVMsa0NBQWMsSUFBZDtBQUNILGlCQUpELE1BSU8sSUFBSSxDQUFDSixLQUFLUSxxQkFBTixJQUErQkosV0FBbkMsRUFBZ0Q7QUFDbkRBLGtDQUFjLEtBQWQ7QUFDQUQsa0NBQWNULGFBQWQ7QUFDSDtBQUNKLGFBVEQsRUFTRyxtQ0FUSDtBQVVILFNBWEQ7O0FBYUEsWUFBSWdCLFVBQVU7QUFDVkMsMEJBQWNuQixpQ0FESjtBQUVWYSwwQkFBY0E7QUFGSixTQUFkOztBQUtBLGVBQU9LLE9BQVA7QUFDSDs7QUFFRHZCLFlBQVF5QixPQUFSLEdBQWtCLENBQUMsZUFBRCxFQUFrQixtQkFBbEIsRUFBdUMsTUFBdkMsRUFBK0MsWUFBL0MsQ0FBbEI7O0FBRUE1QixZQUFRNkIsTUFBUixDQUFlLHNDQUFmLEVBQXVELENBQUMsSUFBRCxDQUF2RCxFQUNLSCxPQURMLENBQ2EsNkJBRGIsRUFDNEN2QixPQUQ1QztBQUVILENBOUNBLEVBOENDSixNQTlDRCxFQThDU0EsT0FBT0MsT0E5Q2hCLEVBOEN5QkQsT0FBTytCLE1BOUNoQyxFQThDd0MvQixPQUFPRyxFQTlDL0MsQ0FBRCIsImZpbGUiOiIyODkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKHdpbmRvdywgYW5ndWxhciwgJCwgUngpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBTZXJ2aWNlKG5vdGlmeVNlcnZpY2UsIG1vbml0b3JpbmdTZXJ2aWNlLCAkbG9nLCAkcm9vdFNjb3BlKSB7XG4gICAgICAgIHZhciBkaXNjb25uZWN0ZWRFbmRwb2ludHNVcGRhdGVkRXZlbnQgPSBcIkRpc2Nvbm5lY3RlZEVuZHBvaW50c1VwZGF0ZWRcIjtcblxuICAgICAgICB2YXIgbm90aWZpZXIgPSBub3RpZnlTZXJ2aWNlKCk7XG5cbiAgICAgICAgdmFyIGNoZWNrSW50ZXJ2YWw7XG5cbiAgICAgICAgdmFyIGNoZWNrRGlzY29ubmVjdGVkQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBtb25pdG9yaW5nU2VydmljZS5nZXREaXNjb25uZWN0ZWRDb3VudCgpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICBub3RpZmllci5ub3RpZnkoZGlzY29ubmVjdGVkRW5kcG9pbnRzVXBkYXRlZEV2ZW50LCByZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9LCBlID0+IHtcbiAgICAgICAgICAgICAgICAkbG9nLmRlYnVnKCdFcnJvciB3aGlsZSBnZXR0aW5nIGRpc2Nvbm5lY3RlZCBlbmRwb2ludHMgY291bnQgZnJvbSBtb25pdG9yaW5nOicgKyBlKTtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGNoZWNrSW50ZXJ2YWwpOyAvL1N0b3AgY2hlY2tpbmcsIHByb2JhYmx5IGFuIG9sZCB2ZXJzaW9uIG9mIE1vbml0b3JpbmdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpc0Nvbm5lY3RlZCA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBzdGFydFNlcnZpY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBub3RpZmllci5zdWJzY3JpYmUoJHJvb3RTY29wZSwgKGV2ZW50LCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuaXNNb25pdG9yaW5nQ29ubmVjdGVkICYmIGlzQ29ubmVjdGVkID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRGlzY29ubmVjdGVkQ291bnQoKTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tJbnRlcnZhbCA9IHNldEludGVydmFsKGNoZWNrRGlzY29ubmVjdGVkQ291bnQsIDIwMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgaXNDb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRhdGEuaXNNb25pdG9yaW5nQ29ubmVjdGVkICYmIGlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY2hlY2tJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgXCJNb25pdG9yaW5nQ29ubmVjdGlvblN0YXR1c0NoYW5nZWRcIik7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICB1cGRhdGVkRXZlbnQ6IGRpc2Nvbm5lY3RlZEVuZHBvaW50c1VwZGF0ZWRFdmVudCxcbiAgICAgICAgICAgIHN0YXJ0U2VydmljZTogc3RhcnRTZXJ2aWNlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgfVxuXG4gICAgU2VydmljZS4kaW5qZWN0ID0gWydub3RpZnlTZXJ2aWNlJywgJ21vbml0b3JpbmdTZXJ2aWNlJywgJyRsb2cnLCAnJHJvb3RTY29wZSddO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NlcnZpY2VzLmRpc2Nvbm5lY3RlZEVuZHBvaW50TW9uaXRvcicsIFsnc2MnXSlcbiAgICAgICAgLnNlcnZpY2UoJ2Rpc2Nvbm5lY3RlZEVuZHBvaW50TW9uaXRvcicsIFNlcnZpY2UpO1xufSh3aW5kb3csIHdpbmRvdy5hbmd1bGFyLCB3aW5kb3cualF1ZXJ5LCB3aW5kb3cuUngpKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///289\n")},4:function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * ZeroClipboard\n * The ZeroClipboard library provides an easy way to copy text to the clipboard using an invisible Adobe Flash movie and a JavaScript interface\n * Copyright (c) 2009-2016 Jon Rohan, James M. Greene\n * Licensed MIT\n * http://zeroclipboard.org/\n * v2.3.0\n */\n(function(window, undefined) {\n  "use strict";\n  /**\n * Store references to critically important global functions that may be\n * overridden on certain web pages.\n */\n  var _window = window, _document = _window.document, _navigator = _window.navigator, _setTimeout = _window.setTimeout, _clearTimeout = _window.clearTimeout, _setInterval = _window.setInterval, _clearInterval = _window.clearInterval, _getComputedStyle = _window.getComputedStyle, _encodeURIComponent = _window.encodeURIComponent, _ActiveXObject = _window.ActiveXObject, _Error = _window.Error, _parseInt = _window.Number.parseInt || _window.parseInt, _parseFloat = _window.Number.parseFloat || _window.parseFloat, _isNaN = _window.Number.isNaN || _window.isNaN, _now = _window.Date.now, _keys = _window.Object.keys, _hasOwn = _window.Object.prototype.hasOwnProperty, _slice = _window.Array.prototype.slice, _unwrap = function() {\n    var unwrapper = function(el) {\n      return el;\n    };\n    if (typeof _window.wrap === "function" && typeof _window.unwrap === "function") {\n      try {\n        var div = _document.createElement("div");\n        var unwrappedDiv = _window.unwrap(div);\n        if (div.nodeType === 1 && unwrappedDiv && unwrappedDiv.nodeType === 1) {\n          unwrapper = _window.unwrap;\n        }\n      } catch (e) {}\n    }\n    return unwrapper;\n  }();\n  /**\n * Convert an `arguments` object into an Array.\n *\n * @returns The arguments as an Array\n * @private\n */\n  var _args = function(argumentsObj) {\n    return _slice.call(argumentsObj, 0);\n  };\n  /**\n * Shallow-copy the owned, enumerable properties of one object over to another, similar to jQuery\'s `$.extend`.\n *\n * @returns The target object, augmented\n * @private\n */\n  var _extend = function() {\n    var i, len, arg, prop, src, copy, args = _args(arguments), target = args[0] || {};\n    for (i = 1, len = args.length; i < len; i++) {\n      if ((arg = args[i]) != null) {\n        for (prop in arg) {\n          if (_hasOwn.call(arg, prop)) {\n            src = target[prop];\n            copy = arg[prop];\n            if (target !== copy && copy !== undefined) {\n              target[prop] = copy;\n            }\n          }\n        }\n      }\n    }\n    return target;\n  };\n  /**\n * Return a deep copy of the source object or array.\n *\n * @returns Object or Array\n * @private\n */\n  var _deepCopy = function(source) {\n    var copy, i, len, prop;\n    if (typeof source !== "object" || source == null || typeof source.nodeType === "number") {\n      copy = source;\n    } else if (typeof source.length === "number") {\n      copy = [];\n      for (i = 0, len = source.length; i < len; i++) {\n        if (_hasOwn.call(source, i)) {\n          copy[i] = _deepCopy(source[i]);\n        }\n      }\n    } else {\n      copy = {};\n      for (prop in source) {\n        if (_hasOwn.call(source, prop)) {\n          copy[prop] = _deepCopy(source[prop]);\n        }\n      }\n    }\n    return copy;\n  };\n  /**\n * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to keep.\n * The inverse of `_omit`, mostly. The big difference is that these properties do NOT need to be enumerable to\n * be kept.\n *\n * @returns A new filtered object.\n * @private\n */\n  var _pick = function(obj, keys) {\n    var newObj = {};\n    for (var i = 0, len = keys.length; i < len; i++) {\n      if (keys[i] in obj) {\n        newObj[keys[i]] = obj[keys[i]];\n      }\n    }\n    return newObj;\n  };\n  /**\n * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to omit.\n * The inverse of `_pick`.\n *\n * @returns A new filtered object.\n * @private\n */\n  var _omit = function(obj, keys) {\n    var newObj = {};\n    for (var prop in obj) {\n      if (keys.indexOf(prop) === -1) {\n        newObj[prop] = obj[prop];\n      }\n    }\n    return newObj;\n  };\n  /**\n * Remove all owned, enumerable properties from an object.\n *\n * @returns The original object without its owned, enumerable properties.\n * @private\n */\n  var _deleteOwnProperties = function(obj) {\n    if (obj) {\n      for (var prop in obj) {\n        if (_hasOwn.call(obj, prop)) {\n          delete obj[prop];\n        }\n      }\n    }\n    return obj;\n  };\n  /**\n * Determine if an element is contained within another element.\n *\n * @returns Boolean\n * @private\n */\n  var _containedBy = function(el, ancestorEl) {\n    if (el && el.nodeType === 1 && el.ownerDocument && ancestorEl && (ancestorEl.nodeType === 1 && ancestorEl.ownerDocument && ancestorEl.ownerDocument === el.ownerDocument || ancestorEl.nodeType === 9 && !ancestorEl.ownerDocument && ancestorEl === el.ownerDocument)) {\n      do {\n        if (el === ancestorEl) {\n          return true;\n        }\n        el = el.parentNode;\n      } while (el);\n    }\n    return false;\n  };\n  /**\n * Get the URL path\'s parent directory.\n *\n * @returns String or `undefined`\n * @private\n */\n  var _getDirPathOfUrl = function(url) {\n    var dir;\n    if (typeof url === "string" && url) {\n      dir = url.split("#")[0].split("?")[0];\n      dir = url.slice(0, url.lastIndexOf("/") + 1);\n    }\n    return dir;\n  };\n  /**\n * Get the current script\'s URL by throwing an `Error` and analyzing it.\n *\n * @returns String or `undefined`\n * @private\n */\n  var _getCurrentScriptUrlFromErrorStack = function(stack) {\n    var url, matches;\n    if (typeof stack === "string" && stack) {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)((?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      if (matches && matches[1]) {\n        url = matches[1];\n      } else {\n        matches = stack.match(/\\)@((?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n        if (matches && matches[1]) {\n          url = matches[1];\n        }\n      }\n    }\n    return url;\n  };\n  /**\n * Get the current script\'s URL by throwing an `Error` and analyzing it.\n *\n * @returns String or `undefined`\n * @private\n */\n  var _getCurrentScriptUrlFromError = function() {\n    var url, err;\n    try {\n      throw new _Error();\n    } catch (e) {\n      err = e;\n    }\n    if (err) {\n      url = err.sourceURL || err.fileName || _getCurrentScriptUrlFromErrorStack(err.stack);\n    }\n    return url;\n  };\n  /**\n * Get the current script\'s URL.\n *\n * @returns String or `undefined`\n * @private\n */\n  var _getCurrentScriptUrl = function() {\n    var jsPath, scripts, i;\n    if (_document.currentScript && (jsPath = _document.currentScript.src)) {\n      return jsPath;\n    }\n    scripts = _document.getElementsByTagName("script");\n    if (scripts.length === 1) {\n      return scripts[0].src || undefined;\n    }\n    if ("readyState" in (scripts[0] || document.createElement("script"))) {\n      for (i = scripts.length; i--; ) {\n        if (scripts[i].readyState === "interactive" && (jsPath = scripts[i].src)) {\n          return jsPath;\n        }\n      }\n    }\n    if (_document.readyState === "loading" && (jsPath = scripts[scripts.length - 1].src)) {\n      return jsPath;\n    }\n    if (jsPath = _getCurrentScriptUrlFromError()) {\n      return jsPath;\n    }\n    return undefined;\n  };\n  /**\n * Get the unanimous parent directory of ALL script tags.\n * If any script tags are either (a) inline or (b) from differing parent\n * directories, this method must return `undefined`.\n *\n * @returns String or `undefined`\n * @private\n */\n  var _getUnanimousScriptParentDir = function() {\n    var i, jsDir, jsPath, scripts = _document.getElementsByTagName("script");\n    for (i = scripts.length; i--; ) {\n      if (!(jsPath = scripts[i].src)) {\n        jsDir = null;\n        break;\n      }\n      jsPath = _getDirPathOfUrl(jsPath);\n      if (jsDir == null) {\n        jsDir = jsPath;\n      } else if (jsDir !== jsPath) {\n        jsDir = null;\n        break;\n      }\n    }\n    return jsDir || undefined;\n  };\n  /**\n * Get the presumed location of the "ZeroClipboard.swf" file, based on the location\n * of the executing JavaScript file (e.g. "ZeroClipboard.js", etc.).\n *\n * @returns String\n * @private\n */\n  var _getDefaultSwfPath = function() {\n    var jsDir = _getDirPathOfUrl(_getCurrentScriptUrl()) || _getUnanimousScriptParentDir() || "";\n    return jsDir + "ZeroClipboard.swf";\n  };\n  /**\n * Is the client\'s operating system some version of Windows?\n *\n * @returns Boolean\n * @private\n */\n  var _isWindows = function() {\n    var isWindowsRegex = /win(dows|[\\s]?(nt|me|ce|xp|vista|[\\d]+))/i;\n    return !!_navigator && (isWindowsRegex.test(_navigator.appVersion || "") || isWindowsRegex.test(_navigator.platform || "") || (_navigator.userAgent || "").indexOf("Windows") !== -1);\n  };\n  /**\n * Keep track of if the page is framed (in an `iframe`). This can never change.\n * @private\n */\n  var _pageIsFramed = function() {\n    return _window.opener == null && (!!_window.top && _window != _window.top || !!_window.parent && _window != _window.parent);\n  }();\n  /**\n * Keep track of if the page is XHTML (vs. HTML), which requires that everything\n * be rendering in XML mode.\n * @private\n */\n  var _pageIsXhtml = _document.documentElement.nodeName === "html";\n  /**\n * Keep track of the state of the Flash object.\n * @private\n */\n  var _flashState = {\n    bridge: null,\n    version: "0.0.0",\n    pluginType: "unknown",\n    sandboxed: null,\n    disabled: null,\n    outdated: null,\n    insecure: null,\n    unavailable: null,\n    degraded: null,\n    deactivated: null,\n    overdue: null,\n    ready: null\n  };\n  /**\n * The minimum Flash Player version required to use ZeroClipboard completely.\n * @readonly\n * @private\n */\n  var _minimumFlashVersion = "11.0.0";\n  /**\n * The ZeroClipboard library version number, as reported by Flash, at the time the SWF was compiled.\n */\n  var _zcSwfVersion;\n  /**\n * Keep track of all event listener registrations.\n * @private\n */\n  var _handlers = {};\n  /**\n * Keep track of the currently activated element.\n * @private\n */\n  var _currentElement;\n  /**\n * Keep track of the element that was activated when a `copy` process started.\n * @private\n */\n  var _copyTarget;\n  /**\n * Keep track of data for the pending clipboard transaction.\n * @private\n */\n  var _clipData = {};\n  /**\n * Keep track of data formats for the pending clipboard transaction.\n * @private\n */\n  var _clipDataFormatMap = null;\n  /**\n * Keep track of the Flash availability check timeout.\n * @private\n */\n  var _flashCheckTimeout = 0;\n  /**\n * Keep track of SWF network errors interval polling.\n * @private\n */\n  var _swfFallbackCheckInterval = 0;\n  /**\n * The `message` store for events\n * @private\n */\n  var _eventMessages = {\n    ready: "Flash communication is established",\n    error: {\n      "flash-sandboxed": "Attempting to run Flash in a sandboxed iframe, which is impossible",\n      "flash-disabled": "Flash is disabled or not installed. May also be attempting to run Flash in a sandboxed iframe, which is impossible.",\n      "flash-outdated": "Flash is too outdated to support ZeroClipboard",\n      "flash-insecure": "Flash will be unable to communicate due to a protocol mismatch between your `swfPath` configuration and the page",\n      "flash-unavailable": "Flash is unable to communicate bidirectionally with JavaScript",\n      "flash-degraded": "Flash is unable to preserve data fidelity when communicating with JavaScript",\n      "flash-deactivated": "Flash is too outdated for your browser and/or is configured as click-to-activate.\\nThis may also mean that the ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity.\\nMay also be attempting to run Flash in a sandboxed iframe, which is impossible.",\n      "flash-overdue": "Flash communication was established but NOT within the acceptable time limit",\n      "version-mismatch": "ZeroClipboard JS version number does not match ZeroClipboard SWF version number",\n      "clipboard-error": "At least one error was thrown while ZeroClipboard was attempting to inject your data into the clipboard",\n      "config-mismatch": "ZeroClipboard configuration does not match Flash\'s reality",\n      "swf-not-found": "The ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity",\n      "browser-unsupported": "The browser does not support the required HTML DOM and JavaScript features"\n    }\n  };\n  /**\n * The `name`s of `error` events that can only occur is Flash has at least\n * been able to load the SWF successfully.\n * @private\n */\n  var _errorsThatOnlyOccurAfterFlashLoads = [ "flash-unavailable", "flash-degraded", "flash-overdue", "version-mismatch", "config-mismatch", "clipboard-error" ];\n  /**\n * The `name`s of `error` events that should likely result in the `_flashState`\n * variable\'s property values being updated.\n * @private\n */\n  var _flashStateErrorNames = [ "flash-sandboxed", "flash-disabled", "flash-outdated", "flash-insecure", "flash-unavailable", "flash-degraded", "flash-deactivated", "flash-overdue" ];\n  /**\n * A RegExp to match the `name` property of `error` events related to Flash.\n * @private\n */\n  var _flashStateErrorNameMatchingRegex = new RegExp("^flash-(" + _flashStateErrorNames.map(function(errorName) {\n    return errorName.replace(/^flash-/, "");\n  }).join("|") + ")$");\n  /**\n * A RegExp to match the `name` property of `error` events related to Flash,\n * which is enabled.\n * @private\n */\n  var _flashStateEnabledErrorNameMatchingRegex = new RegExp("^flash-(" + _flashStateErrorNames.filter(function(errorName) {\n    return errorName !== "flash-disabled";\n  }).map(function(errorName) {\n    return errorName.replace(/^flash-/, "");\n  }).join("|") + ")$");\n  /**\n * ZeroClipboard configuration defaults for the Core module.\n * @private\n */\n  var _globalConfig = {\n    swfPath: _getDefaultSwfPath(),\n    trustedDomains: _window.location.host ? [ _window.location.host ] : [],\n    cacheBust: true,\n    forceEnhancedClipboard: false,\n    flashLoadTimeout: 3e4,\n    autoActivate: true,\n    bubbleEvents: true,\n    fixLineEndings: true,\n    containerId: "global-zeroclipboard-html-bridge",\n    containerClass: "global-zeroclipboard-container",\n    swfObjectId: "global-zeroclipboard-flash-bridge",\n    hoverClass: "zeroclipboard-is-hover",\n    activeClass: "zeroclipboard-is-active",\n    forceHandCursor: false,\n    title: null,\n    zIndex: 999999999\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.config`.\n * @private\n */\n  var _config = function(options) {\n    if (typeof options === "object" && options && !("length" in options)) {\n      _keys(options).forEach(function(prop) {\n        if (/^(?:forceHandCursor|title|zIndex|bubbleEvents|fixLineEndings)$/.test(prop)) {\n          _globalConfig[prop] = options[prop];\n        } else if (_flashState.bridge == null) {\n          if (prop === "containerId" || prop === "swfObjectId") {\n            if (_isValidHtml4Id(options[prop])) {\n              _globalConfig[prop] = options[prop];\n            } else {\n              throw new Error("The specified `" + prop + "` value is not valid as an HTML4 Element ID");\n            }\n          } else {\n            _globalConfig[prop] = options[prop];\n          }\n        }\n      });\n    }\n    if (typeof options === "string" && options) {\n      if (_hasOwn.call(_globalConfig, options)) {\n        return _globalConfig[options];\n      }\n      return;\n    }\n    return _deepCopy(_globalConfig);\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.state`.\n * @private\n */\n  var _state = function() {\n    _detectSandbox();\n    return {\n      browser: _extend(_pick(_navigator, [ "userAgent", "platform", "appName", "appVersion" ]), {\n        isSupported: _isBrowserSupported()\n      }),\n      flash: _omit(_flashState, [ "bridge" ]),\n      zeroclipboard: {\n        version: ZeroClipboard.version,\n        config: ZeroClipboard.config()\n      }\n    };\n  };\n  /**\n * Does this browser support all of the necessary DOM and JS features necessary?\n * @private\n */\n  var _isBrowserSupported = function() {\n    return !!(_document.addEventListener && _window.Object.keys && _window.Array.prototype.map);\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.isFlashUnusable`.\n * @private\n */\n  var _isFlashUnusable = function() {\n    return !!(_flashState.sandboxed || _flashState.disabled || _flashState.outdated || _flashState.unavailable || _flashState.degraded || _flashState.deactivated);\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.on`.\n * @private\n */\n  var _on = function(eventType, listener) {\n    var i, len, events, added = {};\n    if (typeof eventType === "string" && eventType) {\n      events = eventType.toLowerCase().split(/\\s+/);\n    } else if (typeof eventType === "object" && eventType && !("length" in eventType) && typeof listener === "undefined") {\n      _keys(eventType).forEach(function(key) {\n        var listener = eventType[key];\n        if (typeof listener === "function") {\n          ZeroClipboard.on(key, listener);\n        }\n      });\n    }\n    if (events && events.length && listener) {\n      for (i = 0, len = events.length; i < len; i++) {\n        eventType = events[i].replace(/^on/, "");\n        added[eventType] = true;\n        if (!_handlers[eventType]) {\n          _handlers[eventType] = [];\n        }\n        _handlers[eventType].push(listener);\n      }\n      if (added.ready && _flashState.ready) {\n        ZeroClipboard.emit({\n          type: "ready"\n        });\n      }\n      if (added.error) {\n        if (!_isBrowserSupported()) {\n          ZeroClipboard.emit({\n            type: "error",\n            name: "browser-unsupported"\n          });\n        }\n        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {\n          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, "")] === true) {\n            ZeroClipboard.emit({\n              type: "error",\n              name: _flashStateErrorNames[i]\n            });\n            break;\n          }\n        }\n        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {\n          ZeroClipboard.emit({\n            type: "error",\n            name: "version-mismatch",\n            jsVersion: ZeroClipboard.version,\n            swfVersion: _zcSwfVersion\n          });\n        }\n      }\n    }\n    return ZeroClipboard;\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.off`.\n * @private\n */\n  var _off = function(eventType, listener) {\n    var i, len, foundIndex, events, perEventHandlers;\n    if (arguments.length === 0) {\n      events = _keys(_handlers);\n    } else if (typeof eventType === "string" && eventType) {\n      events = eventType.toLowerCase().split(/\\s+/);\n    } else if (typeof eventType === "object" && eventType && !("length" in eventType) && typeof listener === "undefined") {\n      _keys(eventType).forEach(function(key) {\n        var listener = eventType[key];\n        if (typeof listener === "function") {\n          ZeroClipboard.off(key, listener);\n        }\n      });\n    }\n    if (events && events.length) {\n      for (i = 0, len = events.length; i < len; i++) {\n        eventType = events[i].replace(/^on/, "");\n        perEventHandlers = _handlers[eventType];\n        if (perEventHandlers && perEventHandlers.length) {\n          if (listener) {\n            foundIndex = perEventHandlers.indexOf(listener);\n            while (foundIndex !== -1) {\n              perEventHandlers.splice(foundIndex, 1);\n              foundIndex = perEventHandlers.indexOf(listener, foundIndex);\n            }\n          } else {\n            perEventHandlers.length = 0;\n          }\n        }\n      }\n    }\n    return ZeroClipboard;\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.handlers`.\n * @private\n */\n  var _listeners = function(eventType) {\n    var copy;\n    if (typeof eventType === "string" && eventType) {\n      copy = _deepCopy(_handlers[eventType]) || null;\n    } else {\n      copy = _deepCopy(_handlers);\n    }\n    return copy;\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.emit`.\n * @private\n */\n  var _emit = function(event) {\n    var eventCopy, returnVal, tmp;\n    event = _createEvent(event);\n    if (!event) {\n      return;\n    }\n    if (_preprocessEvent(event)) {\n      return;\n    }\n    if (event.type === "ready" && _flashState.overdue === true) {\n      return ZeroClipboard.emit({\n        type: "error",\n        name: "flash-overdue"\n      });\n    }\n    eventCopy = _extend({}, event);\n    _dispatchCallbacks.call(this, eventCopy);\n    if (event.type === "copy") {\n      tmp = _mapClipDataToFlash(_clipData);\n      returnVal = tmp.data;\n      _clipDataFormatMap = tmp.formatMap;\n    }\n    return returnVal;\n  };\n  /**\n * Get the protocol of the configured SWF path.\n * @private\n */\n  var _getSwfPathProtocol = function() {\n    var swfPath = _globalConfig.swfPath || "", swfPathFirstTwoChars = swfPath.slice(0, 2), swfProtocol = swfPath.slice(0, swfPath.indexOf("://") + 1);\n    return swfPathFirstTwoChars === "\\\\\\\\" ? "file:" : swfPathFirstTwoChars === "//" || swfProtocol === "" ? _window.location.protocol : swfProtocol;\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.create`.\n * @private\n */\n  var _create = function() {\n    var maxWait, swfProtocol, previousState = _flashState.sandboxed;\n    if (!_isBrowserSupported()) {\n      _flashState.ready = false;\n      ZeroClipboard.emit({\n        type: "error",\n        name: "browser-unsupported"\n      });\n      return;\n    }\n    _detectSandbox();\n    if (typeof _flashState.ready !== "boolean") {\n      _flashState.ready = false;\n    }\n    if (_flashState.sandboxed !== previousState && _flashState.sandboxed === true) {\n      _flashState.ready = false;\n      ZeroClipboard.emit({\n        type: "error",\n        name: "flash-sandboxed"\n      });\n    } else if (!ZeroClipboard.isFlashUnusable() && _flashState.bridge === null) {\n      swfProtocol = _getSwfPathProtocol();\n      if (swfProtocol && swfProtocol !== _window.location.protocol) {\n        ZeroClipboard.emit({\n          type: "error",\n          name: "flash-insecure"\n        });\n      } else {\n        maxWait = _globalConfig.flashLoadTimeout;\n        if (typeof maxWait === "number" && maxWait >= 0) {\n          _flashCheckTimeout = _setTimeout(function() {\n            if (typeof _flashState.deactivated !== "boolean") {\n              _flashState.deactivated = true;\n            }\n            if (_flashState.deactivated === true) {\n              ZeroClipboard.emit({\n                type: "error",\n                name: "flash-deactivated"\n              });\n            }\n          }, maxWait);\n        }\n        _flashState.overdue = false;\n        _embedSwf();\n      }\n    }\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.destroy`.\n * @private\n */\n  var _destroy = function() {\n    ZeroClipboard.clearData();\n    ZeroClipboard.blur();\n    ZeroClipboard.emit("destroy");\n    _unembedSwf();\n    ZeroClipboard.off();\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.setData`.\n * @private\n */\n  var _setData = function(format, data) {\n    var dataObj;\n    if (typeof format === "object" && format && typeof data === "undefined") {\n      dataObj = format;\n      ZeroClipboard.clearData();\n    } else if (typeof format === "string" && format) {\n      dataObj = {};\n      dataObj[format] = data;\n    } else {\n      return;\n    }\n    for (var dataFormat in dataObj) {\n      if (typeof dataFormat === "string" && dataFormat && _hasOwn.call(dataObj, dataFormat) && typeof dataObj[dataFormat] === "string" && dataObj[dataFormat]) {\n        _clipData[dataFormat] = _fixLineEndings(dataObj[dataFormat]);\n      }\n    }\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.clearData`.\n * @private\n */\n  var _clearData = function(format) {\n    if (typeof format === "undefined") {\n      _deleteOwnProperties(_clipData);\n      _clipDataFormatMap = null;\n    } else if (typeof format === "string" && _hasOwn.call(_clipData, format)) {\n      delete _clipData[format];\n    }\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.getData`.\n * @private\n */\n  var _getData = function(format) {\n    if (typeof format === "undefined") {\n      return _deepCopy(_clipData);\n    } else if (typeof format === "string" && _hasOwn.call(_clipData, format)) {\n      return _clipData[format];\n    }\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.focus`/`ZeroClipboard.activate`.\n * @private\n */\n  var _focus = function(element) {\n    if (!(element && element.nodeType === 1)) {\n      return;\n    }\n    if (_currentElement) {\n      _removeClass(_currentElement, _globalConfig.activeClass);\n      if (_currentElement !== element) {\n        _removeClass(_currentElement, _globalConfig.hoverClass);\n      }\n    }\n    _currentElement = element;\n    _addClass(element, _globalConfig.hoverClass);\n    var newTitle = element.getAttribute("title") || _globalConfig.title;\n    if (typeof newTitle === "string" && newTitle) {\n      var htmlBridge = _getHtmlBridge(_flashState.bridge);\n      if (htmlBridge) {\n        htmlBridge.setAttribute("title", newTitle);\n      }\n    }\n    var useHandCursor = _globalConfig.forceHandCursor === true || _getStyle(element, "cursor") === "pointer";\n    _setHandCursor(useHandCursor);\n    _reposition();\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.blur`/`ZeroClipboard.deactivate`.\n * @private\n */\n  var _blur = function() {\n    var htmlBridge = _getHtmlBridge(_flashState.bridge);\n    if (htmlBridge) {\n      htmlBridge.removeAttribute("title");\n      htmlBridge.style.left = "0px";\n      htmlBridge.style.top = "-9999px";\n      htmlBridge.style.width = "1px";\n      htmlBridge.style.height = "1px";\n    }\n    if (_currentElement) {\n      _removeClass(_currentElement, _globalConfig.hoverClass);\n      _removeClass(_currentElement, _globalConfig.activeClass);\n      _currentElement = null;\n    }\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.activeElement`.\n * @private\n */\n  var _activeElement = function() {\n    return _currentElement || null;\n  };\n  /**\n * Check if a value is a valid HTML4 `ID` or `Name` token.\n * @private\n */\n  var _isValidHtml4Id = function(id) {\n    return typeof id === "string" && id && /^[A-Za-z][A-Za-z0-9_:\\-\\.]*$/.test(id);\n  };\n  /**\n * Create or update an `event` object, based on the `eventType`.\n * @private\n */\n  var _createEvent = function(event) {\n    var eventType;\n    if (typeof event === "string" && event) {\n      eventType = event;\n      event = {};\n    } else if (typeof event === "object" && event && typeof event.type === "string" && event.type) {\n      eventType = event.type;\n    }\n    if (!eventType) {\n      return;\n    }\n    eventType = eventType.toLowerCase();\n    if (!event.target && (/^(copy|aftercopy|_click)$/.test(eventType) || eventType === "error" && event.name === "clipboard-error")) {\n      event.target = _copyTarget;\n    }\n    _extend(event, {\n      type: eventType,\n      target: event.target || _currentElement || null,\n      relatedTarget: event.relatedTarget || null,\n      currentTarget: _flashState && _flashState.bridge || null,\n      timeStamp: event.timeStamp || _now() || null\n    });\n    var msg = _eventMessages[event.type];\n    if (event.type === "error" && event.name && msg) {\n      msg = msg[event.name];\n    }\n    if (msg) {\n      event.message = msg;\n    }\n    if (event.type === "ready") {\n      _extend(event, {\n        target: null,\n        version: _flashState.version\n      });\n    }\n    if (event.type === "error") {\n      if (_flashStateErrorNameMatchingRegex.test(event.name)) {\n        _extend(event, {\n          target: null,\n          minimumVersion: _minimumFlashVersion\n        });\n      }\n      if (_flashStateEnabledErrorNameMatchingRegex.test(event.name)) {\n        _extend(event, {\n          version: _flashState.version\n        });\n      }\n      if (event.name === "flash-insecure") {\n        _extend(event, {\n          pageProtocol: _window.location.protocol,\n          swfProtocol: _getSwfPathProtocol()\n        });\n      }\n    }\n    if (event.type === "copy") {\n      event.clipboardData = {\n        setData: ZeroClipboard.setData,\n        clearData: ZeroClipboard.clearData\n      };\n    }\n    if (event.type === "aftercopy") {\n      event = _mapClipResultsFromFlash(event, _clipDataFormatMap);\n    }\n    if (event.target && !event.relatedTarget) {\n      event.relatedTarget = _getRelatedTarget(event.target);\n    }\n    return _addMouseData(event);\n  };\n  /**\n * Get a relatedTarget from the target\'s `data-clipboard-target` attribute\n * @private\n */\n  var _getRelatedTarget = function(targetEl) {\n    var relatedTargetId = targetEl && targetEl.getAttribute && targetEl.getAttribute("data-clipboard-target");\n    return relatedTargetId ? _document.getElementById(relatedTargetId) : null;\n  };\n  /**\n * Add element and position data to `MouseEvent` instances\n * @private\n */\n  var _addMouseData = function(event) {\n    if (event && /^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {\n      var srcElement = event.target;\n      var fromElement = event.type === "_mouseover" && event.relatedTarget ? event.relatedTarget : undefined;\n      var toElement = event.type === "_mouseout" && event.relatedTarget ? event.relatedTarget : undefined;\n      var pos = _getElementPosition(srcElement);\n      var screenLeft = _window.screenLeft || _window.screenX || 0;\n      var screenTop = _window.screenTop || _window.screenY || 0;\n      var scrollLeft = _document.body.scrollLeft + _document.documentElement.scrollLeft;\n      var scrollTop = _document.body.scrollTop + _document.documentElement.scrollTop;\n      var pageX = pos.left + (typeof event._stageX === "number" ? event._stageX : 0);\n      var pageY = pos.top + (typeof event._stageY === "number" ? event._stageY : 0);\n      var clientX = pageX - scrollLeft;\n      var clientY = pageY - scrollTop;\n      var screenX = screenLeft + clientX;\n      var screenY = screenTop + clientY;\n      var moveX = typeof event.movementX === "number" ? event.movementX : 0;\n      var moveY = typeof event.movementY === "number" ? event.movementY : 0;\n      delete event._stageX;\n      delete event._stageY;\n      _extend(event, {\n        srcElement: srcElement,\n        fromElement: fromElement,\n        toElement: toElement,\n        screenX: screenX,\n        screenY: screenY,\n        pageX: pageX,\n        pageY: pageY,\n        clientX: clientX,\n        clientY: clientY,\n        x: clientX,\n        y: clientY,\n        movementX: moveX,\n        movementY: moveY,\n        offsetX: 0,\n        offsetY: 0,\n        layerX: 0,\n        layerY: 0\n      });\n    }\n    return event;\n  };\n  /**\n * Determine if an event\'s registered handlers should be execute synchronously or asynchronously.\n *\n * @returns {boolean}\n * @private\n */\n  var _shouldPerformAsync = function(event) {\n    var eventType = event && typeof event.type === "string" && event.type || "";\n    return !/^(?:(?:before)?copy|destroy)$/.test(eventType);\n  };\n  /**\n * Control if a callback should be executed asynchronously or not.\n *\n * @returns `undefined`\n * @private\n */\n  var _dispatchCallback = function(func, context, args, async) {\n    if (async) {\n      _setTimeout(function() {\n        func.apply(context, args);\n      }, 0);\n    } else {\n      func.apply(context, args);\n    }\n  };\n  /**\n * Handle the actual dispatching of events to client instances.\n *\n * @returns `undefined`\n * @private\n */\n  var _dispatchCallbacks = function(event) {\n    if (!(typeof event === "object" && event && event.type)) {\n      return;\n    }\n    var async = _shouldPerformAsync(event);\n    var wildcardTypeHandlers = _handlers["*"] || [];\n    var specificTypeHandlers = _handlers[event.type] || [];\n    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);\n    if (handlers && handlers.length) {\n      var i, len, func, context, eventCopy, originalContext = this;\n      for (i = 0, len = handlers.length; i < len; i++) {\n        func = handlers[i];\n        context = originalContext;\n        if (typeof func === "string" && typeof _window[func] === "function") {\n          func = _window[func];\n        }\n        if (typeof func === "object" && func && typeof func.handleEvent === "function") {\n          context = func;\n          func = func.handleEvent;\n        }\n        if (typeof func === "function") {\n          eventCopy = _extend({}, event);\n          _dispatchCallback(func, context, [ eventCopy ], async);\n        }\n      }\n    }\n    return this;\n  };\n  /**\n * Check an `error` event\'s `name` property to see if Flash has\n * already loaded, which rules out possible `iframe` sandboxing.\n * @private\n */\n  var _getSandboxStatusFromErrorEvent = function(event) {\n    var isSandboxed = null;\n    if (_pageIsFramed === false || event && event.type === "error" && event.name && _errorsThatOnlyOccurAfterFlashLoads.indexOf(event.name) !== -1) {\n      isSandboxed = false;\n    }\n    return isSandboxed;\n  };\n  /**\n * Preprocess any special behaviors, reactions, or state changes after receiving this event.\n * Executes only once per event emitted, NOT once per client.\n * @private\n */\n  var _preprocessEvent = function(event) {\n    var element = event.target || _currentElement || null;\n    var sourceIsSwf = event._source === "swf";\n    delete event._source;\n    switch (event.type) {\n     case "error":\n      var isSandboxed = event.name === "flash-sandboxed" || _getSandboxStatusFromErrorEvent(event);\n      if (typeof isSandboxed === "boolean") {\n        _flashState.sandboxed = isSandboxed;\n      }\n      if (event.name === "browser-unsupported") {\n        _extend(_flashState, {\n          disabled: false,\n          outdated: false,\n          unavailable: false,\n          degraded: false,\n          deactivated: false,\n          overdue: false,\n          ready: false\n        });\n      } else if (_flashStateErrorNames.indexOf(event.name) !== -1) {\n        _extend(_flashState, {\n          disabled: event.name === "flash-disabled",\n          outdated: event.name === "flash-outdated",\n          insecure: event.name === "flash-insecure",\n          unavailable: event.name === "flash-unavailable",\n          degraded: event.name === "flash-degraded",\n          deactivated: event.name === "flash-deactivated",\n          overdue: event.name === "flash-overdue",\n          ready: false\n        });\n      } else if (event.name === "version-mismatch") {\n        _zcSwfVersion = event.swfVersion;\n        _extend(_flashState, {\n          disabled: false,\n          outdated: false,\n          insecure: false,\n          unavailable: false,\n          degraded: false,\n          deactivated: false,\n          overdue: false,\n          ready: false\n        });\n      }\n      _clearTimeoutsAndPolling();\n      break;\n\n     case "ready":\n      _zcSwfVersion = event.swfVersion;\n      var wasDeactivated = _flashState.deactivated === true;\n      _extend(_flashState, {\n        sandboxed: false,\n        disabled: false,\n        outdated: false,\n        insecure: false,\n        unavailable: false,\n        degraded: false,\n        deactivated: false,\n        overdue: wasDeactivated,\n        ready: !wasDeactivated\n      });\n      _clearTimeoutsAndPolling();\n      break;\n\n     case "beforecopy":\n      _copyTarget = element;\n      break;\n\n     case "copy":\n      var textContent, htmlContent, targetEl = event.relatedTarget;\n      if (!(_clipData["text/html"] || _clipData["text/plain"]) && targetEl && (htmlContent = targetEl.value || targetEl.outerHTML || targetEl.innerHTML) && (textContent = targetEl.value || targetEl.textContent || targetEl.innerText)) {\n        event.clipboardData.clearData();\n        event.clipboardData.setData("text/plain", textContent);\n        if (htmlContent !== textContent) {\n          event.clipboardData.setData("text/html", htmlContent);\n        }\n      } else if (!_clipData["text/plain"] && event.target && (textContent = event.target.getAttribute("data-clipboard-text"))) {\n        event.clipboardData.clearData();\n        event.clipboardData.setData("text/plain", textContent);\n      }\n      break;\n\n     case "aftercopy":\n      _queueEmitClipboardErrors(event);\n      ZeroClipboard.clearData();\n      if (element && element !== _safeActiveElement() && element.focus) {\n        element.focus();\n      }\n      break;\n\n     case "_mouseover":\n      ZeroClipboard.focus(element);\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {\n        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {\n          _fireMouseEvent(_extend({}, event, {\n            type: "mouseenter",\n            bubbles: false,\n            cancelable: false\n          }));\n        }\n        _fireMouseEvent(_extend({}, event, {\n          type: "mouseover"\n        }));\n      }\n      break;\n\n     case "_mouseout":\n      ZeroClipboard.blur();\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {\n        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {\n          _fireMouseEvent(_extend({}, event, {\n            type: "mouseleave",\n            bubbles: false,\n            cancelable: false\n          }));\n        }\n        _fireMouseEvent(_extend({}, event, {\n          type: "mouseout"\n        }));\n      }\n      break;\n\n     case "_mousedown":\n      _addClass(element, _globalConfig.activeClass);\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {\n        _fireMouseEvent(_extend({}, event, {\n          type: event.type.slice(1)\n        }));\n      }\n      break;\n\n     case "_mouseup":\n      _removeClass(element, _globalConfig.activeClass);\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {\n        _fireMouseEvent(_extend({}, event, {\n          type: event.type.slice(1)\n        }));\n      }\n      break;\n\n     case "_click":\n      _copyTarget = null;\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {\n        _fireMouseEvent(_extend({}, event, {\n          type: event.type.slice(1)\n        }));\n      }\n      break;\n\n     case "_mousemove":\n      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {\n        _fireMouseEvent(_extend({}, event, {\n          type: event.type.slice(1)\n        }));\n      }\n      break;\n    }\n    if (/^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {\n      return true;\n    }\n  };\n  /**\n * Check an "aftercopy" event for clipboard errors and emit a corresponding "error" event.\n * @private\n */\n  var _queueEmitClipboardErrors = function(aftercopyEvent) {\n    if (aftercopyEvent.errors && aftercopyEvent.errors.length > 0) {\n      var errorEvent = _deepCopy(aftercopyEvent);\n      _extend(errorEvent, {\n        type: "error",\n        name: "clipboard-error"\n      });\n      delete errorEvent.success;\n      _setTimeout(function() {\n        ZeroClipboard.emit(errorEvent);\n      }, 0);\n    }\n  };\n  /**\n * Dispatch a synthetic MouseEvent.\n *\n * @returns `undefined`\n * @private\n */\n  var _fireMouseEvent = function(event) {\n    if (!(event && typeof event.type === "string" && event)) {\n      return;\n    }\n    var e, target = event.target || null, doc = target && target.ownerDocument || _document, defaults = {\n      view: doc.defaultView || _window,\n      canBubble: true,\n      cancelable: true,\n      detail: event.type === "click" ? 1 : 0,\n      button: typeof event.which === "number" ? event.which - 1 : typeof event.button === "number" ? event.button : doc.createEvent ? 0 : 1\n    }, args = _extend(defaults, event);\n    if (!target) {\n      return;\n    }\n    if (doc.createEvent && target.dispatchEvent) {\n      args = [ args.type, args.canBubble, args.cancelable, args.view, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.button, args.relatedTarget ];\n      e = doc.createEvent("MouseEvents");\n      if (e.initMouseEvent) {\n        e.initMouseEvent.apply(e, args);\n        e._source = "js";\n        target.dispatchEvent(e);\n      }\n    }\n  };\n  /**\n * Continuously poll the DOM until either:\n *  (a) the fallback content becomes visible, or\n *  (b) we receive an event from SWF (handled elsewhere)\n *\n * IMPORTANT:\n * This is NOT a necessary check but it can result in significantly faster\n * detection of bad `swfPath` configuration and/or network/server issues [in\n * supported browsers] than waiting for the entire `flashLoadTimeout` duration\n * to elapse before detecting that the SWF cannot be loaded. The detection\n * duration can be anywhere from 10-30 times faster [in supported browsers] by\n * using this approach.\n *\n * @returns `undefined`\n * @private\n */\n  var _watchForSwfFallbackContent = function() {\n    var maxWait = _globalConfig.flashLoadTimeout;\n    if (typeof maxWait === "number" && maxWait >= 0) {\n      var pollWait = Math.min(1e3, maxWait / 10);\n      var fallbackContentId = _globalConfig.swfObjectId + "_fallbackContent";\n      _swfFallbackCheckInterval = _setInterval(function() {\n        var el = _document.getElementById(fallbackContentId);\n        if (_isElementVisible(el)) {\n          _clearTimeoutsAndPolling();\n          _flashState.deactivated = null;\n          ZeroClipboard.emit({\n            type: "error",\n            name: "swf-not-found"\n          });\n        }\n      }, pollWait);\n    }\n  };\n  /**\n * Create the HTML bridge element to embed the Flash object into.\n * @private\n */\n  var _createHtmlBridge = function() {\n    var container = _document.createElement("div");\n    container.id = _globalConfig.containerId;\n    container.className = _globalConfig.containerClass;\n    container.style.position = "absolute";\n    container.style.left = "0px";\n    container.style.top = "-9999px";\n    container.style.width = "1px";\n    container.style.height = "1px";\n    container.style.zIndex = "" + _getSafeZIndex(_globalConfig.zIndex);\n    return container;\n  };\n  /**\n * Get the HTML element container that wraps the Flash bridge object/element.\n * @private\n */\n  var _getHtmlBridge = function(flashBridge) {\n    var htmlBridge = flashBridge && flashBridge.parentNode;\n    while (htmlBridge && htmlBridge.nodeName === "OBJECT" && htmlBridge.parentNode) {\n      htmlBridge = htmlBridge.parentNode;\n    }\n    return htmlBridge || null;\n  };\n  /**\n *\n * @private\n */\n  var _escapeXmlValue = function(val) {\n    if (typeof val !== "string" || !val) {\n      return val;\n    }\n    return val.replace(/["&\'<>]/g, function(chr) {\n      switch (chr) {\n       case \'"\':\n        return "&quot;";\n\n       case "&":\n        return "&amp;";\n\n       case "\'":\n        return "&apos;";\n\n       case "<":\n        return "&lt;";\n\n       case ">":\n        return "&gt;";\n\n       default:\n        return chr;\n      }\n    });\n  };\n  /**\n * Create the SWF object.\n *\n * @returns The SWF object reference.\n * @private\n */\n  var _embedSwf = function() {\n    var len, flashBridge = _flashState.bridge, container = _getHtmlBridge(flashBridge);\n    if (!flashBridge) {\n      var allowScriptAccess = _determineScriptAccess(_window.location.host, _globalConfig);\n      var allowNetworking = allowScriptAccess === "never" ? "none" : "all";\n      var flashvars = _vars(_extend({\n        jsVersion: ZeroClipboard.version\n      }, _globalConfig));\n      var swfUrl = _globalConfig.swfPath + _cacheBust(_globalConfig.swfPath, _globalConfig);\n      if (_pageIsXhtml) {\n        swfUrl = _escapeXmlValue(swfUrl);\n      }\n      container = _createHtmlBridge();\n      var divToBeReplaced = _document.createElement("div");\n      container.appendChild(divToBeReplaced);\n      _document.body.appendChild(container);\n      var tmpDiv = _document.createElement("div");\n      var usingActiveX = _flashState.pluginType === "activex";\n      tmpDiv.innerHTML = \'<object id="\' + _globalConfig.swfObjectId + \'" name="\' + _globalConfig.swfObjectId + \'" \' + \'width="100%" height="100%" \' + (usingActiveX ? \'classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"\' : \'type="application/x-shockwave-flash" data="\' + swfUrl + \'"\') + ">" + (usingActiveX ? \'<param name="movie" value="\' + swfUrl + \'"/>\' : "") + \'<param name="allowScriptAccess" value="\' + allowScriptAccess + \'"/>\' + \'<param name="allowNetworking" value="\' + allowNetworking + \'"/>\' + \'<param name="menu" value="false"/>\' + \'<param name="wmode" value="transparent"/>\' + \'<param name="flashvars" value="\' + flashvars + \'"/>\' + \'<div id="\' + _globalConfig.swfObjectId + \'_fallbackContent">&nbsp;</div>\' + "</object>";\n      flashBridge = tmpDiv.firstChild;\n      tmpDiv = null;\n      _unwrap(flashBridge).ZeroClipboard = ZeroClipboard;\n      container.replaceChild(flashBridge, divToBeReplaced);\n      _watchForSwfFallbackContent();\n    }\n    if (!flashBridge) {\n      flashBridge = _document[_globalConfig.swfObjectId];\n      if (flashBridge && (len = flashBridge.length)) {\n        flashBridge = flashBridge[len - 1];\n      }\n      if (!flashBridge && container) {\n        flashBridge = container.firstChild;\n      }\n    }\n    _flashState.bridge = flashBridge || null;\n    return flashBridge;\n  };\n  /**\n * Destroy the SWF object.\n * @private\n */\n  var _unembedSwf = function() {\n    var flashBridge = _flashState.bridge;\n    if (flashBridge) {\n      var htmlBridge = _getHtmlBridge(flashBridge);\n      if (htmlBridge) {\n        if (_flashState.pluginType === "activex" && "readyState" in flashBridge) {\n          flashBridge.style.display = "none";\n          (function removeSwfFromIE() {\n            if (flashBridge.readyState === 4) {\n              for (var prop in flashBridge) {\n                if (typeof flashBridge[prop] === "function") {\n                  flashBridge[prop] = null;\n                }\n              }\n              if (flashBridge.parentNode) {\n                flashBridge.parentNode.removeChild(flashBridge);\n              }\n              if (htmlBridge.parentNode) {\n                htmlBridge.parentNode.removeChild(htmlBridge);\n              }\n            } else {\n              _setTimeout(removeSwfFromIE, 10);\n            }\n          })();\n        } else {\n          if (flashBridge.parentNode) {\n            flashBridge.parentNode.removeChild(flashBridge);\n          }\n          if (htmlBridge.parentNode) {\n            htmlBridge.parentNode.removeChild(htmlBridge);\n          }\n        }\n      }\n      _clearTimeoutsAndPolling();\n      _flashState.ready = null;\n      _flashState.bridge = null;\n      _flashState.deactivated = null;\n      _flashState.insecure = null;\n      _zcSwfVersion = undefined;\n    }\n  };\n  /**\n * Map the data format names of the "clipData" to Flash-friendly names.\n *\n * @returns A new transformed object.\n * @private\n */\n  var _mapClipDataToFlash = function(clipData) {\n    var newClipData = {}, formatMap = {};\n    if (!(typeof clipData === "object" && clipData)) {\n      return;\n    }\n    for (var dataFormat in clipData) {\n      if (dataFormat && _hasOwn.call(clipData, dataFormat) && typeof clipData[dataFormat] === "string" && clipData[dataFormat]) {\n        switch (dataFormat.toLowerCase()) {\n         case "text/plain":\n         case "text":\n         case "air:text":\n         case "flash:text":\n          newClipData.text = clipData[dataFormat];\n          formatMap.text = dataFormat;\n          break;\n\n         case "text/html":\n         case "html":\n         case "air:html":\n         case "flash:html":\n          newClipData.html = clipData[dataFormat];\n          formatMap.html = dataFormat;\n          break;\n\n         case "application/rtf":\n         case "text/rtf":\n         case "rtf":\n         case "richtext":\n         case "air:rtf":\n         case "flash:rtf":\n          newClipData.rtf = clipData[dataFormat];\n          formatMap.rtf = dataFormat;\n          break;\n\n         default:\n          break;\n        }\n      }\n    }\n    return {\n      data: newClipData,\n      formatMap: formatMap\n    };\n  };\n  /**\n * Map the data format names from Flash-friendly names back to their original "clipData" names (via a format mapping).\n *\n * @returns A new transformed object.\n * @private\n */\n  var _mapClipResultsFromFlash = function(clipResults, formatMap) {\n    if (!(typeof clipResults === "object" && clipResults && typeof formatMap === "object" && formatMap)) {\n      return clipResults;\n    }\n    var newResults = {};\n    for (var prop in clipResults) {\n      if (_hasOwn.call(clipResults, prop)) {\n        if (prop === "errors") {\n          newResults[prop] = clipResults[prop] ? clipResults[prop].slice() : [];\n          for (var i = 0, len = newResults[prop].length; i < len; i++) {\n            newResults[prop][i].format = formatMap[newResults[prop][i].format];\n          }\n        } else if (prop !== "success" && prop !== "data") {\n          newResults[prop] = clipResults[prop];\n        } else {\n          newResults[prop] = {};\n          var tmpHash = clipResults[prop];\n          for (var dataFormat in tmpHash) {\n            if (dataFormat && _hasOwn.call(tmpHash, dataFormat) && _hasOwn.call(formatMap, dataFormat)) {\n              newResults[prop][formatMap[dataFormat]] = tmpHash[dataFormat];\n            }\n          }\n        }\n      }\n    }\n    return newResults;\n  };\n  /**\n * Will look at a path, and will create a "?noCache={time}" or "&noCache={time}"\n * query param string to return. Does NOT append that string to the original path.\n * This is useful because ExternalInterface often breaks when a Flash SWF is cached.\n *\n * @returns The `noCache` query param with necessary "?"/"&" prefix.\n * @private\n */\n  var _cacheBust = function(path, options) {\n    var cacheBust = options == null || options && options.cacheBust === true;\n    if (cacheBust) {\n      return (path.indexOf("?") === -1 ? "?" : "&") + "noCache=" + _now();\n    } else {\n      return "";\n    }\n  };\n  /**\n * Creates a query string for the FlashVars param.\n * Does NOT include the cache-busting query param.\n *\n * @returns FlashVars query string\n * @private\n */\n  var _vars = function(options) {\n    var i, len, domain, domains, str = "", trustedOriginsExpanded = [];\n    if (options.trustedDomains) {\n      if (typeof options.trustedDomains === "string") {\n        domains = [ options.trustedDomains ];\n      } else if (typeof options.trustedDomains === "object" && "length" in options.trustedDomains) {\n        domains = options.trustedDomains;\n      }\n    }\n    if (domains && domains.length) {\n      for (i = 0, len = domains.length; i < len; i++) {\n        if (_hasOwn.call(domains, i) && domains[i] && typeof domains[i] === "string") {\n          domain = _extractDomain(domains[i]);\n          if (!domain) {\n            continue;\n          }\n          if (domain === "*") {\n            trustedOriginsExpanded.length = 0;\n            trustedOriginsExpanded.push(domain);\n            break;\n          }\n          trustedOriginsExpanded.push.apply(trustedOriginsExpanded, [ domain, "//" + domain, _window.location.protocol + "//" + domain ]);\n        }\n      }\n    }\n    if (trustedOriginsExpanded.length) {\n      str += "trustedOrigins=" + _encodeURIComponent(trustedOriginsExpanded.join(","));\n    }\n    if (options.forceEnhancedClipboard === true) {\n      str += (str ? "&" : "") + "forceEnhancedClipboard=true";\n    }\n    if (typeof options.swfObjectId === "string" && options.swfObjectId) {\n      str += (str ? "&" : "") + "swfObjectId=" + _encodeURIComponent(options.swfObjectId);\n    }\n    if (typeof options.jsVersion === "string" && options.jsVersion) {\n      str += (str ? "&" : "") + "jsVersion=" + _encodeURIComponent(options.jsVersion);\n    }\n    return str;\n  };\n  /**\n * Extract the domain (e.g. "github.com") from an origin (e.g. "https://github.com") or\n * URL (e.g. "https://github.com/zeroclipboard/zeroclipboard/").\n *\n * @returns the domain\n * @private\n */\n  var _extractDomain = function(originOrUrl) {\n    if (originOrUrl == null || originOrUrl === "") {\n      return null;\n    }\n    originOrUrl = originOrUrl.replace(/^\\s+|\\s+$/g, "");\n    if (originOrUrl === "") {\n      return null;\n    }\n    var protocolIndex = originOrUrl.indexOf("//");\n    originOrUrl = protocolIndex === -1 ? originOrUrl : originOrUrl.slice(protocolIndex + 2);\n    var pathIndex = originOrUrl.indexOf("/");\n    originOrUrl = pathIndex === -1 ? originOrUrl : protocolIndex === -1 || pathIndex === 0 ? null : originOrUrl.slice(0, pathIndex);\n    if (originOrUrl && originOrUrl.slice(-4).toLowerCase() === ".swf") {\n      return null;\n    }\n    return originOrUrl || null;\n  };\n  /**\n * Set `allowScriptAccess` based on `trustedDomains` and `window.location.host` vs. `swfPath`.\n *\n * @returns The appropriate script access level.\n * @private\n */\n  var _determineScriptAccess = function() {\n    var _extractAllDomains = function(origins) {\n      var i, len, tmp, resultsArray = [];\n      if (typeof origins === "string") {\n        origins = [ origins ];\n      }\n      if (!(typeof origins === "object" && origins && typeof origins.length === "number")) {\n        return resultsArray;\n      }\n      for (i = 0, len = origins.length; i < len; i++) {\n        if (_hasOwn.call(origins, i) && (tmp = _extractDomain(origins[i]))) {\n          if (tmp === "*") {\n            resultsArray.length = 0;\n            resultsArray.push("*");\n            break;\n          }\n          if (resultsArray.indexOf(tmp) === -1) {\n            resultsArray.push(tmp);\n          }\n        }\n      }\n      return resultsArray;\n    };\n    return function(currentDomain, configOptions) {\n      var swfDomain = _extractDomain(configOptions.swfPath);\n      if (swfDomain === null) {\n        swfDomain = currentDomain;\n      }\n      var trustedDomains = _extractAllDomains(configOptions.trustedDomains);\n      var len = trustedDomains.length;\n      if (len > 0) {\n        if (len === 1 && trustedDomains[0] === "*") {\n          return "always";\n        }\n        if (trustedDomains.indexOf(currentDomain) !== -1) {\n          if (len === 1 && currentDomain === swfDomain) {\n            return "sameDomain";\n          }\n          return "always";\n        }\n      }\n      return "never";\n    };\n  }();\n  /**\n * Get the currently active/focused DOM element.\n *\n * @returns the currently active/focused element, or `null`\n * @private\n */\n  var _safeActiveElement = function() {\n    try {\n      return _document.activeElement;\n    } catch (err) {\n      return null;\n    }\n  };\n  /**\n * Add a class to an element, if it doesn\'t already have it.\n *\n * @returns The element, with its new class added.\n * @private\n */\n  var _addClass = function(element, value) {\n    var c, cl, className, classNames = [];\n    if (typeof value === "string" && value) {\n      classNames = value.split(/\\s+/);\n    }\n    if (element && element.nodeType === 1 && classNames.length > 0) {\n      className = (" " + (element.className || "") + " ").replace(/[\\t\\r\\n\\f]/g, " ");\n      for (c = 0, cl = classNames.length; c < cl; c++) {\n        if (className.indexOf(" " + classNames[c] + " ") === -1) {\n          className += classNames[c] + " ";\n        }\n      }\n      className = className.replace(/^\\s+|\\s+$/g, "");\n      if (className !== element.className) {\n        element.className = className;\n      }\n    }\n    return element;\n  };\n  /**\n * Remove a class from an element, if it has it.\n *\n * @returns The element, with its class removed.\n * @private\n */\n  var _removeClass = function(element, value) {\n    var c, cl, className, classNames = [];\n    if (typeof value === "string" && value) {\n      classNames = value.split(/\\s+/);\n    }\n    if (element && element.nodeType === 1 && classNames.length > 0) {\n      if (element.className) {\n        className = (" " + element.className + " ").replace(/[\\t\\r\\n\\f]/g, " ");\n        for (c = 0, cl = classNames.length; c < cl; c++) {\n          className = className.replace(" " + classNames[c] + " ", " ");\n        }\n        className = className.replace(/^\\s+|\\s+$/g, "");\n        if (className !== element.className) {\n          element.className = className;\n        }\n      }\n    }\n    return element;\n  };\n  /**\n * Attempt to interpret the element\'s CSS styling. If `prop` is `"cursor"`,\n * then we assume that it should be a hand ("pointer") cursor if the element\n * is an anchor element ("a" tag).\n *\n * @returns The computed style property.\n * @private\n */\n  var _getStyle = function(el, prop) {\n    var value = _getComputedStyle(el, null).getPropertyValue(prop);\n    if (prop === "cursor") {\n      if (!value || value === "auto") {\n        if (el.nodeName === "A") {\n          return "pointer";\n        }\n      }\n    }\n    return value;\n  };\n  /**\n * Get the absolutely positioned coordinates of a DOM element.\n *\n * @returns Object containing the element\'s position, width, and height.\n * @private\n */\n  var _getElementPosition = function(el) {\n    var pos = {\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0\n    };\n    if (el.getBoundingClientRect) {\n      var elRect = el.getBoundingClientRect();\n      var pageXOffset = _window.pageXOffset;\n      var pageYOffset = _window.pageYOffset;\n      var leftBorderWidth = _document.documentElement.clientLeft || 0;\n      var topBorderWidth = _document.documentElement.clientTop || 0;\n      var leftBodyOffset = 0;\n      var topBodyOffset = 0;\n      if (_getStyle(_document.body, "position") === "relative") {\n        var bodyRect = _document.body.getBoundingClientRect();\n        var htmlRect = _document.documentElement.getBoundingClientRect();\n        leftBodyOffset = bodyRect.left - htmlRect.left || 0;\n        topBodyOffset = bodyRect.top - htmlRect.top || 0;\n      }\n      pos.left = elRect.left + pageXOffset - leftBorderWidth - leftBodyOffset;\n      pos.top = elRect.top + pageYOffset - topBorderWidth - topBodyOffset;\n      pos.width = "width" in elRect ? elRect.width : elRect.right - elRect.left;\n      pos.height = "height" in elRect ? elRect.height : elRect.bottom - elRect.top;\n    }\n    return pos;\n  };\n  /**\n * Determine is an element is visible somewhere within the document (page).\n *\n * @returns Boolean\n * @private\n */\n  var _isElementVisible = function(el) {\n    if (!el) {\n      return false;\n    }\n    var styles = _getComputedStyle(el, null);\n    if (!styles) {\n      return false;\n    }\n    var hasCssHeight = _parseFloat(styles.height) > 0;\n    var hasCssWidth = _parseFloat(styles.width) > 0;\n    var hasCssTop = _parseFloat(styles.top) >= 0;\n    var hasCssLeft = _parseFloat(styles.left) >= 0;\n    var cssKnows = hasCssHeight && hasCssWidth && hasCssTop && hasCssLeft;\n    var rect = cssKnows ? null : _getElementPosition(el);\n    var isVisible = styles.display !== "none" && styles.visibility !== "collapse" && (cssKnows || !!rect && (hasCssHeight || rect.height > 0) && (hasCssWidth || rect.width > 0) && (hasCssTop || rect.top >= 0) && (hasCssLeft || rect.left >= 0));\n    return isVisible;\n  };\n  /**\n * Clear all existing timeouts and interval polling delegates.\n *\n * @returns `undefined`\n * @private\n */\n  var _clearTimeoutsAndPolling = function() {\n    _clearTimeout(_flashCheckTimeout);\n    _flashCheckTimeout = 0;\n    _clearInterval(_swfFallbackCheckInterval);\n    _swfFallbackCheckInterval = 0;\n  };\n  /**\n * Reposition the Flash object to cover the currently activated element.\n *\n * @returns `undefined`\n * @private\n */\n  var _reposition = function() {\n    var htmlBridge;\n    if (_currentElement && (htmlBridge = _getHtmlBridge(_flashState.bridge))) {\n      var pos = _getElementPosition(_currentElement);\n      _extend(htmlBridge.style, {\n        width: pos.width + "px",\n        height: pos.height + "px",\n        top: pos.top + "px",\n        left: pos.left + "px",\n        zIndex: "" + _getSafeZIndex(_globalConfig.zIndex)\n      });\n    }\n  };\n  /**\n * Sends a signal to the Flash object to display the hand cursor if `true`.\n *\n * @returns `undefined`\n * @private\n */\n  var _setHandCursor = function(enabled) {\n    if (_flashState.ready === true) {\n      if (_flashState.bridge && typeof _flashState.bridge.setHandCursor === "function") {\n        _flashState.bridge.setHandCursor(enabled);\n      } else {\n        _flashState.ready = false;\n      }\n    }\n  };\n  /**\n * Get a safe value for `zIndex`\n *\n * @returns an integer, or "auto"\n * @private\n */\n  var _getSafeZIndex = function(val) {\n    if (/^(?:auto|inherit)$/.test(val)) {\n      return val;\n    }\n    var zIndex;\n    if (typeof val === "number" && !_isNaN(val)) {\n      zIndex = val;\n    } else if (typeof val === "string") {\n      zIndex = _getSafeZIndex(_parseInt(val, 10));\n    }\n    return typeof zIndex === "number" ? zIndex : "auto";\n  };\n  /**\n * Ensure OS-compliant line endings, i.e. "\\r\\n" on Windows, "\\n" elsewhere\n *\n * @returns string\n * @private\n */\n  var _fixLineEndings = function(content) {\n    var replaceRegex = /(\\r\\n|\\r|\\n)/g;\n    if (typeof content === "string" && _globalConfig.fixLineEndings === true) {\n      if (_isWindows()) {\n        if (/((^|[^\\r])\\n|\\r([^\\n]|$))/.test(content)) {\n          content = content.replace(replaceRegex, "\\r\\n");\n        }\n      } else if (/\\r/.test(content)) {\n        content = content.replace(replaceRegex, "\\n");\n      }\n    }\n    return content;\n  };\n  /**\n * Attempt to detect if ZeroClipboard is executing inside of a sandboxed iframe.\n * If it is, Flash Player cannot be used, so ZeroClipboard is dead in the water.\n *\n * @see {@link http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Dec/0002.html}\n * @see {@link https://github.com/zeroclipboard/zeroclipboard/issues/511}\n * @see {@link http://zeroclipboard.org/test-iframes.html}\n *\n * @returns `true` (is sandboxed), `false` (is not sandboxed), or `null` (uncertain)\n * @private\n */\n  var _detectSandbox = function(doNotReassessFlashSupport) {\n    var effectiveScriptOrigin, frame, frameError, previousState = _flashState.sandboxed, isSandboxed = null;\n    doNotReassessFlashSupport = doNotReassessFlashSupport === true;\n    if (_pageIsFramed === false) {\n      isSandboxed = false;\n    } else {\n      try {\n        frame = window.frameElement || null;\n      } catch (e) {\n        frameError = {\n          name: e.name,\n          message: e.message\n        };\n      }\n      if (frame && frame.nodeType === 1 && frame.nodeName === "IFRAME") {\n        try {\n          isSandboxed = frame.hasAttribute("sandbox");\n        } catch (e) {\n          isSandboxed = null;\n        }\n      } else {\n        try {\n          effectiveScriptOrigin = document.domain || null;\n        } catch (e) {\n          effectiveScriptOrigin = null;\n        }\n        if (effectiveScriptOrigin === null || frameError && frameError.name === "SecurityError" && /(^|[\\s\\(\\[@])sandbox(es|ed|ing|[\\s\\.,!\\)\\]@]|$)/.test(frameError.message.toLowerCase())) {\n          isSandboxed = true;\n        }\n      }\n    }\n    _flashState.sandboxed = isSandboxed;\n    if (previousState !== isSandboxed && !doNotReassessFlashSupport) {\n      _detectFlashSupport(_ActiveXObject);\n    }\n    return isSandboxed;\n  };\n  /**\n * Detect the Flash Player status, version, and plugin type.\n *\n * @see {@link https://code.google.com/p/doctype-mirror/wiki/ArticleDetectFlash#The_code}\n * @see {@link http://stackoverflow.com/questions/12866060/detecting-pepper-ppapi-flash-with-javascript}\n *\n * @returns `undefined`\n * @private\n */\n  var _detectFlashSupport = function(ActiveXObject) {\n    var plugin, ax, mimeType, hasFlash = false, isActiveX = false, isPPAPI = false, flashVersion = "";\n    /**\n   * Derived from Apple\'s suggested sniffer.\n   * @param {String} desc e.g. "Shockwave Flash 7.0 r61"\n   * @returns {String} "7.0.61"\n   * @private\n   */\n    function parseFlashVersion(desc) {\n      var matches = desc.match(/[\\d]+/g);\n      matches.length = 3;\n      return matches.join(".");\n    }\n    function isPepperFlash(flashPlayerFileName) {\n      return !!flashPlayerFileName && (flashPlayerFileName = flashPlayerFileName.toLowerCase()) && (/^(pepflashplayer\\.dll|libpepflashplayer\\.so|pepperflashplayer\\.plugin)$/.test(flashPlayerFileName) || flashPlayerFileName.slice(-13) === "chrome.plugin");\n    }\n    function inspectPlugin(plugin) {\n      if (plugin) {\n        hasFlash = true;\n        if (plugin.version) {\n          flashVersion = parseFlashVersion(plugin.version);\n        }\n        if (!flashVersion && plugin.description) {\n          flashVersion = parseFlashVersion(plugin.description);\n        }\n        if (plugin.filename) {\n          isPPAPI = isPepperFlash(plugin.filename);\n        }\n      }\n    }\n    if (_navigator.plugins && _navigator.plugins.length) {\n      plugin = _navigator.plugins["Shockwave Flash"];\n      inspectPlugin(plugin);\n      if (_navigator.plugins["Shockwave Flash 2.0"]) {\n        hasFlash = true;\n        flashVersion = "2.0.0.11";\n      }\n    } else if (_navigator.mimeTypes && _navigator.mimeTypes.length) {\n      mimeType = _navigator.mimeTypes["application/x-shockwave-flash"];\n      plugin = mimeType && mimeType.enabledPlugin;\n      inspectPlugin(plugin);\n    } else if (typeof ActiveXObject !== "undefined") {\n      isActiveX = true;\n      try {\n        ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");\n        hasFlash = true;\n        flashVersion = parseFlashVersion(ax.GetVariable("$version"));\n      } catch (e1) {\n        try {\n          ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");\n          hasFlash = true;\n          flashVersion = "6.0.21";\n        } catch (e2) {\n          try {\n            ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");\n            hasFlash = true;\n            flashVersion = parseFlashVersion(ax.GetVariable("$version"));\n          } catch (e3) {\n            isActiveX = false;\n          }\n        }\n      }\n    }\n    _flashState.disabled = hasFlash !== true;\n    _flashState.outdated = flashVersion && _parseFloat(flashVersion) < _parseFloat(_minimumFlashVersion);\n    _flashState.version = flashVersion || "0.0.0";\n    _flashState.pluginType = isPPAPI ? "pepper" : isActiveX ? "activex" : hasFlash ? "netscape" : "unknown";\n  };\n  /**\n * Invoke the Flash detection algorithms immediately upon inclusion so we\'re not waiting later.\n */\n  _detectFlashSupport(_ActiveXObject);\n  /**\n * Always assess the `sandboxed` state of the page at important Flash-related moments.\n */\n  _detectSandbox(true);\n  /**\n * A shell constructor for `ZeroClipboard` client instances.\n *\n * @constructor\n */\n  var ZeroClipboard = function() {\n    if (!(this instanceof ZeroClipboard)) {\n      return new ZeroClipboard();\n    }\n    if (typeof ZeroClipboard._createClient === "function") {\n      ZeroClipboard._createClient.apply(this, _args(arguments));\n    }\n  };\n  /**\n * The ZeroClipboard library\'s version number.\n *\n * @static\n * @readonly\n * @property {string}\n */\n  ZeroClipboard.version = "2.3.0";\n  /**\n * Update or get a copy of the ZeroClipboard global configuration.\n * Returns a copy of the current/updated configuration.\n *\n * @returns Object\n * @static\n */\n  ZeroClipboard.config = function() {\n    return _config.apply(this, _args(arguments));\n  };\n  /**\n * Diagnostic method that describes the state of the browser, Flash Player, and ZeroClipboard.\n *\n * @returns Object\n * @static\n */\n  ZeroClipboard.state = function() {\n    return _state.apply(this, _args(arguments));\n  };\n  /**\n * Check if Flash is unusable for any reason: disabled, outdated, deactivated, etc.\n *\n * @returns Boolean\n * @static\n */\n  ZeroClipboard.isFlashUnusable = function() {\n    return _isFlashUnusable.apply(this, _args(arguments));\n  };\n  /**\n * Register an event listener.\n *\n * @returns `ZeroClipboard`\n * @static\n */\n  ZeroClipboard.on = function() {\n    return _on.apply(this, _args(arguments));\n  };\n  /**\n * Unregister an event listener.\n * If no `listener` function/object is provided, it will unregister all listeners for the provided `eventType`.\n * If no `eventType` is provided, it will unregister all listeners for every event type.\n *\n * @returns `ZeroClipboard`\n * @static\n */\n  ZeroClipboard.off = function() {\n    return _off.apply(this, _args(arguments));\n  };\n  /**\n * Retrieve event listeners for an `eventType`.\n * If no `eventType` is provided, it will retrieve all listeners for every event type.\n *\n * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`\n */\n  ZeroClipboard.handlers = function() {\n    return _listeners.apply(this, _args(arguments));\n  };\n  /**\n * Event emission receiver from the Flash object, forwarding to any registered JavaScript event listeners.\n *\n * @returns For the "copy" event, returns the Flash-friendly "clipData" object; otherwise `undefined`.\n * @static\n */\n  ZeroClipboard.emit = function() {\n    return _emit.apply(this, _args(arguments));\n  };\n  /**\n * Create and embed the Flash object.\n *\n * @returns The Flash object\n * @static\n */\n  ZeroClipboard.create = function() {\n    return _create.apply(this, _args(arguments));\n  };\n  /**\n * Self-destruct and clean up everything, including the embedded Flash object.\n *\n * @returns `undefined`\n * @static\n */\n  ZeroClipboard.destroy = function() {\n    return _destroy.apply(this, _args(arguments));\n  };\n  /**\n * Set the pending data for clipboard injection.\n *\n * @returns `undefined`\n * @static\n */\n  ZeroClipboard.setData = function() {\n    return _setData.apply(this, _args(arguments));\n  };\n  /**\n * Clear the pending data for clipboard injection.\n * If no `format` is provided, all pending data formats will be cleared.\n *\n * @returns `undefined`\n * @static\n */\n  ZeroClipboard.clearData = function() {\n    return _clearData.apply(this, _args(arguments));\n  };\n  /**\n * Get a copy of the pending data for clipboard injection.\n * If no `format` is provided, a copy of ALL pending data formats will be returned.\n *\n * @returns `String` or `Object`\n * @static\n */\n  ZeroClipboard.getData = function() {\n    return _getData.apply(this, _args(arguments));\n  };\n  /**\n * Sets the current HTML object that the Flash object should overlay. This will put the global\n * Flash object on top of the current element; depending on the setup, this may also set the\n * pending clipboard text data as well as the Flash object\'s wrapping element\'s title attribute\n * based on the underlying HTML element and ZeroClipboard configuration.\n *\n * @returns `undefined`\n * @static\n */\n  ZeroClipboard.focus = ZeroClipboard.activate = function() {\n    return _focus.apply(this, _args(arguments));\n  };\n  /**\n * Un-overlays the Flash object. This will put the global Flash object off-screen; depending on\n * the setup, this may also unset the Flash object\'s wrapping element\'s title attribute based on\n * the underlying HTML element and ZeroClipboard configuration.\n *\n * @returns `undefined`\n * @static\n */\n  ZeroClipboard.blur = ZeroClipboard.deactivate = function() {\n    return _blur.apply(this, _args(arguments));\n  };\n  /**\n * Returns the currently focused/"activated" HTML element that the Flash object is wrapping.\n *\n * @returns `HTMLElement` or `null`\n * @static\n */\n  ZeroClipboard.activeElement = function() {\n    return _activeElement.apply(this, _args(arguments));\n  };\n  /**\n * Keep track of the ZeroClipboard client instance counter.\n */\n  var _clientIdCounter = 0;\n  /**\n * Keep track of the state of the client instances.\n *\n * Entry structure:\n *   _clientMeta[client.id] = {\n *     instance: client,\n *     elements: [],\n *     handlers: {},\n *     coreWildcardHandler: function(event) { return client.emit(event); }\n *   };\n */\n  var _clientMeta = {};\n  /**\n * Keep track of the ZeroClipboard clipped elements counter.\n */\n  var _elementIdCounter = 0;\n  /**\n * Keep track of the state of the clipped element relationships to clients.\n *\n * Entry structure:\n *   _elementMeta[element.zcClippingId] = [client1.id, client2.id];\n */\n  var _elementMeta = {};\n  /**\n * Keep track of the state of the mouse event handlers for clipped elements.\n *\n * Entry structure:\n *   _mouseHandlers[element.zcClippingId] = {\n *     mouseover:  function(event) {},\n *     mouseout:   function(event) {},\n *     mouseenter: function(event) {},\n *     mouseleave: function(event) {},\n *     mousemove:  function(event) {}\n *   };\n */\n  var _mouseHandlers = {};\n  /**\n * Extending the ZeroClipboard configuration defaults for the Client module.\n */\n  _extend(_globalConfig, {\n    autoActivate: true\n  });\n  /**\n * The real constructor for `ZeroClipboard` client instances.\n * @private\n */\n  var _clientConstructor = function(elements) {\n    var meta, client = this;\n    client.id = "" + _clientIdCounter++;\n    meta = {\n      instance: client,\n      elements: [],\n      handlers: {},\n      coreWildcardHandler: function(event) {\n        return client.emit(event);\n      }\n    };\n    _clientMeta[client.id] = meta;\n    if (elements) {\n      client.clip(elements);\n    }\n    ZeroClipboard.on("*", meta.coreWildcardHandler);\n    ZeroClipboard.on("destroy", function() {\n      client.destroy();\n    });\n    ZeroClipboard.create();\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.Client.prototype.on`.\n * @private\n */\n  var _clientOn = function(eventType, listener) {\n    var i, len, events, added = {}, client = this, meta = _clientMeta[client.id], handlers = meta && meta.handlers;\n    if (!meta) {\n      throw new Error("Attempted to add new listener(s) to a destroyed ZeroClipboard client instance");\n    }\n    if (typeof eventType === "string" && eventType) {\n      events = eventType.toLowerCase().split(/\\s+/);\n    } else if (typeof eventType === "object" && eventType && !("length" in eventType) && typeof listener === "undefined") {\n      _keys(eventType).forEach(function(key) {\n        var listener = eventType[key];\n        if (typeof listener === "function") {\n          client.on(key, listener);\n        }\n      });\n    }\n    if (events && events.length && listener) {\n      for (i = 0, len = events.length; i < len; i++) {\n        eventType = events[i].replace(/^on/, "");\n        added[eventType] = true;\n        if (!handlers[eventType]) {\n          handlers[eventType] = [];\n        }\n        handlers[eventType].push(listener);\n      }\n      if (added.ready && _flashState.ready) {\n        this.emit({\n          type: "ready",\n          client: this\n        });\n      }\n      if (added.error) {\n        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {\n          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, "")]) {\n            this.emit({\n              type: "error",\n              name: _flashStateErrorNames[i],\n              client: this\n            });\n            break;\n          }\n        }\n        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {\n          this.emit({\n            type: "error",\n            name: "version-mismatch",\n            jsVersion: ZeroClipboard.version,\n            swfVersion: _zcSwfVersion\n          });\n        }\n      }\n    }\n    return client;\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.Client.prototype.off`.\n * @private\n */\n  var _clientOff = function(eventType, listener) {\n    var i, len, foundIndex, events, perEventHandlers, client = this, meta = _clientMeta[client.id], handlers = meta && meta.handlers;\n    if (!handlers) {\n      return client;\n    }\n    if (arguments.length === 0) {\n      events = _keys(handlers);\n    } else if (typeof eventType === "string" && eventType) {\n      events = eventType.split(/\\s+/);\n    } else if (typeof eventType === "object" && eventType && !("length" in eventType) && typeof listener === "undefined") {\n      _keys(eventType).forEach(function(key) {\n        var listener = eventType[key];\n        if (typeof listener === "function") {\n          client.off(key, listener);\n        }\n      });\n    }\n    if (events && events.length) {\n      for (i = 0, len = events.length; i < len; i++) {\n        eventType = events[i].toLowerCase().replace(/^on/, "");\n        perEventHandlers = handlers[eventType];\n        if (perEventHandlers && perEventHandlers.length) {\n          if (listener) {\n            foundIndex = perEventHandlers.indexOf(listener);\n            while (foundIndex !== -1) {\n              perEventHandlers.splice(foundIndex, 1);\n              foundIndex = perEventHandlers.indexOf(listener, foundIndex);\n            }\n          } else {\n            perEventHandlers.length = 0;\n          }\n        }\n      }\n    }\n    return client;\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.Client.prototype.handlers`.\n * @private\n */\n  var _clientListeners = function(eventType) {\n    var copy = null, handlers = _clientMeta[this.id] && _clientMeta[this.id].handlers;\n    if (handlers) {\n      if (typeof eventType === "string" && eventType) {\n        copy = handlers[eventType] ? handlers[eventType].slice(0) : [];\n      } else {\n        copy = _deepCopy(handlers);\n      }\n    }\n    return copy;\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.Client.prototype.emit`.\n * @private\n */\n  var _clientEmit = function(event) {\n    var eventCopy, client = this;\n    if (_clientShouldEmit.call(client, event)) {\n      if (typeof event === "object" && event && typeof event.type === "string" && event.type) {\n        event = _extend({}, event);\n      }\n      eventCopy = _extend({}, _createEvent(event), {\n        client: client\n      });\n      _clientDispatchCallbacks.call(client, eventCopy);\n    }\n    return client;\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.Client.prototype.clip`.\n * @private\n */\n  var _clientClip = function(elements) {\n    if (!_clientMeta[this.id]) {\n      throw new Error("Attempted to clip element(s) to a destroyed ZeroClipboard client instance");\n    }\n    elements = _prepClip(elements);\n    for (var i = 0; i < elements.length; i++) {\n      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {\n        if (!elements[i].zcClippingId) {\n          elements[i].zcClippingId = "zcClippingId_" + _elementIdCounter++;\n          _elementMeta[elements[i].zcClippingId] = [ this.id ];\n          if (_globalConfig.autoActivate === true) {\n            _addMouseHandlers(elements[i]);\n          }\n        } else if (_elementMeta[elements[i].zcClippingId].indexOf(this.id) === -1) {\n          _elementMeta[elements[i].zcClippingId].push(this.id);\n        }\n        var clippedElements = _clientMeta[this.id] && _clientMeta[this.id].elements;\n        if (clippedElements.indexOf(elements[i]) === -1) {\n          clippedElements.push(elements[i]);\n        }\n      }\n    }\n    return this;\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.Client.prototype.unclip`.\n * @private\n */\n  var _clientUnclip = function(elements) {\n    var meta = _clientMeta[this.id];\n    if (!meta) {\n      return this;\n    }\n    var clippedElements = meta.elements;\n    var arrayIndex;\n    if (typeof elements === "undefined") {\n      elements = clippedElements.slice(0);\n    } else {\n      elements = _prepClip(elements);\n    }\n    for (var i = elements.length; i--; ) {\n      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {\n        arrayIndex = 0;\n        while ((arrayIndex = clippedElements.indexOf(elements[i], arrayIndex)) !== -1) {\n          clippedElements.splice(arrayIndex, 1);\n        }\n        var clientIds = _elementMeta[elements[i].zcClippingId];\n        if (clientIds) {\n          arrayIndex = 0;\n          while ((arrayIndex = clientIds.indexOf(this.id, arrayIndex)) !== -1) {\n            clientIds.splice(arrayIndex, 1);\n          }\n          if (clientIds.length === 0) {\n            if (_globalConfig.autoActivate === true) {\n              _removeMouseHandlers(elements[i]);\n            }\n            delete elements[i].zcClippingId;\n          }\n        }\n      }\n    }\n    return this;\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.Client.prototype.elements`.\n * @private\n */\n  var _clientElements = function() {\n    var meta = _clientMeta[this.id];\n    return meta && meta.elements ? meta.elements.slice(0) : [];\n  };\n  /**\n * The underlying implementation of `ZeroClipboard.Client.prototype.destroy`.\n * @private\n */\n  var _clientDestroy = function() {\n    var meta = _clientMeta[this.id];\n    if (!meta) {\n      return;\n    }\n    this.unclip();\n    this.off();\n    ZeroClipboard.off("*", meta.coreWildcardHandler);\n    delete _clientMeta[this.id];\n  };\n  /**\n * Inspect an Event to see if the Client (`this`) should honor it for emission.\n * @private\n */\n  var _clientShouldEmit = function(event) {\n    if (!(event && event.type)) {\n      return false;\n    }\n    if (event.client && event.client !== this) {\n      return false;\n    }\n    var meta = _clientMeta[this.id];\n    var clippedEls = meta && meta.elements;\n    var hasClippedEls = !!clippedEls && clippedEls.length > 0;\n    var goodTarget = !event.target || hasClippedEls && clippedEls.indexOf(event.target) !== -1;\n    var goodRelTarget = event.relatedTarget && hasClippedEls && clippedEls.indexOf(event.relatedTarget) !== -1;\n    var goodClient = event.client && event.client === this;\n    if (!meta || !(goodTarget || goodRelTarget || goodClient)) {\n      return false;\n    }\n    return true;\n  };\n  /**\n * Handle the actual dispatching of events to a client instance.\n *\n * @returns `undefined`\n * @private\n */\n  var _clientDispatchCallbacks = function(event) {\n    var meta = _clientMeta[this.id];\n    if (!(typeof event === "object" && event && event.type && meta)) {\n      return;\n    }\n    var async = _shouldPerformAsync(event);\n    var wildcardTypeHandlers = meta && meta.handlers["*"] || [];\n    var specificTypeHandlers = meta && meta.handlers[event.type] || [];\n    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);\n    if (handlers && handlers.length) {\n      var i, len, func, context, eventCopy, originalContext = this;\n      for (i = 0, len = handlers.length; i < len; i++) {\n        func = handlers[i];\n        context = originalContext;\n        if (typeof func === "string" && typeof _window[func] === "function") {\n          func = _window[func];\n        }\n        if (typeof func === "object" && func && typeof func.handleEvent === "function") {\n          context = func;\n          func = func.handleEvent;\n        }\n        if (typeof func === "function") {\n          eventCopy = _extend({}, event);\n          _dispatchCallback(func, context, [ eventCopy ], async);\n        }\n      }\n    }\n  };\n  /**\n * Prepares the elements for clipping/unclipping.\n *\n * @returns An Array of elements.\n * @private\n */\n  var _prepClip = function(elements) {\n    if (typeof elements === "string") {\n      elements = [];\n    }\n    return typeof elements.length !== "number" ? [ elements ] : elements;\n  };\n  /**\n * Add a `mouseover` handler function for a clipped element.\n *\n * @returns `undefined`\n * @private\n */\n  var _addMouseHandlers = function(element) {\n    if (!(element && element.nodeType === 1)) {\n      return;\n    }\n    var _suppressMouseEvents = function(event) {\n      if (!(event || (event = _window.event))) {\n        return;\n      }\n      if (event._source !== "js") {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n      }\n      delete event._source;\n    };\n    var _elementMouseOver = function(event) {\n      if (!(event || (event = _window.event))) {\n        return;\n      }\n      _suppressMouseEvents(event);\n      ZeroClipboard.focus(element);\n    };\n    element.addEventListener("mouseover", _elementMouseOver, false);\n    element.addEventListener("mouseout", _suppressMouseEvents, false);\n    element.addEventListener("mouseenter", _suppressMouseEvents, false);\n    element.addEventListener("mouseleave", _suppressMouseEvents, false);\n    element.addEventListener("mousemove", _suppressMouseEvents, false);\n    _mouseHandlers[element.zcClippingId] = {\n      mouseover: _elementMouseOver,\n      mouseout: _suppressMouseEvents,\n      mouseenter: _suppressMouseEvents,\n      mouseleave: _suppressMouseEvents,\n      mousemove: _suppressMouseEvents\n    };\n  };\n  /**\n * Remove a `mouseover` handler function for a clipped element.\n *\n * @returns `undefined`\n * @private\n */\n  var _removeMouseHandlers = function(element) {\n    if (!(element && element.nodeType === 1)) {\n      return;\n    }\n    var mouseHandlers = _mouseHandlers[element.zcClippingId];\n    if (!(typeof mouseHandlers === "object" && mouseHandlers)) {\n      return;\n    }\n    var key, val, mouseEvents = [ "move", "leave", "enter", "out", "over" ];\n    for (var i = 0, len = mouseEvents.length; i < len; i++) {\n      key = "mouse" + mouseEvents[i];\n      val = mouseHandlers[key];\n      if (typeof val === "function") {\n        element.removeEventListener(key, val, false);\n      }\n    }\n    delete _mouseHandlers[element.zcClippingId];\n  };\n  /**\n * Creates a new ZeroClipboard client instance.\n * Optionally, auto-`clip` an element or collection of elements.\n *\n * @constructor\n */\n  ZeroClipboard._createClient = function() {\n    _clientConstructor.apply(this, _args(arguments));\n  };\n  /**\n * Register an event listener to the client.\n *\n * @returns `this`\n */\n  ZeroClipboard.prototype.on = function() {\n    return _clientOn.apply(this, _args(arguments));\n  };\n  /**\n * Unregister an event handler from the client.\n * If no `listener` function/object is provided, it will unregister all handlers for the provided `eventType`.\n * If no `eventType` is provided, it will unregister all handlers for every event type.\n *\n * @returns `this`\n */\n  ZeroClipboard.prototype.off = function() {\n    return _clientOff.apply(this, _args(arguments));\n  };\n  /**\n * Retrieve event listeners for an `eventType` from the client.\n * If no `eventType` is provided, it will retrieve all listeners for every event type.\n *\n * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`\n */\n  ZeroClipboard.prototype.handlers = function() {\n    return _clientListeners.apply(this, _args(arguments));\n  };\n  /**\n * Event emission receiver from the Flash object for this client\'s registered JavaScript event listeners.\n *\n * @returns For the "copy" event, returns the Flash-friendly "clipData" object; otherwise `undefined`.\n */\n  ZeroClipboard.prototype.emit = function() {\n    return _clientEmit.apply(this, _args(arguments));\n  };\n  /**\n * Register clipboard actions for new element(s) to the client.\n *\n * @returns `this`\n */\n  ZeroClipboard.prototype.clip = function() {\n    return _clientClip.apply(this, _args(arguments));\n  };\n  /**\n * Unregister the clipboard actions of previously registered element(s) on the page.\n * If no elements are provided, ALL registered elements will be unregistered.\n *\n * @returns `this`\n */\n  ZeroClipboard.prototype.unclip = function() {\n    return _clientUnclip.apply(this, _args(arguments));\n  };\n  /**\n * Get all of the elements to which this client is clipped.\n *\n * @returns array of clipped elements\n */\n  ZeroClipboard.prototype.elements = function() {\n    return _clientElements.apply(this, _args(arguments));\n  };\n  /**\n * Self-destruct and clean up everything for a single client.\n * This will NOT destroy the embedded Flash object.\n *\n * @returns `undefined`\n */\n  ZeroClipboard.prototype.destroy = function() {\n    return _clientDestroy.apply(this, _args(arguments));\n  };\n  /**\n * Stores the pending plain text to inject into the clipboard.\n *\n * @returns `this`\n */\n  ZeroClipboard.prototype.setText = function(text) {\n    if (!_clientMeta[this.id]) {\n      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");\n    }\n    ZeroClipboard.setData("text/plain", text);\n    return this;\n  };\n  /**\n * Stores the pending HTML text to inject into the clipboard.\n *\n * @returns `this`\n */\n  ZeroClipboard.prototype.setHtml = function(html) {\n    if (!_clientMeta[this.id]) {\n      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");\n    }\n    ZeroClipboard.setData("text/html", html);\n    return this;\n  };\n  /**\n * Stores the pending rich text (RTF) to inject into the clipboard.\n *\n * @returns `this`\n */\n  ZeroClipboard.prototype.setRichText = function(richText) {\n    if (!_clientMeta[this.id]) {\n      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");\n    }\n    ZeroClipboard.setData("application/rtf", richText);\n    return this;\n  };\n  /**\n * Stores the pending data to inject into the clipboard.\n *\n * @returns `this`\n */\n  ZeroClipboard.prototype.setData = function() {\n    if (!_clientMeta[this.id]) {\n      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");\n    }\n    ZeroClipboard.setData.apply(this, _args(arguments));\n    return this;\n  };\n  /**\n * Clears the pending data to inject into the clipboard.\n * If no `format` is provided, all pending data formats will be cleared.\n *\n * @returns `this`\n */\n  ZeroClipboard.prototype.clearData = function() {\n    if (!_clientMeta[this.id]) {\n      throw new Error("Attempted to clear pending clipboard data from a destroyed ZeroClipboard client instance");\n    }\n    ZeroClipboard.clearData.apply(this, _args(arguments));\n    return this;\n  };\n  /**\n * Gets a copy of the pending data to inject into the clipboard.\n * If no `format` is provided, a copy of ALL pending data formats will be returned.\n *\n * @returns `String` or `Object`\n */\n  ZeroClipboard.prototype.getData = function() {\n    if (!_clientMeta[this.id]) {\n      throw new Error("Attempted to get pending clipboard data from a destroyed ZeroClipboard client instance");\n    }\n    return ZeroClipboard.getData.apply(this, _args(arguments));\n  };\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return ZeroClipboard;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function() {\n  return this || window;\n}());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},7:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular, $, Rx) {\n    'use strict';\n\n    function Service(toastService, connectionsManager, notifyService) {\n\n        var notifier = notifyService();\n        var mu = connectionsManager.getMonitoringUrl();\n        var isConnected = false;\n        var isConnecting = false;\n        var connectivitySource = new Rx.Subject();\n        var shouldShowFailedMessage = true;\n\n        function reportFailedConnection() {\n\n            if (isConnected) {\n                var message = 'Could not connect to the ServiceControl Monitoring service at ' + mu + '. <a class=\"btn btn-default\" href=\"#/configuration/connections\">View connection settings</a>';\n                console.log(message);\n                if (shouldShowFailedMessage) {\n                    toastService.showError(message);\n                    shouldShowFailedMessage = false;\n                }\n            }\n            isConnected = false;\n            isConnecting = false;\n            emitChange();\n        }\n\n        function reportSuccessfulConnection() {\n            if (!isConnected) {\n                var message = 'Connection to ServiceControl Monitoring service was successful ' + mu + '.';\n                console.log(message);\n                shouldShowFailedMessage = true;\n            }\n            isConnected = true;\n            isConnecting = false;\n            emitChange();\n        }\n\n        function reportConnecting() {\n            isConnecting = true;\n            emitChange();\n        }\n\n        function emitChange() {\n            var result = {\n                isConnected: isConnected,\n                isConnecting: isConnecting\n            };\n\n            connectivitySource.onNext(result);\n\n            notifier.notify('MonitoringConnectionStatusChanged', {\n                isMonitoringConnected: isConnected,\n                isMonitoringConnecting: isConnecting\n            });\n        }\n\n        function getConnectionStatusSource() {\n            return connectivitySource;\n        }\n\n        var service = {\n            reportConnecting: reportConnecting,\n            reportFailedConnection: reportFailedConnection,\n            reportSuccessfulConnection: reportSuccessfulConnection,\n            getConnectionStatusSource: getConnectionStatusSource\n        };\n\n        return service;\n    }\n\n    Service.$inject = ['toastService', 'connectionsManager', 'notifyService'];\n\n    angular.module('services.connectivityNotifier', ['sc']).service('connectivityNotifier', Service);\n})(window, window.angular, window.jQuery, window.Rx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvc2VydmljZXMvc2VydmljZXMuY29ubmVjdGl2aXR5Tm90aWZpZXIuanM/MmMwYiJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJhbmd1bGFyIiwiJCIsIlJ4IiwiU2VydmljZSIsInRvYXN0U2VydmljZSIsImNvbm5lY3Rpb25zTWFuYWdlciIsIm5vdGlmeVNlcnZpY2UiLCJub3RpZmllciIsIm11IiwiZ2V0TW9uaXRvcmluZ1VybCIsImlzQ29ubmVjdGVkIiwiaXNDb25uZWN0aW5nIiwiY29ubmVjdGl2aXR5U291cmNlIiwiU3ViamVjdCIsInNob3VsZFNob3dGYWlsZWRNZXNzYWdlIiwicmVwb3J0RmFpbGVkQ29ubmVjdGlvbiIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwic2hvd0Vycm9yIiwiZW1pdENoYW5nZSIsInJlcG9ydFN1Y2Nlc3NmdWxDb25uZWN0aW9uIiwicmVwb3J0Q29ubmVjdGluZyIsInJlc3VsdCIsIm9uTmV4dCIsIm5vdGlmeSIsImlzTW9uaXRvcmluZ0Nvbm5lY3RlZCIsImlzTW9uaXRvcmluZ0Nvbm5lY3RpbmciLCJnZXRDb25uZWN0aW9uU3RhdHVzU291cmNlIiwic2VydmljZSIsIiRpbmplY3QiLCJtb2R1bGUiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiI7O0FBQUEsQ0FBQyxVQUFVQSxNQUFWLEVBQWtCQyxPQUFsQixFQUEyQkMsQ0FBM0IsRUFBOEJDLEVBQTlCLEVBQWtDO0FBQy9COztBQUVBLGFBQVNDLE9BQVQsQ0FBaUJDLFlBQWpCLEVBQStCQyxrQkFBL0IsRUFBbURDLGFBQW5ELEVBQWtFOztBQUU5RCxZQUFJQyxXQUFXRCxlQUFmO0FBQ0EsWUFBSUUsS0FBS0gsbUJBQW1CSSxnQkFBbkIsRUFBVDtBQUNBLFlBQUlDLGNBQWMsS0FBbEI7QUFDQSxZQUFJQyxlQUFlLEtBQW5CO0FBQ0EsWUFBSUMscUJBQXFCLElBQUlWLEdBQUdXLE9BQVAsRUFBekI7QUFDQSxZQUFJQywwQkFBMEIsSUFBOUI7O0FBRUEsaUJBQVNDLHNCQUFULEdBQWtDOztBQUU5QixnQkFBSUwsV0FBSixFQUFpQjtBQUNiLG9CQUFJTSxVQUFVLG1FQUFtRVIsRUFBbkUsR0FBd0UsOEZBQXRGO0FBQ0FTLHdCQUFRQyxHQUFSLENBQVlGLE9BQVo7QUFDQSxvQkFBSUYsdUJBQUosRUFBNkI7QUFDekJWLGlDQUFhZSxTQUFiLENBQXVCSCxPQUF2QjtBQUNBRiw4Q0FBMEIsS0FBMUI7QUFDSDtBQUNKO0FBQ0RKLDBCQUFjLEtBQWQ7QUFDQUMsMkJBQWUsS0FBZjtBQUNBUztBQUNIOztBQUVELGlCQUFTQywwQkFBVCxHQUFzQztBQUNsQyxnQkFBSSxDQUFDWCxXQUFMLEVBQWtCO0FBQ2Qsb0JBQUlNLFVBQVUsb0VBQW9FUixFQUFwRSxHQUF5RSxHQUF2RjtBQUNBUyx3QkFBUUMsR0FBUixDQUFZRixPQUFaO0FBQ0FGLDBDQUEwQixJQUExQjtBQUNIO0FBQ0RKLDBCQUFjLElBQWQ7QUFDQUMsMkJBQWUsS0FBZjtBQUNBUztBQUNIOztBQUVELGlCQUFTRSxnQkFBVCxHQUE0QjtBQUN4QlgsMkJBQWUsSUFBZjtBQUNBUztBQUNIOztBQUVELGlCQUFTQSxVQUFULEdBQXNCO0FBQ2xCLGdCQUFJRyxTQUFTO0FBQ1RiLDZCQUFhQSxXQURKO0FBRVRDLDhCQUFjQTtBQUZMLGFBQWI7O0FBS0FDLCtCQUFtQlksTUFBbkIsQ0FBMEJELE1BQTFCOztBQUVBaEIscUJBQVNrQixNQUFULENBQWdCLG1DQUFoQixFQUFxRDtBQUNqREMsdUNBQXdCaEIsV0FEeUI7QUFFakRpQix3Q0FBeUJoQjtBQUZ3QixhQUFyRDtBQUlIOztBQUVELGlCQUFTaUIseUJBQVQsR0FBcUM7QUFDakMsbUJBQU9oQixrQkFBUDtBQUNIOztBQUVELFlBQUlpQixVQUFVO0FBQ1ZQLDhCQUFrQkEsZ0JBRFI7QUFFVlAsb0NBQXdCQSxzQkFGZDtBQUdWTSx3Q0FBNEJBLDBCQUhsQjtBQUlWTyx1Q0FBMkJBO0FBSmpCLFNBQWQ7O0FBUUEsZUFBT0MsT0FBUDtBQUNIOztBQUVEMUIsWUFBUTJCLE9BQVIsR0FBa0IsQ0FBQyxjQUFELEVBQWlCLG9CQUFqQixFQUF1QyxlQUF2QyxDQUFsQjs7QUFFQTlCLFlBQVErQixNQUFSLENBQWUsK0JBQWYsRUFBZ0QsQ0FBQyxJQUFELENBQWhELEVBQ0tGLE9BREwsQ0FDYSxzQkFEYixFQUNxQzFCLE9BRHJDO0FBRUgsQ0E1RUQsRUE0RUdKLE1BNUVILEVBNEVXQSxPQUFPQyxPQTVFbEIsRUE0RTJCRCxPQUFPaUMsTUE1RWxDLEVBNEUwQ2pDLE9BQU9HLEVBNUVqRCIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICh3aW5kb3csIGFuZ3VsYXIsICQsIFJ4KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gU2VydmljZSh0b2FzdFNlcnZpY2UsIGNvbm5lY3Rpb25zTWFuYWdlciwgbm90aWZ5U2VydmljZSkge1xuXG4gICAgICAgIHZhciBub3RpZmllciA9IG5vdGlmeVNlcnZpY2UoKTtcbiAgICAgICAgdmFyIG11ID0gY29ubmVjdGlvbnNNYW5hZ2VyLmdldE1vbml0b3JpbmdVcmwoKTtcbiAgICAgICAgdmFyIGlzQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBpc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNvbm5lY3Rpdml0eVNvdXJjZSA9IG5ldyBSeC5TdWJqZWN0KCk7XG4gICAgICAgIHZhciBzaG91bGRTaG93RmFpbGVkTWVzc2FnZSA9IHRydWU7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVwb3J0RmFpbGVkQ29ubmVjdGlvbigpIHtcblxuICAgICAgICAgICAgaWYgKGlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSAnQ291bGQgbm90IGNvbm5lY3QgdG8gdGhlIFNlcnZpY2VDb250cm9sIE1vbml0b3Jpbmcgc2VydmljZSBhdCAnICsgbXUgKyAnLiA8YSBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIGhyZWY9XCIjL2NvbmZpZ3VyYXRpb24vY29ubmVjdGlvbnNcIj5WaWV3IGNvbm5lY3Rpb24gc2V0dGluZ3M8L2E+JztcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkU2hvd0ZhaWxlZE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RTZXJ2aWNlLnNob3dFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkU2hvd0ZhaWxlZE1lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaXNDb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBlbWl0Q2hhbmdlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXBvcnRTdWNjZXNzZnVsQ29ubmVjdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9ICdDb25uZWN0aW9uIHRvIFNlcnZpY2VDb250cm9sIE1vbml0b3Jpbmcgc2VydmljZSB3YXMgc3VjY2Vzc2Z1bCAnICsgbXUgKyAnLic7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgc2hvdWxkU2hvd0ZhaWxlZE1lc3NhZ2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNDb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaXNDb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBlbWl0Q2hhbmdlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXBvcnRDb25uZWN0aW5nKCkge1xuICAgICAgICAgICAgaXNDb25uZWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGVtaXRDaGFuZ2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGVtaXRDaGFuZ2UoKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgIGlzQ29ubmVjdGVkOiBpc0Nvbm5lY3RlZCxcbiAgICAgICAgICAgICAgICBpc0Nvbm5lY3Rpbmc6IGlzQ29ubmVjdGluZ1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29ubmVjdGl2aXR5U291cmNlLm9uTmV4dChyZXN1bHQpO1xuXG4gICAgICAgICAgICBub3RpZmllci5ub3RpZnkoJ01vbml0b3JpbmdDb25uZWN0aW9uU3RhdHVzQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgICAgICBpc01vbml0b3JpbmdDb25uZWN0ZWQgOiBpc0Nvbm5lY3RlZCxcbiAgICAgICAgICAgICAgICBpc01vbml0b3JpbmdDb25uZWN0aW5nIDogaXNDb25uZWN0aW5nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldENvbm5lY3Rpb25TdGF0dXNTb3VyY2UoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGl2aXR5U291cmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICByZXBvcnRDb25uZWN0aW5nOiByZXBvcnRDb25uZWN0aW5nLFxuICAgICAgICAgICAgcmVwb3J0RmFpbGVkQ29ubmVjdGlvbjogcmVwb3J0RmFpbGVkQ29ubmVjdGlvbixcbiAgICAgICAgICAgIHJlcG9ydFN1Y2Nlc3NmdWxDb25uZWN0aW9uOiByZXBvcnRTdWNjZXNzZnVsQ29ubmVjdGlvbixcbiAgICAgICAgICAgIGdldENvbm5lY3Rpb25TdGF0dXNTb3VyY2U6IGdldENvbm5lY3Rpb25TdGF0dXNTb3VyY2UsXG4gICAgICAgIH07XG4gICAgICAgIFxuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgIH1cblxuICAgIFNlcnZpY2UuJGluamVjdCA9IFsndG9hc3RTZXJ2aWNlJywgJ2Nvbm5lY3Rpb25zTWFuYWdlcicsICdub3RpZnlTZXJ2aWNlJ107XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2VydmljZXMuY29ubmVjdGl2aXR5Tm90aWZpZXInLCBbJ3NjJ10pXG4gICAgICAgIC5zZXJ2aWNlKCdjb25uZWN0aXZpdHlOb3RpZmllcicsIFNlcnZpY2UpO1xufSkod2luZG93LCB3aW5kb3cuYW5ndWxhciwgd2luZG93LmpRdWVyeSwgd2luZG93LlJ4KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n")},8:function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window, angular) {\n    'use strict';\n\n    angular.module('monitored_endpoints').constant('largeGraphsMinimumYAxis', {\n        'queueLength': 10,\n        'throughputRetries': 10,\n        'processingCritical': 10\n    }).constant('smallGraphsMinimumYAxis', {\n        'queueLength': 10,\n        'throughput': 10,\n        'retries': 10,\n        'processingTime': 10,\n        'criticalTime': 10\n    });\n})(window, window.angular);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvY29uc3RhbnQuZGlhZ3JhbXMuanM/NzMxZCJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uc3RhbnQiXSwibWFwcGluZ3MiOiI7O0FBQUMsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBMkI7QUFDeEI7O0FBRUFBLFlBQVFDLE1BQVIsQ0FBZSxxQkFBZixFQUNLQyxRQURMLENBQ2MseUJBRGQsRUFDeUM7QUFDN0IsdUJBQWUsRUFEYztBQUU3Qiw2QkFBcUIsRUFGUTtBQUc3Qiw4QkFBc0I7QUFITyxLQUR6QyxFQU1LQSxRQU5MLENBTWMseUJBTmQsRUFNeUM7QUFDakMsdUJBQWUsRUFEa0I7QUFFakMsc0JBQWMsRUFGbUI7QUFHakMsbUJBQVcsRUFIc0I7QUFJakMsMEJBQWtCLEVBSmU7QUFLakMsd0JBQWdCO0FBTGlCLEtBTnpDO0FBY0gsQ0FqQkEsRUFpQkNILE1BakJELEVBaUJTQSxPQUFPQyxPQWpCaEIsQ0FBRCIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICh3aW5kb3csIGFuZ3VsYXIpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnbW9uaXRvcmVkX2VuZHBvaW50cycpXG4gICAgICAgIC5jb25zdGFudCgnbGFyZ2VHcmFwaHNNaW5pbXVtWUF4aXMnLCB7XG4gICAgICAgICAgICAgICAgJ3F1ZXVlTGVuZ3RoJzogMTAsXG4gICAgICAgICAgICAgICAgJ3Rocm91Z2hwdXRSZXRyaWVzJzogMTAsXG4gICAgICAgICAgICAgICAgJ3Byb2Nlc3NpbmdDcml0aWNhbCc6IDEwLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgLmNvbnN0YW50KCdzbWFsbEdyYXBoc01pbmltdW1ZQXhpcycsIHtcbiAgICAgICAgICAgICdxdWV1ZUxlbmd0aCc6IDEwLFxuICAgICAgICAgICAgJ3Rocm91Z2hwdXQnOiAxMCxcbiAgICAgICAgICAgICdyZXRyaWVzJzogMTAsXG4gICAgICAgICAgICAncHJvY2Vzc2luZ1RpbWUnOiAxMCxcbiAgICAgICAgICAgICdjcml0aWNhbFRpbWUnOiAxMCxcbiAgICAgICAgfSk7XG5cbn0od2luZG93LCB3aW5kb3cuYW5ndWxhcikpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n")},9:function(module,exports,__webpack_require__){"use strict";eval("\n\n__webpack_require__(4);\n\n(function (window, angular, $) {\n    'use strict';\n\n    function controller($scope, connectivityNotifier, monitoringService, $interval, connectionsManager, notifyService) {\n\n        var notifier = notifyService();\n        $scope.isSCMonitoringConnecting = connectionsManager.getIsMonitoringEnabled();\n\n        if ($scope.isSCMonitoringConnecting) {\n            connectivityNotifier.reportConnecting();\n        }\n\n        $scope.monitoringUrl = connectionsManager.getMonitoringUrl();\n        connectivityNotifier.getConnectionStatusSource().subscribe(function (value) {\n            $scope.isSCMonitoringConnected = value.isConnected;\n            $scope.isSCMonitoringConnecting = value.isConnecting;\n        });\n\n        var lastReport = undefined;\n        var scMonitoringConnectionPing = $interval(function () {\n            monitoringService.getMonitoredEndpoints().then(function (r) {\n                if (lastReport === 'success') {\n                    return;\n                }\n                connectivityNotifier.reportSuccessfulConnection();\n                lastReport = 'success';\n            }, function () {\n                if (lastReport === 'failed') {\n                    return;\n                }\n\n                connectivityNotifier.reportFailedConnection();\n                lastReport = 'failed';\n            });\n        }, 10000);\n\n        // Cancel interval on page changes\n        $scope.$on('$destroy', function () {\n            if (angular.isDefined(scMonitoringConnectionPing)) {\n                $interval.cancel(scMonitoringConnectionPing);\n                scMonitoringConnectionPing = undefined;\n            }\n        });\n\n        notifier.subscribe($scope, function (event, versionInfo) {\n            $scope.monitoringVersion = versionInfo.monitoringVersion;\n        }, 'monitoringversionloaded');\n\n        notifier.subscribe($scope, function (event, versionInfo) {\n            $scope.newscmonitoringversion = true;\n            $scope.newscmonitoringversionlink = versionInfo.versionLink;\n            $scope.newscmonitoringversionnumber = versionInfo.versionNumber;\n        }, 'newmonitoringversionavailable');\n    }\n\n    controller.$inject = ['$scope', 'connectivityNotifier', 'monitoringService', '$interval', 'connectionsManager', 'notifyService'];\n\n    function directive() {\n        return {\n            scope: {},\n            restrict: 'E',\n            replace: true,\n            templateUrl: 'modules/monitoring/js/directives/ui.particular.monitoringConnectivityStatus.tpl.html',\n            controller: controller,\n            link: function link(scope, element) {}\n        };\n    }\n\n    directive.$inject = [];\n\n    angular.module('ui.particular.monitoringConnectivityStatus', []).directive('monitoringConnectivityStatus', directive);\n})(window, window.angular, window.jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWlncmF0ZS9tb2R1bGVzL21vbml0b3JpbmcvanMvZGlyZWN0aXZlcy91aS5wYXJ0aWN1bGFyLm1vbml0b3JpbmdDb25uZWN0aXZpdHlTdGF0dXMuanM/MDA3OCJdLCJuYW1lcyI6WyJyZXF1aXJlIiwid2luZG93IiwiYW5ndWxhciIsIiQiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiY29ubmVjdGl2aXR5Tm90aWZpZXIiLCJtb25pdG9yaW5nU2VydmljZSIsIiRpbnRlcnZhbCIsImNvbm5lY3Rpb25zTWFuYWdlciIsIm5vdGlmeVNlcnZpY2UiLCJub3RpZmllciIsImlzU0NNb25pdG9yaW5nQ29ubmVjdGluZyIsImdldElzTW9uaXRvcmluZ0VuYWJsZWQiLCJyZXBvcnRDb25uZWN0aW5nIiwibW9uaXRvcmluZ1VybCIsImdldE1vbml0b3JpbmdVcmwiLCJnZXRDb25uZWN0aW9uU3RhdHVzU291cmNlIiwic3Vic2NyaWJlIiwiaXNTQ01vbml0b3JpbmdDb25uZWN0ZWQiLCJ2YWx1ZSIsImlzQ29ubmVjdGVkIiwiaXNDb25uZWN0aW5nIiwibGFzdFJlcG9ydCIsInVuZGVmaW5lZCIsInNjTW9uaXRvcmluZ0Nvbm5lY3Rpb25QaW5nIiwiZ2V0TW9uaXRvcmVkRW5kcG9pbnRzIiwidGhlbiIsInJlcG9ydFN1Y2Nlc3NmdWxDb25uZWN0aW9uIiwicmVwb3J0RmFpbGVkQ29ubmVjdGlvbiIsIiRvbiIsImlzRGVmaW5lZCIsImNhbmNlbCIsImV2ZW50IiwidmVyc2lvbkluZm8iLCJtb25pdG9yaW5nVmVyc2lvbiIsIm5ld3NjbW9uaXRvcmluZ3ZlcnNpb24iLCJuZXdzY21vbml0b3Jpbmd2ZXJzaW9ubGluayIsInZlcnNpb25MaW5rIiwibmV3c2Ntb25pdG9yaW5ndmVyc2lvbm51bWJlciIsInZlcnNpb25OdW1iZXIiLCIkaW5qZWN0IiwiZGlyZWN0aXZlIiwic2NvcGUiLCJyZXN0cmljdCIsInJlcGxhY2UiLCJ0ZW1wbGF0ZVVybCIsImxpbmsiLCJlbGVtZW50IiwibW9kdWxlIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiOztBQUFBQSxtQkFBT0EsQ0FBQyxDQUFSOztBQUVDLFdBQVVDLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTJCQyxDQUEzQixFQUE4QjtBQUMzQjs7QUFFQSxhQUFTQyxVQUFULENBQW9CQyxNQUFwQixFQUNJQyxvQkFESixFQUVJQyxpQkFGSixFQUdJQyxTQUhKLEVBSUlDLGtCQUpKLEVBS0lDLGFBTEosRUFLbUI7O0FBRVgsWUFBTUMsV0FBV0QsZUFBakI7QUFDQUwsZUFBT08sd0JBQVAsR0FBa0NILG1CQUFtQkksc0JBQW5CLEVBQWxDOztBQUVBLFlBQUlSLE9BQU9PLHdCQUFYLEVBQXFDO0FBQ2pDTixpQ0FBcUJRLGdCQUFyQjtBQUNIOztBQUVEVCxlQUFPVSxhQUFQLEdBQXVCTixtQkFBbUJPLGdCQUFuQixFQUF2QjtBQUNBViw2QkFBcUJXLHlCQUFyQixHQUFpREMsU0FBakQsQ0FBMkQsaUJBQVM7QUFDaEViLG1CQUFPYyx1QkFBUCxHQUFpQ0MsTUFBTUMsV0FBdkM7QUFDQWhCLG1CQUFPTyx3QkFBUCxHQUFrQ1EsTUFBTUUsWUFBeEM7QUFDSCxTQUhEOztBQUtBLFlBQUlDLGFBQWFDLFNBQWpCO0FBQ0EsWUFBSUMsNkJBQTZCakIsVUFBVSxZQUFZO0FBQ25ERCw4QkFBa0JtQixxQkFBbEIsR0FBMENDLElBQTFDLENBQStDLGFBQUs7QUFDaEQsb0JBQUlKLGVBQWUsU0FBbkIsRUFBOEI7QUFDMUI7QUFDSDtBQUNEakIscUNBQXFCc0IsMEJBQXJCO0FBQ0FMLDZCQUFhLFNBQWI7QUFDSCxhQU5ELEVBTUcsWUFBTTtBQUNMLG9CQUFJQSxlQUFlLFFBQW5CLEVBQTZCO0FBQ3pCO0FBQ0g7O0FBRURqQixxQ0FBcUJ1QixzQkFBckI7QUFDQU4sNkJBQWEsUUFBYjtBQUNILGFBYkQ7QUFjSCxTQWZnQyxFQWU5QixLQWY4QixDQUFqQzs7QUFpQkE7QUFDQWxCLGVBQU95QixHQUFQLENBQVcsVUFBWCxFQUF1QixZQUFZO0FBQy9CLGdCQUFJNUIsUUFBUTZCLFNBQVIsQ0FBa0JOLDBCQUFsQixDQUFKLEVBQW1EO0FBQy9DakIsMEJBQVV3QixNQUFWLENBQWlCUCwwQkFBakI7QUFDQUEsNkNBQTZCRCxTQUE3QjtBQUNIO0FBQ0osU0FMRDs7QUFPQWIsaUJBQVNPLFNBQVQsQ0FBbUJiLE1BQW5CLEVBQTJCLFVBQUM0QixLQUFELEVBQVFDLFdBQVIsRUFBd0I7QUFDL0M3QixtQkFBTzhCLGlCQUFQLEdBQTJCRCxZQUFZQyxpQkFBdkM7QUFDSCxTQUZELEVBRUcseUJBRkg7O0FBSUF4QixpQkFBU08sU0FBVCxDQUFtQmIsTUFBbkIsRUFBMkIsVUFBQzRCLEtBQUQsRUFBUUMsV0FBUixFQUF3QjtBQUMvQzdCLG1CQUFPK0Isc0JBQVAsR0FBZ0MsSUFBaEM7QUFDQS9CLG1CQUFPZ0MsMEJBQVAsR0FBb0NILFlBQVlJLFdBQWhEO0FBQ0FqQyxtQkFBT2tDLDRCQUFQLEdBQXNDTCxZQUFZTSxhQUFsRDtBQUNILFNBSkQsRUFJRywrQkFKSDtBQUtQOztBQUVEcEMsZUFBV3FDLE9BQVgsR0FBcUIsQ0FBQyxRQUFELEVBQ3JCLHNCQURxQixFQUVyQixtQkFGcUIsRUFHckIsV0FIcUIsRUFJckIsb0JBSnFCLEVBS3JCLGVBTHFCLENBQXJCOztBQU9BLGFBQVNDLFNBQVQsR0FBcUI7QUFDakIsZUFBTztBQUNIQyxtQkFBTyxFQURKO0FBRUhDLHNCQUFVLEdBRlA7QUFHSEMscUJBQVMsSUFITjtBQUlIQyx5QkFBYSxzRkFKVjtBQUtIMUMsd0JBQVlBLFVBTFQ7QUFNSDJDLGtCQUFNLGNBQVVKLEtBQVYsRUFBaUJLLE9BQWpCLEVBQTBCLENBQUc7QUFOaEMsU0FBUDtBQVFIOztBQUVETixjQUFVRCxPQUFWLEdBQW9CLEVBQXBCOztBQUVBdkMsWUFDSytDLE1BREwsQ0FDWSw0Q0FEWixFQUMwRCxFQUQxRCxFQUVLUCxTQUZMLENBRWUsOEJBRmYsRUFFK0NBLFNBRi9DO0FBSUgsQ0FwRkEsRUFvRkN6QyxNQXBGRCxFQW9GU0EsT0FBT0MsT0FwRmhCLEVBb0Z5QkQsT0FBT2lELE1BcEZoQyxDQUFEIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKFwiemVyb2NsaXBib2FyZFwiKTtcblxuKGZ1bmN0aW9uICh3aW5kb3csIGFuZ3VsYXIsICQpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCRzY29wZSxcbiAgICAgICAgY29ubmVjdGl2aXR5Tm90aWZpZXIsXG4gICAgICAgIG1vbml0b3JpbmdTZXJ2aWNlLFxuICAgICAgICAkaW50ZXJ2YWwsXG4gICAgICAgIGNvbm5lY3Rpb25zTWFuYWdlcixcbiAgICAgICAgbm90aWZ5U2VydmljZSkge1xuXG4gICAgICAgICAgICBjb25zdCBub3RpZmllciA9IG5vdGlmeVNlcnZpY2UoKTtcbiAgICAgICAgICAgICRzY29wZS5pc1NDTW9uaXRvcmluZ0Nvbm5lY3RpbmcgPSBjb25uZWN0aW9uc01hbmFnZXIuZ2V0SXNNb25pdG9yaW5nRW5hYmxlZCgpO1xuXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmlzU0NNb25pdG9yaW5nQ29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpdml0eU5vdGlmaWVyLnJlcG9ydENvbm5lY3RpbmcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLm1vbml0b3JpbmdVcmwgPSBjb25uZWN0aW9uc01hbmFnZXIuZ2V0TW9uaXRvcmluZ1VybCgpO1xuICAgICAgICAgICAgY29ubmVjdGl2aXR5Tm90aWZpZXIuZ2V0Q29ubmVjdGlvblN0YXR1c1NvdXJjZSgpLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzU0NNb25pdG9yaW5nQ29ubmVjdGVkID0gdmFsdWUuaXNDb25uZWN0ZWQ7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzU0NNb25pdG9yaW5nQ29ubmVjdGluZyA9IHZhbHVlLmlzQ29ubmVjdGluZztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgbGFzdFJlcG9ydCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHZhciBzY01vbml0b3JpbmdDb25uZWN0aW9uUGluZyA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbW9uaXRvcmluZ1NlcnZpY2UuZ2V0TW9uaXRvcmVkRW5kcG9pbnRzKCkudGhlbihyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RSZXBvcnQgPT09ICdzdWNjZXNzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpdml0eU5vdGlmaWVyLnJlcG9ydFN1Y2Nlc3NmdWxDb25uZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RSZXBvcnQgPSAnc3VjY2Vzcyc7XG4gICAgICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdFJlcG9ydCA9PT0gJ2ZhaWxlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpdml0eU5vdGlmaWVyLnJlcG9ydEZhaWxlZENvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFJlcG9ydCA9ICdmYWlsZWQnO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMTAwMDApO1xuXG4gICAgICAgICAgICAvLyBDYW5jZWwgaW50ZXJ2YWwgb24gcGFnZSBjaGFuZ2VzXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoc2NNb25pdG9yaW5nQ29ubmVjdGlvblBpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwoc2NNb25pdG9yaW5nQ29ubmVjdGlvblBpbmcpO1xuICAgICAgICAgICAgICAgICAgICBzY01vbml0b3JpbmdDb25uZWN0aW9uUGluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbm90aWZpZXIuc3Vic2NyaWJlKCRzY29wZSwgKGV2ZW50LCB2ZXJzaW9uSW5mbykgPT4ge1xuICAgICAgICAgICAgICAgICRzY29wZS5tb25pdG9yaW5nVmVyc2lvbiA9IHZlcnNpb25JbmZvLm1vbml0b3JpbmdWZXJzaW9uO1xuICAgICAgICAgICAgfSwgJ21vbml0b3Jpbmd2ZXJzaW9ubG9hZGVkJyk7XG5cbiAgICAgICAgICAgIG5vdGlmaWVyLnN1YnNjcmliZSgkc2NvcGUsIChldmVudCwgdmVyc2lvbkluZm8pID0+IHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3c2Ntb25pdG9yaW5ndmVyc2lvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld3NjbW9uaXRvcmluZ3ZlcnNpb25saW5rID0gdmVyc2lvbkluZm8udmVyc2lvbkxpbms7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld3NjbW9uaXRvcmluZ3ZlcnNpb25udW1iZXIgPSB2ZXJzaW9uSW5mby52ZXJzaW9uTnVtYmVyO1xuICAgICAgICAgICAgfSwgJ25ld21vbml0b3Jpbmd2ZXJzaW9uYXZhaWxhYmxlJyk7XG4gICAgfVxuXG4gICAgY29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLFxuICAgICdjb25uZWN0aXZpdHlOb3RpZmllcicsXG4gICAgJ21vbml0b3JpbmdTZXJ2aWNlJyxcbiAgICAnJGludGVydmFsJyxcbiAgICAnY29ubmVjdGlvbnNNYW5hZ2VyJyxcbiAgICAnbm90aWZ5U2VydmljZSddO1xuXG4gICAgZnVuY3Rpb24gZGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvbW9uaXRvcmluZy9qcy9kaXJlY3RpdmVzL3VpLnBhcnRpY3VsYXIubW9uaXRvcmluZ0Nvbm5lY3Rpdml0eVN0YXR1cy50cGwuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBjb250cm9sbGVyLFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50KSB7IH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBkaXJlY3RpdmUuJGluamVjdCA9IFtdO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCd1aS5wYXJ0aWN1bGFyLm1vbml0b3JpbmdDb25uZWN0aXZpdHlTdGF0dXMnLCBbXSlcbiAgICAgICAgLmRpcmVjdGl2ZSgnbW9uaXRvcmluZ0Nvbm5lY3Rpdml0eVN0YXR1cycsIGRpcmVjdGl2ZSk7XG5cbn0od2luZG93LCB3aW5kb3cuYW5ndWxhciwgd2luZG93LmpRdWVyeSkpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n")}});