import CustomCheck, { Status } from "@/resources/CustomCheck";
import { SetupFactoryOptions } from "../driver";
const emptyContent = JSON.stringify([]);

export const hasCustomChecksEmpty = ({ driver }: SetupFactoryOptions) => {
  const serviceControlInstanceUrl = window.defaultConfig.service_control_url;
  driver.mockEndpoint(`${serviceControlInstanceUrl}customchecks`, {
    body: emptyContent,
    headers: {
      "Total-Count": "0", //count of failing custom checks
    },
  });
};

const generateGuid = () => {
  return crypto.randomUUID();
};
const customCheckTemplate = <CustomCheck>{
  id: "customchecks/6131fa95-9414-1898-9c83-c5b18587945b",
  custom_check_id: "SampleCustomeCheck",
  category: "SomeCategory",
  status: "Pass",
  failure_reason: "I don't know the reason",
  reported_at: "2025-01-10T05:06:30.4074087Z",
  originating_endpoint: {
    name: "EndpointX",
    host_id: "ff605b55-6fbb-af56-5753-73c1ff73e601",
    host: "ABC",
  },
};

export const hasCustomChecks =
  (failingCount: number, passingCount: number) =>
  ({ driver }: SetupFactoryOptions) => {
    const customChecksData = generateCustomChecksData(failingCount, passingCount)();

    // Call getCustomChecks to mock the endpoints with the generated data
    getCustomChecks(customChecksData)({ driver });
  };

export const generateCustomChecksData = (failingCount: number, passingCount: number) => () => {
  // Calculate total count
  const totalCount = failingCount + passingCount;

  // Create checks (both failing and passing)
  const customChecks = Array.from({ length: totalCount }).map((_, index) => {
    // Generate the date based on the index
    const date = new Date();
    date.setDate(date.getDate() - index); // Subtract `index` days from the current date
    const reportedAt = date.toISOString(); // Convert to ISO string format

    // Determine status and failure reason
    const status = index < failingCount ? Status.Fail : Status.Pass;
    const failureReason = status === Status.Fail ? `configured to fail on endpoint ${index}` : "";

    // Generate a new GUID for the ID and host_id
    const newGuid = generateGuid();
    const originatingEndpointName = `endpoint ${index}`;
    const originatingHost = `ABC ${index}`;
    const customCategory = `Some Category ${index}`;
    const customeCheckId = `SampleCustomeCheck ${index}`;

    return {
      ...customCheckTemplate,
      id: `customchecks/${newGuid}`, // New GUID for ID
      category: customCategory,
      custom_check_id: customeCheckId,
      status, // Fail or Pass based on index
      failure_reason: failureReason, // Failure reason or empty for passing
      reported_at: reportedAt, // Autogenerated reported_at based on index
      originating_endpoint: {
        name: originatingEndpointName, // Endpoint name based on index
        host_id: newGuid, // New GUID for host_id
        host: originatingHost, // Host name based on index
      },
    };
  });
  return customChecks;
};

export const getCustomChecks =
  (customChecks: CustomCheck[]) =>
  ({ driver }: SetupFactoryOptions) => {
    const serviceControlInstanceUrl = window.defaultConfig.service_control_url;

    const failedCustomChecks = customChecks.filter((check) => check.status === "Fail");

    driver.mockEndpointDynamic(`${serviceControlInstanceUrl}customchecks`, "get", (url) => {
      const status = url.searchParams.get("status");
      if (status === "fail") {
        return Promise.resolve({
          body: failedCustomChecks,
          headers: { "Total-Count": failedCustomChecks.length.toString() },
        });
      }

      return Promise.resolve({
        body: customChecks,
        headers: { "Total-Count": customChecks.length.toString() },
      });
    });
    driver.mockEndpointDynamic(`${serviceControlInstanceUrl}customchecks/:id`, "delete", () => {
      return Promise.resolve({
        body: { message: "Successfully deleted" },
        status: 200,
        headers: { "Content-Type": "application/json" },
      });
    });
  };

export const updateCustomCheckItemByStatus = (data: CustomCheck[], statusToUpdate: string) => {
  const itemToUpdate = data.find((item) => item.status === statusToUpdate);

  if (itemToUpdate) {
    if (statusToUpdate === "Pass") {
      itemToUpdate.status = Status.Fail;
      itemToUpdate.failure_reason = "Some reason I dont know";
    } else {
      itemToUpdate.status = Status.Pass;
      itemToUpdate.failure_reason = "";
    }
  }
};
export const updateCustomCheckItemByItem = (data: CustomCheck[], itemToUpdate: CustomCheck, statusToUpdate: string) => {
  const itemFound = data.find((item) => item.id === itemToUpdate.id);
  if (itemFound != null) {
    if (statusToUpdate === "Fail") {
      itemToUpdate.status = Status.Fail;
      itemToUpdate.failure_reason = "Some reason I dont know";
    } else {
      itemToUpdate.status = Status.Pass;
      itemToUpdate.failure_reason = "";
    }
  }
};
