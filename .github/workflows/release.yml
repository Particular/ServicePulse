name: Release
on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-*'
env:
  DOTNET_NOLOGO: true
  # Signals build to create the installer
  RELEASE_WORKFLOW: true
jobs:
  release:
    runs-on: windows-2019 # Code signing requirement https://github.com/NuGet/Home/issues/7939
    outputs:
      version: ${{ steps.save-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Parse repo name
        run: |
          $FullName = "$env:GITHUB_REPOSITORY"
          $Org,$RepoName = $FullName.Split('/')
          echo "PARTICULAR_REPO_NAME=$RepoName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 5.0.203
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Setup Advanced Installer
        run: |
          $version = "18.8.1"
          choco install advanced-installer --version=$version
          & "C:\Program Files (x86)\Caphyon\Advanced Installer $version\bin\x86\AdvancedInstaller.com" /register ${{ secrets.ADVANCED_INSTALLER_LICENSE_KEY }}
      - name: Install NuGetKeyVaultSignTool
        run: dotnet tool install --global NuGetKeyVaultSignTool
      - name: Install Host npm packages
        run: npm run load
        working-directory: src/ServicePulse.Host
      - name: Prepare AIP file
        run: |
          $content = Get-Content -Raw -Path src/Setup/ServicePulse.aip
          $content = $content -replace "replace-tenant-id", "${{ secrets.AZURE_KEY_VAULT_TENANT_ID }}" -replace "replace-app-id", "${{ secrets.AZURE_KEY_VAULT_CLIENT_ID }}" -replace "replace-cert-name", "${{ secrets.AZURE_KEY_VAULT_CERTIFICATE_NAME }}"
          Set-Content src/Setup/ServicePulse.aip $content
      - name: Build
        env:
          AZURE_KEY_VAULT_CLIENT_SECRET: ${{ secrets.AZURE_KEY_VAULT_CLIENT_SECRET }}
        run: msbuild src -p:Configuration=Release -restore -m
      - id: save-version
        name: Save version
        run: echo "::set-output name=version::${{env.MinVerVersion}}"
      - name: Sign NuGet Packages
        run: |
          NuGetKeyVaultSignTool sign nugets\*.nupkg `
          --file-digest sha256 `
          --timestamp-rfc3161 http://timestamp.digicert.com `
          --timestamp-digest sha256 `
          --azure-key-vault-url https://particularcodesigning.vault.azure.net `
          --azure-key-vault-client-id ${{ secrets.AZURE_KEY_VAULT_CLIENT_ID }} `
          --azure-key-vault-tenant-id ${{ secrets.AZURE_KEY_VAULT_TENANT_ID }} `
          --azure-key-vault-client-secret ${{ secrets.AZURE_KEY_VAULT_CLIENT_SECRET }} `
          --azure-key-vault-certificate ${{ secrets.AZURE_KEY_VAULT_CERTIFICATE_NAME }}
      - name: Publish artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            assets/*
            nugets/*
          retention-days: 1
      - name: Install Octopus CLI
        uses: OctopusDeploy/install-octopus-cli-action@v1.2.0
        with:
          version: latest
      - name: Create Octopus Package
        run: |
          # Creating the expected file layout for the Octopus package, including intermediate directories
          mkdir -p packaging/content
          cp assets\* .\packaging\content

          # Octopus expects NuGet packages to have an extra .nzip extension for NuGet, .czip for Chocolatey
          $nugets = Get-ChildItem -Path "./nugets/*.nupkg"
          foreach ($file in $nugets) {
            cp $file "./packaging/content/$($file.Name).nzip"
          }

          # Octopus Deploy scripts need an executable file to recreate this metadata
          @"
          `$Branch = "${{github.ref_name}}"
          `$Version = "${{env.MinVerVersion}}"
          `$Product = "${{env.PARTICULAR_REPO_NAME}}"
          `$Major = "${{env.MinVerMajor}}"
          `$Minor = "${{env.MinVerMinor}}"
          `$Commit = "${{github.sha}}"
          "@ > packaging/Metadata.ps1
          
          # Create the Octopus package
          octo pack --id="${{env.PARTICULAR_REPO_NAME}}.Deploy" --version="${{env.MinVerVersion}}" --format="nupkg" --basePath="packaging" --outFolder="octopus-package"
        shell: pwsh
      - name: Publish Octopus Package Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: octopus-package
          path: octopus-package/*
          retention-days: 1
      - name: Push package to Octopus Deploy
        uses: OctopusDeploy/push-package-action@v1.1.2
        with:
          server: https://deploy.particular.net
          api_key: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
          packages: octopus-package/${{env.PARTICULAR_REPO_NAME}}.Deploy.${{env.MinVerVersion}}.nupkg
      - name: Create Octopus Deploy release
        uses: OctopusDeploy/create-release-action@v1.1.3
        with:
          server: https://deploy.particular.net
          api_key: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
          project: ${{env.PARTICULAR_REPO_NAME}}
          release_number: ${{env.MinVerVersion}}
          package_version: ${{env.MinVerVersion}}
          package: "GitReleaseManager:0.11.0"
  docker:
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            image-name: servicepulse-windows
            dockerfile: dockerfile.iis
          - os: ubuntu-20.04
            image-name: servicepulse
            dockerfile: dockerfile.nginx
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Host npm packages
        run: npm run load
        working-directory: src/ServicePulse.Host
      - name: Update app.constants.js
        run: |
          $filename = "src/ServicePulse.Host/app/js/app.constants.js"
          (Get-Content $filename).replace("1.2.0", "${{ needs.release.outputs.version }}") | Set-Content $filename
        shell: pwsh
      - name: Login to Docker Hub
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker image
        run: docker build -t particular/${{ matrix.image-name }}:${{ needs.release.outputs.version }} -f ${{ matrix.dockerfile }} .
        working-directory: src
      - name: Push Docker image
        run: docker push particular/${{ matrix.image-name }}:${{ needs.release.outputs.version }}